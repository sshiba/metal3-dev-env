+ source /home/capm3/projects/metal3-dev-env/scripts/../lib/common.sh
++ [[ :/home/capm3/.krew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin: != *\:\/\u\s\r\/\l\o\c\a\l\/\g\o\/\b\i\n\:* ]]
+++ go env
++ eval 'GO111MODULE=""
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/capm3/.cache/go-build"
GOENV="/home/capm3/.config/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOINSECURE=""
GOMODCACHE="/home/capm3/go/pkg/mod"
GONOPROXY=""
GONOSUMDB=""
GOOS="linux"
GOPATH="/home/capm3/go"
GOPRIVATE=""
GOPROXY="https://proxy.golang.org,direct"
GOROOT="/usr/local/go"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GOVCS=""
GOVERSION="go1.16.7"
GCCGO="gccgo"
AR="ar"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD="/dev/null"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build116812008=/tmp/go-build -gno-record-gcc-switches"'
+++ GO111MODULE=
+++ GOARCH=amd64
+++ GOBIN=
+++ GOCACHE=/home/capm3/.cache/go-build
+++ GOENV=/home/capm3/.config/go/env
+++ GOEXE=
+++ GOFLAGS=
+++ GOHOSTARCH=amd64
+++ GOHOSTOS=linux
+++ GOINSECURE=
+++ GOMODCACHE=/home/capm3/go/pkg/mod
+++ GONOPROXY=
+++ GONOSUMDB=
+++ GOOS=linux
+++ GOPATH=/home/capm3/go
+++ GOPRIVATE=
+++ GOPROXY=https://proxy.golang.org,direct
+++ GOROOT=/usr/local/go
+++ GOSUMDB=sum.golang.org
+++ GOTMPDIR=
+++ GOTOOLDIR=/usr/local/go/pkg/tool/linux_amd64
+++ GOVCS=
+++ GOVERSION=go1.16.7
+++ GCCGO=gccgo
+++ AR=ar
+++ CC=gcc
+++ CXX=g++
+++ CGO_ENABLED=1
+++ GOMOD=/dev/null
+++ CGO_CFLAGS='-g -O2'
+++ CGO_CPPFLAGS=
+++ CGO_CXXFLAGS='-g -O2'
+++ CGO_FFLAGS='-g -O2'
+++ CGO_LDFLAGS='-g -O2'
+++ PKG_CONFIG=pkg-config
+++ GOGCCFLAGS='-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build116812008=/tmp/go-build -gno-record-gcc-switches'
++ export GOPATH
++++ dirname /home/capm3/projects/metal3-dev-env/scripts/../lib/common.sh
+++ cd /home/capm3/projects/metal3-dev-env/scripts/../lib/..
+++ pwd
++ SCRIPTDIR=/home/capm3/projects/metal3-dev-env
+++ whoami
++ USER=capm3
++ export USER=capm3
++ USER=capm3
++ '[' -z '' ']'
++ '[' '!' -f /home/capm3/projects/metal3-dev-env/config_capm3.sh ']'
++ CONFIG=/home/capm3/projects/metal3-dev-env/config_capm3.sh
++ source /home/capm3/projects/metal3-dev-env/config_capm3.sh
+++ export KUBECONFIG=/home/capm3/.kube/config
+++ KUBECONFIG=/home/capm3/.kube/config
+++ export K8S_AUTH_KUBECONFIG=/home/capm3/.kube/config
+++ K8S_AUTH_KUBECONFIG=/home/capm3/.kube/config
+++ export IMAGE_OS=Ubuntu
+++ IMAGE_OS=Ubuntu
+++ export EPHEMERAL_CLUSTER=kind
+++ EPHEMERAL_CLUSTER=kind
+++ export CONTAINER_RUNTIME=docker
+++ CONTAINER_RUNTIME=docker
+++ export NUM_NODES=4
+++ NUM_NODES=4
+++ export NUM_OF_MASTER_REPLICAS=3
+++ NUM_OF_MASTER_REPLICAS=3
+++ export NUM_OF_WORKER_REPLICAS=1
+++ NUM_OF_WORKER_REPLICAS=1
+++ export CAPM3_VERSION=v1alpha5
+++ CAPM3_VERSION=v1alpha5
+++ export CAPI_VERSION=v1alpha4
+++ CAPI_VERSION=v1alpha4
+++ export KUBERNETES_VERSION=v1.21.1
+++ KUBERNETES_VERSION=v1.21.1
+++ export UPGRADED_K8S_VERSION=v1.22.2
+++ UPGRADED_K8S_VERSION=v1.22.2
+++ export IMAGE_USERNAME=metal3
+++ IMAGE_USERNAME=metal3
++ export MARIADB_HOST=mariaDB
++ MARIADB_HOST=mariaDB
++ export MARIADB_HOST_IP=127.0.0.1
++ MARIADB_HOST_IP=127.0.0.1
++ ADDN_DNS=
++ EXT_IF=
++ PRO_IF=
++ MANAGE_BR_BRIDGE=y
++ MANAGE_PRO_BRIDGE=y
++ MANAGE_INT_BRIDGE=y
++ INT_IF=
++ ROOT_DISK_NAME=/dev/sda
++ NODE_HOSTNAME_FORMAT=node-%d
++ source /etc/os-release
+++ NAME=Ubuntu
+++ VERSION='20.04.3 LTS (Focal Fossa)'
+++ ID=ubuntu
+++ ID_LIKE=debian
+++ PRETTY_NAME='Ubuntu 20.04.3 LTS'
+++ VERSION_ID=20.04
+++ HOME_URL=https://www.ubuntu.com/
+++ SUPPORT_URL=https://help.ubuntu.com/
+++ BUG_REPORT_URL=https://bugs.launchpad.net/ubuntu/
+++ PRIVACY_POLICY_URL=https://www.ubuntu.com/legal/terms-and-policies/privacy-policy
+++ VERSION_CODENAME=focal
+++ UBUNTU_CODENAME=focal
++ export DISTRO=ubuntu20
++ DISTRO=ubuntu20
++ export OS=ubuntu
++ OS=ubuntu
++ export OS_VERSION_ID=20.04
++ OS_VERSION_ID=20.04
++ SUPPORTED_DISTROS=(centos8 rhel8 ubuntu18 ubuntu20)
++ export SUPPORTED_DISTROS
++ [[ ! centos8 rhel8 ubuntu18 ubuntu20 =~ ubuntu20 ]]
++ [[ ubuntu == ubuntu ]]
++ export CONTAINER_RUNTIME=docker
++ CONTAINER_RUNTIME=docker
++ [[ docker == \p\o\d\m\a\n ]]
++ export POD_NAME=
++ POD_NAME=
++ export POD_NAME_INFRA=
++ POD_NAME_INFRA=
++ export SSH_KEY=/home/capm3/.ssh/id_rsa
++ SSH_KEY=/home/capm3/.ssh/id_rsa
++ export SSH_PUB_KEY=/home/capm3/.ssh/id_rsa.pub
++ SSH_PUB_KEY=/home/capm3/.ssh/id_rsa.pub
++ '[' '!' -f /home/capm3/.ssh/id_rsa ']'
++ FILESYSTEM=/
++ CAPM3_VERSION_LIST='v1alpha4 v1alpha5 v1beta1'
++ export CAPM3_VERSION=v1alpha5
++ CAPM3_VERSION=v1alpha5
++ '[' v1alpha5 == v1alpha4 ']'
++ '[' v1alpha5 == v1alpha5 ']'
++ export CAPI_VERSION=v1alpha4
++ CAPI_VERSION=v1alpha4
++ export M3PATH=/home/capm3/go/src/github.com/metal3-io
++ M3PATH=/home/capm3/go/src/github.com/metal3-io
++ export BMOPATH=/home/capm3/go/src/github.com/metal3-io/baremetal-operator
++ BMOPATH=/home/capm3/go/src/github.com/metal3-io/baremetal-operator
++ export RUN_LOCAL_IRONIC_SCRIPT=/home/capm3/go/src/github.com/metal3-io/baremetal-operator/tools/run_local_ironic.sh
++ RUN_LOCAL_IRONIC_SCRIPT=/home/capm3/go/src/github.com/metal3-io/baremetal-operator/tools/run_local_ironic.sh
++ export CAPM3PATH=/home/capm3/go/src/github.com/metal3-io/cluster-api-provider-metal3
++ CAPM3PATH=/home/capm3/go/src/github.com/metal3-io/cluster-api-provider-metal3
++ export CAPM3_BASE_URL=metal3-io/cluster-api-provider-metal3
++ CAPM3_BASE_URL=metal3-io/cluster-api-provider-metal3
++ export CAPM3REPO=https://github.com/metal3-io/cluster-api-provider-metal3
++ CAPM3REPO=https://github.com/metal3-io/cluster-api-provider-metal3
++ export IPAMPATH=/home/capm3/go/src/github.com/metal3-io/ip-address-manager
++ IPAMPATH=/home/capm3/go/src/github.com/metal3-io/ip-address-manager
++ export IPAM_BASE_URL=metal3-io/ip-address-manager
++ IPAM_BASE_URL=metal3-io/ip-address-manager
++ export IPAMREPO=https://github.com/metal3-io/ip-address-manager
++ IPAMREPO=https://github.com/metal3-io/ip-address-manager
++ '[' v1alpha4 == v1alpha3 ']'
++ '[' v1alpha4 == v1alpha4 ']'
++ IPAMBRANCH=release-0.1
++ IPA_DOWNLOAD_ENABLED=true
++ CAPI_BASE_URL=kubernetes-sigs/cluster-api
++ '[' v1alpha5 == v1alpha4 ']'
++ '[' v1alpha5 == v1alpha5 ']'
++ CAPM3BRANCH=release-0.5
++ BMOREPO=https://github.com/metal3-io/baremetal-operator.git
++ BMOBRANCH=master
++ FORCE_REPO_UPDATE=true
++ BMOCOMMIT=HEAD
++ BMO_RUN_LOCAL=false
++ CAPM3_RUN_LOCAL=false
++ WORKING_DIR=/opt/metal3-dev-env
++ NODES_FILE=/opt/metal3-dev-env/ironic_nodes.json
++ NODES_PLATFORM=libvirt
++ export NAMESPACE=metal3
++ NAMESPACE=metal3
++ export NUM_NODES=4
++ NUM_NODES=4
++ export NUM_OF_MASTER_REPLICAS=3
++ NUM_OF_MASTER_REPLICAS=3
++ export NUM_OF_WORKER_REPLICAS=1
++ NUM_OF_WORKER_REPLICAS=1
++ export VM_EXTRADISKS=false
++ VM_EXTRADISKS=false
++ export VM_EXTRADISKS_FILE_SYSTEM=ext4
++ VM_EXTRADISKS_FILE_SYSTEM=ext4
++ export VM_EXTRADISKS_MOUNT_DIR=/mnt/disk2
++ VM_EXTRADISKS_MOUNT_DIR=/mnt/disk2
++ export NODE_DRAIN_TIMEOUT=0s
++ NODE_DRAIN_TIMEOUT=0s
++ export MAX_SURGE_VALUE=0
++ MAX_SURGE_VALUE=0
++ export DOCKER_REGISTRY_IMAGE=registry:2.7.1
++ DOCKER_REGISTRY_IMAGE=registry:2.7.1
++ export CONTAINER_REGISTRY=quay.io
++ CONTAINER_REGISTRY=quay.io
++ export VBMC_IMAGE=quay.io/metal3-io/vbmc
++ VBMC_IMAGE=quay.io/metal3-io/vbmc
++ export SUSHY_TOOLS_IMAGE=quay.io/metal3-io/sushy-tools
++ SUSHY_TOOLS_IMAGE=quay.io/metal3-io/sushy-tools
++ export IRONIC_TLS_SETUP=true
++ IRONIC_TLS_SETUP=true
++ export IRONIC_BASIC_AUTH=true
++ IRONIC_BASIC_AUTH=true
++ export IPA_DOWNLOADER_IMAGE=quay.io/metal3-io/ironic-ipa-downloader
++ IPA_DOWNLOADER_IMAGE=quay.io/metal3-io/ironic-ipa-downloader
++ export IRONIC_IMAGE=quay.io/metal3-io/ironic
++ IRONIC_IMAGE=quay.io/metal3-io/ironic
++ export IRONIC_CLIENT_IMAGE=quay.io/metal3-io/ironic-client
++ IRONIC_CLIENT_IMAGE=quay.io/metal3-io/ironic-client
++ export IRONIC_DATA_DIR=/opt/metal3-dev-env/ironic
++ IRONIC_DATA_DIR=/opt/metal3-dev-env/ironic
++ export IRONIC_IMAGE_DIR=/opt/metal3-dev-env/ironic/html/images
++ IRONIC_IMAGE_DIR=/opt/metal3-dev-env/ironic/html/images
++ export IRONIC_KEEPALIVED_IMAGE=quay.io/metal3-io/keepalived
++ IRONIC_KEEPALIVED_IMAGE=quay.io/metal3-io/keepalived
++ '[' v1alpha5 == v1alpha4 ']'
++ export IRONIC_NAMESPACE=baremetal-operator-system
++ IRONIC_NAMESPACE=baremetal-operator-system
++ export NAMEPREFIX=baremetal-operator
++ NAMEPREFIX=baremetal-operator
++ export RESTART_CONTAINER_CERTIFICATE_UPDATED=true
++ RESTART_CONTAINER_CERTIFICATE_UPDATED=true
++ export BAREMETAL_OPERATOR_IMAGE=quay.io/metal3-io/baremetal-operator
++ BAREMETAL_OPERATOR_IMAGE=quay.io/metal3-io/baremetal-operator
++ export OPENSTACK_CONFIG=/home/capm3/.config/openstack/clouds.yaml
++ OPENSTACK_CONFIG=/home/capm3/.config/openstack/clouds.yaml
++ '[' v1alpha5 == v1alpha4 ']'
++ '[' v1alpha5 == v1alpha5 ']'
++ export CAPM3_IMAGE=quay.io/metal3-io/cluster-api-provider-metal3:release-0.5
++ CAPM3_IMAGE=quay.io/metal3-io/cluster-api-provider-metal3:release-0.5
++ export IPAM_IMAGE=quay.io/metal3-io/ip-address-manager:release-0.1
++ IPAM_IMAGE=quay.io/metal3-io/ip-address-manager:release-0.1
++ export DEFAULT_HOSTS_MEMORY=4096
++ DEFAULT_HOSTS_MEMORY=4096
++ export CLUSTER_NAME=test1
++ CLUSTER_NAME=test1
++ export CLUSTER_APIENDPOINT_IP=192.168.111.249
++ CLUSTER_APIENDPOINT_IP=192.168.111.249
++ export KUBERNETES_VERSION=v1.21.1
++ KUBERNETES_VERSION=v1.21.1
++ export KUBERNETES_BINARIES_VERSION=v1.21.1
++ KUBERNETES_BINARIES_VERSION=v1.21.1
++ export KUBERNETES_BINARIES_CONFIG_VERSION=v0.2.7
++ KUBERNETES_BINARIES_CONFIG_VERSION=v0.2.7
++ '[' docker == docker ']'
++ export EPHEMERAL_CLUSTER=kind
++ EPHEMERAL_CLUSTER=kind
++ export KUSTOMIZE_VERSION=v4.1.3
++ KUSTOMIZE_VERSION=v4.1.3
++ export KIND_VERSION=v0.11.1
++ KIND_VERSION=v0.11.1
++ '[' v1.21.1 == v1.21.2 ']'
++ export KIND_NODE_IMAGE_VERSION=v1.22.2
++ KIND_NODE_IMAGE_VERSION=v1.22.2
++ export MINIKUBE_VERSION=v1.23.2
++ MINIKUBE_VERSION=v1.23.2
++ export ANSIBLE_VERSION=4.8.0
++ ANSIBLE_VERSION=4.8.0
++ SKIP_RETRIES=false
++ TEST_TIME_INTERVAL=10
++ TEST_MAX_TIME=240
++ FAILS=0
++ RESULT_STR=
++ export ANSIBLE_DISPLAY_SKIPPED_HOSTS=no
++ ANSIBLE_DISPLAY_SKIPPED_HOSTS=no
++ '[' 4 -lt 4 ']'
++ export LIBVIRT_DEFAULT_URI=qemu:///system
++ LIBVIRT_DEFAULT_URI=qemu:///system
++ '[' capm3 '!=' root ']'
++ '[' /run/user/1000 == /run/user/0 ']'
++ sudo -n uptime
++ export USE_FIREWALLD=False
++ USE_FIREWALLD=False
++ [[ ubuntu20 == \r\h\e\l\8 ]]
++ [[ ubuntu20 == \c\e\n\t\o\s\8 ]]
+++ df / --output=fstype
+++ tail -n 1
++ FSTYPE=ext4
++ case ${FSTYPE} in
++ '[' '!' -d /opt/metal3-dev-env ']'
+ source /home/capm3/projects/metal3-dev-env/scripts/../lib/releases.sh
++ CAPM3RELEASEPATH=https://api.github.com/repos/metal3-io/cluster-api-provider-metal3/releases
++ CAPIRELEASEPATH=https://api.github.com/repos/kubernetes-sigs/cluster-api/releases
++ '[' v1alpha4 == v1alpha3 ']'
++ '[' v1alpha4 == v1alpha4 ']'
++ export CAPIRELEASE=v0.4.1
++ CAPIRELEASE=v0.4.1
++ '[' v1alpha5 == v1alpha4 ']'
++ '[' v1alpha5 == v1alpha5 ']'
++ export CAPM3RELEASE=v0.5.2
++ CAPM3RELEASE=v0.5.2
++ [[ v0.4.1 == '' ]]
++ [[ v0.5.2 == '' ]]
+ source /home/capm3/projects/metal3-dev-env/scripts/../lib/network.sh
++ export CLUSTER_PROVISIONING_INTERFACE=ironicendpoint
++ CLUSTER_PROVISIONING_INTERFACE=ironicendpoint
++ export POD_CIDR=192.168.0.0/18
++ POD_CIDR=192.168.0.0/18
++ PROVISIONING_IPV6=false
++ IPV6_ADDR_PREFIX=fd2e:6f44:5dd8:b856
++ [[ false == \t\r\u\e ]]
++ export BOOT_MODE=legacy
++ BOOT_MODE=legacy
++ export PROVISIONING_NETWORK=172.22.0.0/24
++ PROVISIONING_NETWORK=172.22.0.0/24
++ [[ legacy == \l\e\g\a\c\y ]]
++ export LIBVIRT_FIRMWARE=bios
++ LIBVIRT_FIRMWARE=bios
++ export LIBVIRT_SECURE_BOOT=false
++ LIBVIRT_SECURE_BOOT=false
++ prefixlen PROVISIONING_CIDR 172.22.0.0/24
++ resultvar=PROVISIONING_CIDR
++ network=172.22.0.0/24
+++ python -c 'import ipaddress; print(ipaddress.ip_network(u"172.22.0.0/24").prefixlen)'
++ result=24
++ eval PROVISIONING_CIDR=24
+++ PROVISIONING_CIDR=24
++ export PROVISIONING_CIDR
++ export PROVISIONING_CIDR
+++ python -c 'import ipaddress; print(ipaddress.ip_network(u"172.22.0.0/24").netmask)'
++ export PROVISIONING_NETMASK=255.255.255.0
++ PROVISIONING_NETMASK=255.255.255.0
++ network_address PROVISIONING_IP 172.22.0.0/24 1
++ resultvar=PROVISIONING_IP
++ network=172.22.0.0/24
++ record=1
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"172.22.0.0/24").hosts(), 1 - 1, None)))'
++ result=172.22.0.1
++ eval PROVISIONING_IP=172.22.0.1
+++ PROVISIONING_IP=172.22.0.1
++ export PROVISIONING_IP
++ network_address CLUSTER_PROVISIONING_IP 172.22.0.0/24 2
++ resultvar=CLUSTER_PROVISIONING_IP
++ network=172.22.0.0/24
++ record=2
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"172.22.0.0/24").hosts(), 2 - 1, None)))'
++ result=172.22.0.2
++ eval CLUSTER_PROVISIONING_IP=172.22.0.2
+++ CLUSTER_PROVISIONING_IP=172.22.0.2
++ export CLUSTER_PROVISIONING_IP
++ export PROVISIONING_IP
++ export CLUSTER_PROVISIONING_IP
++ [[ 172.22.0.1 == *\:* ]]
++ export PROVISIONING_URL_HOST=172.22.0.1
++ PROVISIONING_URL_HOST=172.22.0.1
++ export CLUSTER_URL_HOST=172.22.0.2
++ CLUSTER_URL_HOST=172.22.0.2
++ [[ 192.168.111.249 == *\:* ]]
++ export CLUSTER_APIENDPOINT_HOST=192.168.111.249
++ CLUSTER_APIENDPOINT_HOST=192.168.111.249
++ export CLUSTER_APIENDPOINT_PORT=6443
++ CLUSTER_APIENDPOINT_PORT=6443
++ network_address dhcp_range_start 172.22.0.0/24 10
++ resultvar=dhcp_range_start
++ network=172.22.0.0/24
++ record=10
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"172.22.0.0/24").hosts(), 10 - 1, None)))'
++ result=172.22.0.10
++ eval dhcp_range_start=172.22.0.10
+++ dhcp_range_start=172.22.0.10
++ export dhcp_range_start
++ network_address dhcp_range_end 172.22.0.0/24 100
++ resultvar=dhcp_range_end
++ network=172.22.0.0/24
++ record=100
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"172.22.0.0/24").hosts(), 100 - 1, None)))'
++ result=172.22.0.100
++ eval dhcp_range_end=172.22.0.100
+++ dhcp_range_end=172.22.0.100
++ export dhcp_range_end
++ network_address PROVISIONING_POOL_RANGE_START 172.22.0.0/24 100
++ resultvar=PROVISIONING_POOL_RANGE_START
++ network=172.22.0.0/24
++ record=100
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"172.22.0.0/24").hosts(), 100 - 1, None)))'
++ result=172.22.0.100
++ eval PROVISIONING_POOL_RANGE_START=172.22.0.100
+++ PROVISIONING_POOL_RANGE_START=172.22.0.100
++ export PROVISIONING_POOL_RANGE_START
++ network_address PROVISIONING_POOL_RANGE_END 172.22.0.0/24 200
++ resultvar=PROVISIONING_POOL_RANGE_END
++ network=172.22.0.0/24
++ record=200
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"172.22.0.0/24").hosts(), 200 - 1, None)))'
++ result=172.22.0.200
++ eval PROVISIONING_POOL_RANGE_END=172.22.0.200
+++ PROVISIONING_POOL_RANGE_END=172.22.0.200
++ export PROVISIONING_POOL_RANGE_END
++ export PROVISIONING_POOL_RANGE_START
++ export PROVISIONING_POOL_RANGE_END
++ export CLUSTER_DHCP_RANGE=172.22.0.10,172.22.0.100
++ CLUSTER_DHCP_RANGE=172.22.0.10,172.22.0.100
++ EXTERNAL_SUBNET=
++ [[ -n '' ]]
++ export IP_STACK=v4
++ IP_STACK=v4
++ [[ v4 == \v\4 ]]
++ export EXTERNAL_SUBNET_V4=192.168.111.0/24
++ EXTERNAL_SUBNET_V4=192.168.111.0/24
++ export EXTERNAL_SUBNET_V6=
++ EXTERNAL_SUBNET_V6=
++ [[ kind == \m\i\n\i\k\u\b\e ]]
++ [[ -n 192.168.111.0/24 ]]
++ prefixlen EXTERNAL_SUBNET_V4_PREFIX 192.168.111.0/24
++ resultvar=EXTERNAL_SUBNET_V4_PREFIX
++ network=192.168.111.0/24
+++ python -c 'import ipaddress; print(ipaddress.ip_network(u"192.168.111.0/24").prefixlen)'
++ result=24
++ eval EXTERNAL_SUBNET_V4_PREFIX=24
+++ EXTERNAL_SUBNET_V4_PREFIX=24
++ export EXTERNAL_SUBNET_V4_PREFIX
++ export EXTERNAL_SUBNET_V4_PREFIX
++ [[ -z '' ]]
++ network_address EXTERNAL_SUBNET_V4_HOST 192.168.111.0/24 1
++ resultvar=EXTERNAL_SUBNET_V4_HOST
++ network=192.168.111.0/24
++ record=1
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"192.168.111.0/24").hosts(), 1 - 1, None)))'
++ result=192.168.111.1
++ eval EXTERNAL_SUBNET_V4_HOST=192.168.111.1
+++ EXTERNAL_SUBNET_V4_HOST=192.168.111.1
++ export EXTERNAL_SUBNET_V4_HOST
++ network_address VIRSH_DHCP_V4_START 192.168.111.0/24 20
++ resultvar=VIRSH_DHCP_V4_START
++ network=192.168.111.0/24
++ record=20
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"192.168.111.0/24").hosts(), 20 - 1, None)))'
++ result=192.168.111.20
++ eval VIRSH_DHCP_V4_START=192.168.111.20
+++ VIRSH_DHCP_V4_START=192.168.111.20
++ export VIRSH_DHCP_V4_START
++ network_address VIRSH_DHCP_V4_END 192.168.111.0/24 60
++ resultvar=VIRSH_DHCP_V4_END
++ network=192.168.111.0/24
++ record=60
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"192.168.111.0/24").hosts(), 60 - 1, None)))'
++ result=192.168.111.60
++ eval VIRSH_DHCP_V4_END=192.168.111.60
+++ VIRSH_DHCP_V4_END=192.168.111.60
++ export VIRSH_DHCP_V4_END
++ network_address BAREMETALV4_POOL_RANGE_START 192.168.111.0/24 100
++ resultvar=BAREMETALV4_POOL_RANGE_START
++ network=192.168.111.0/24
++ record=100
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"192.168.111.0/24").hosts(), 100 - 1, None)))'
++ result=192.168.111.100
++ eval BAREMETALV4_POOL_RANGE_START=192.168.111.100
+++ BAREMETALV4_POOL_RANGE_START=192.168.111.100
++ export BAREMETALV4_POOL_RANGE_START
++ network_address BAREMETALV4_POOL_RANGE_END 192.168.111.0/24 200
++ resultvar=BAREMETALV4_POOL_RANGE_END
++ network=192.168.111.0/24
++ record=200
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"192.168.111.0/24").hosts(), 200 - 1, None)))'
++ result=192.168.111.200
++ eval BAREMETALV4_POOL_RANGE_END=192.168.111.200
+++ BAREMETALV4_POOL_RANGE_END=192.168.111.200
++ export BAREMETALV4_POOL_RANGE_END
++ export VIRSH_DHCP_V4_START
++ export VIRSH_DHCP_V4_END
++ export BAREMETALV4_POOL_RANGE_START
++ export BAREMETALV4_POOL_RANGE_END
++ [[ -n '' ]]
++ export EXTERNAL_SUBNET_V6_HOST=
++ EXTERNAL_SUBNET_V6_HOST=
++ export EXTERNAL_SUBNET_V6_PREFIX=
++ EXTERNAL_SUBNET_V6_PREFIX=
++ export BAREMETALV6_POOL_RANGE_START=
++ BAREMETALV6_POOL_RANGE_START=
++ export BAREMETALV6_POOL_RANGE_END=
++ BAREMETALV6_POOL_RANGE_END=
++ export REGISTRY_PORT=5000
++ REGISTRY_PORT=5000
++ export HTTP_PORT=6180
++ HTTP_PORT=6180
++ export IRONIC_INSPECTOR_PORT=5050
++ IRONIC_INSPECTOR_PORT=5050
++ export IRONIC_API_PORT=6385
++ IRONIC_API_PORT=6385
++ [[ -n 192.168.111.1 ]]
++ export REGISTRY=192.168.111.1:5000
++ REGISTRY=192.168.111.1:5000
++ network_address INITIAL_IRONICBRIDGE_IP 172.22.0.0/24 9
++ resultvar=INITIAL_IRONICBRIDGE_IP
++ network=172.22.0.0/24
++ record=9
+++ python -c 'import ipaddress; import itertools; print(next(itertools.islice(ipaddress.ip_network(u"172.22.0.0/24").hosts(), 9 - 1, None)))'
++ result=172.22.0.9
++ eval INITIAL_IRONICBRIDGE_IP=172.22.0.9
+++ INITIAL_IRONICBRIDGE_IP=172.22.0.9
++ export INITIAL_IRONICBRIDGE_IP
++ export DEPLOY_KERNEL_URL=http://172.22.0.2:6180/images/ironic-python-agent.kernel
++ DEPLOY_KERNEL_URL=http://172.22.0.2:6180/images/ironic-python-agent.kernel
++ export DEPLOY_RAMDISK_URL=http://172.22.0.2:6180/images/ironic-python-agent.initramfs
++ DEPLOY_RAMDISK_URL=http://172.22.0.2:6180/images/ironic-python-agent.initramfs
++ '[' true == true ']'
++ export IRONIC_URL=https://172.22.0.2:6385/v1/
++ IRONIC_URL=https://172.22.0.2:6385/v1/
++ export IRONIC_INSPECTOR_URL=https://172.22.0.2:5050/v1/
++ IRONIC_INSPECTOR_URL=https://172.22.0.2:5050/v1/
+ source /home/capm3/projects/metal3-dev-env/scripts/../lib/images.sh
++ IMAGE_OS=Ubuntu
++ [[ Ubuntu == \U\b\u\n\t\u ]]
++ export IMAGE_NAME=UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1.qcow2
++ IMAGE_NAME=UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1.qcow2
++ export IMAGE_LOCATION=https://artifactory.nordix.org/artifactory/airship/images/k8s_v1.21.1/
++ IMAGE_LOCATION=https://artifactory.nordix.org/artifactory/airship/images/k8s_v1.21.1/
++ export IMAGE_URL=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1.qcow2
++ IMAGE_URL=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1.qcow2
++ export IMAGE_CHECKSUM=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1.qcow2.md5sum
++ IMAGE_CHECKSUM=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1.qcow2.md5sum
++ export IMAGE_USERNAME=metal3
++ IMAGE_USERNAME=metal3
++ IMAGE_BASE_NAME=UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1
++ export IMAGE_RAW_NAME=UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img
++ IMAGE_RAW_NAME=UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img
++ export IMAGE_RAW_URL=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img
++ IMAGE_RAW_URL=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img
++ export IMAGE_RAW_CHECKSUM=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum
++ IMAGE_RAW_CHECKSUM=http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum
+ source /home/capm3/projects/metal3-dev-env/scripts/../lib/ironic_tls_setup.sh
++ '[' true == true ']'
++ pushd /opt/metal3-dev-env
/opt/metal3-dev-env ~/projects/metal3-dev-env/scripts/feature_tests/upgrade
++ mkdir -p /opt/metal3-dev-env/certs
++ pushd /opt/metal3-dev-env/certs
/opt/metal3-dev-env/certs /opt/metal3-dev-env ~/projects/metal3-dev-env/scripts/feature_tests/upgrade
++ export IRONIC_BASE_URL=https://172.22.0.2
++ IRONIC_BASE_URL=https://172.22.0.2
++ export IRONIC_CACERT_FILE=/opt/metal3-dev-env/certs/ironic-ca.pem
++ IRONIC_CACERT_FILE=/opt/metal3-dev-env/certs/ironic-ca.pem
++ export IRONIC_CAKEY_FILE=/opt/metal3-dev-env/certs/ironic-ca.key
++ IRONIC_CAKEY_FILE=/opt/metal3-dev-env/certs/ironic-ca.key
++ export IRONIC_CERT_FILE=/opt/metal3-dev-env/certs/ironic.crt
++ IRONIC_CERT_FILE=/opt/metal3-dev-env/certs/ironic.crt
++ export IRONIC_KEY_FILE=/opt/metal3-dev-env/certs/ironic.key
++ IRONIC_KEY_FILE=/opt/metal3-dev-env/certs/ironic.key
++ export IRONIC_INSPECTOR_CACERT_FILE=/opt/metal3-dev-env/certs/ironic-ca.pem
++ IRONIC_INSPECTOR_CACERT_FILE=/opt/metal3-dev-env/certs/ironic-ca.pem
++ export IRONIC_INSPECTOR_CAKEY_FILE=/opt/metal3-dev-env/certs/ironic-ca.key
++ IRONIC_INSPECTOR_CAKEY_FILE=/opt/metal3-dev-env/certs/ironic-ca.key
++ export IRONIC_INSPECTOR_CERT_FILE=/opt/metal3-dev-env/certs/ironic-inspector.crt
++ IRONIC_INSPECTOR_CERT_FILE=/opt/metal3-dev-env/certs/ironic-inspector.crt
++ export IRONIC_INSPECTOR_KEY_FILE=/opt/metal3-dev-env/certs/ironic-inspector.key
++ IRONIC_INSPECTOR_KEY_FILE=/opt/metal3-dev-env/certs/ironic-inspector.key
++ export MARIADB_CACERT_FILE=/opt/metal3-dev-env/certs/ironic-ca.pem
++ MARIADB_CACERT_FILE=/opt/metal3-dev-env/certs/ironic-ca.pem
++ export MARIADB_CAKEY_FILE=/opt/metal3-dev-env/certs/ironic-ca.key
++ MARIADB_CAKEY_FILE=/opt/metal3-dev-env/certs/ironic-ca.key
++ export MARIADB_CERT_FILE=/opt/metal3-dev-env/certs/mariadb.crt
++ MARIADB_CERT_FILE=/opt/metal3-dev-env/certs/mariadb.crt
++ export MARIADB_KEY_FILE=/opt/metal3-dev-env/certs/mariadb.key
++ MARIADB_KEY_FILE=/opt/metal3-dev-env/certs/mariadb.key
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-ca.key ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-ca.key ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-ca.key ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-ca.pem ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-ca.pem ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-ca.pem ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic.key ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-inspector.key ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/mariadb.key ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic.crt ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/ironic-inspector.crt ']'
++ '[' '!' -f /opt/metal3-dev-env/certs/mariadb.crt ']'
++ '[' /opt/metal3-dev-env/certs/ironic-ca.pem == /opt/metal3-dev-env/certs/ironic-ca.pem ']'
+++ base64 -w 0
++ IRONIC_CA_CERT_B64=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDVENDQWZHZ0F3SUJBZ0lVT3VuNm5LYy9vS29sc0FyVXQ0RWJNMXNMWkM4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZERVNNQkFHQTFVRUF3d0phWEp2Ym1saklFTkJNQjRYRFRJeE1URXdPVEUyTXpFME5sb1hEVEkyTVRFdwpPREUyTXpFME5sb3dGREVTTUJBR0ExVUVBd3dKYVhKdmJtbGpJRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBblJQdFNlT0VnSnZGN05oS2k2U0Z0bkFkelhJM0ZLckZmTjhzdkpCR0FqYU0KS2xxeUhvY1haUmFLWiswM1NXWDBzOHBlYkpKZFQxUUpZRURCbEY1MnlNeEt1TTZ6elZocmNiTU5mWExmbE1YbwpYekhFVGdRZmVvRXRPL1RLWWlyTWQ0WmU2a0VvSGI5Yk9EWk9XRUoweWJSQUgzNFdOdjRvV2s5TkdWenlFN012ClRqVWcrZ0lzdWdQbGhTeXc3L3lzL1hoeEtnYXN0UXRjZnZ2clBBY0hsd3YrT3UyMkVFZk5sbGprNDQzU2gzMGkKSzR6ZCtZRW02ZnBFdDI3SFEybXhqL2hlWWcxQW9rTC8xcVNaaGlkWnM0cU03R3Z6WVRZc3ZLZ3haYXNUR2NuSAp3Ylc5WmpFNk40Y1piTVFIM1dmbnRqcWk0VmJSbmRmM3JTRHQ2RFlJOVFJREFRQUJvMU13VVRBZEJnTlZIUTRFCkZnUVVRQnpRM2FHK3h6Sm5tK0FjV2wrbTZyVlRXbll3SHdZRFZSMGpCQmd3Rm9BVVFCelEzYUcreHpKbm0rQWMKV2wrbTZyVlRXbll3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBSjZzVgpGV3VpT3lMUzNTWnBrak00YWJmMmI0blZIalI0UllsZWZITjd1SUpMUnQwSFdJWmNDbThmOVJkMitodUhkTTh1Cm5QRVcxQWFPZkFiNFVqRWM1WHhmN3UrbGdvSHBiSy9jQURJWTBsQ09pK2Q0MHM3VDNCRFJhakNXVHl2NlBuYkMKTXRKV2FDWkhFcElGdGtqbmZ3MFNHOEdOaTBsbWRyVmFPdmo4NmpRUVlRVEFsWk96ek8yZ3p6TjJCdVVLZ0hUZApOWlZ3a29jWkVwVS9tT1ZKZ2l2YnJBeFpLcmVYUXN4dWFWbys3eXNwR2lyKzF2dklOc29pNlRsV1d5Syt0ZVlrCitNODg0VStUQ2lJRE5EbTI1T09scWhPYlVScW5HWUpmdXBNSlREbGpLNDhJZytodk55a05EdGQ1RFczWGVpUkIKWjZiQURWc2pOelZVNm83YmhRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
++ export IRONIC_CA_CERT_B64
++ popd
/opt/metal3-dev-env ~/projects/metal3-dev-env/scripts/feature_tests/upgrade
++ popd
~/projects/metal3-dev-env/scripts/feature_tests/upgrade
++ unset IRONIC_NO_CA_CERT
+ source /home/capm3/projects/metal3-dev-env/scripts/../lib/ironic_basic_auth.sh
++ '[' true == true ']'
++ IRONIC_AUTH_DIR=/opt/metal3-dev-env/ironic/auth/
++ mkdir -p /opt/metal3-dev-env/ironic/auth/
++ '[' -z '' ']'
++ '[' '!' -f /opt/metal3-dev-env/ironic/auth/ironic-username ']'
+++ cat /opt/metal3-dev-env/ironic/auth/ironic-username
++ IRONIC_USERNAME=beEjrgcnZkhE
++ '[' -z '' ']'
++ '[' '!' -f /opt/metal3-dev-env/ironic/auth/ironic-password ']'
+++ cat /opt/metal3-dev-env/ironic/auth/ironic-password
++ IRONIC_PASSWORD=mT7bb6QxcdIT
++ IRONIC_INSPECTOR_USERNAME=beEjrgcnZkhE
++ IRONIC_INSPECTOR_PASSWORD=mT7bb6QxcdIT
++ export IRONIC_USERNAME
++ export IRONIC_PASSWORD
++ export IRONIC_INSPECTOR_USERNAME
++ export IRONIC_INSPECTOR_PASSWORD
++ unset IRONIC_NO_BASIC_AUTH
++ unset IRONIC_INSPECTOR_NO_BASIC_AUTH
+ export ANSIBLE_HOST_KEY_CHECKING=False
+ ANSIBLE_HOST_KEY_CHECKING=False
+ export ANSIBLE_CONFIG=/home/capm3/projects/metal3-dev-env/scripts/../ansible.cfg
+ ANSIBLE_CONFIG=/home/capm3/projects/metal3-dev-env/scripts/../ansible.cfg
+ ANSIBLE_FORCE_COLOR=true
+ ansible-playbook -e metal3_dir=/home/capm3/projects/metal3-dev-env -e v1aX_integration_test_action=upgrading -i /home/capm3/projects/metal3-dev-env/scripts/../vm-setup/inventory.ini -b -v /home/capm3/projects/metal3-dev-env/scripts/../vm-setup/v1aX_integration_test.yml
[0;34mUsing /home/capm3/projects/metal3-dev-env/ansible.cfg as config file[0m
[0;35m[DEPRECATION WARNING]: [defaults]callback_whitelist option, normalizing names [0m
[0;35mto new standard, use callbacks_enabled instead. This feature will be removed [0m
[0;35mfrom ansible-core in version 2.15. Deprecation warnings can be disabled by [0m
[0;35msetting deprecation_warnings=False in ansible.cfg.[0m
[1;35m[WARNING]: Skipping plugin (/home/capm3/projects/metal3-dev-env/vm-[0m
[1;35msetup/roles/v1aX_integration_test/filter_plugins/k8s_fields_test.py) as it[0m
[1;35mseems to be invalid: No module named 'k8s_fields'[0m

PLAY [v1alpha5 integration test] ***********************************************
Wednesday 10 November 2021  18:46:07 +0000 (0:00:00.037)       0:00:00.037 **** 

TASK [Gathering Facts] *********************************************************
[0;32mok: [localhost][0m
Wednesday 10 November 2021  18:46:09 +0000 (0:00:01.456)       0:00:01.494 **** 

TASK [v1aX_integration_test : Generate templates] ******************************
[0;36mincluded: /home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/tasks/generate_templates.yml for localhost[0m
Wednesday 10 November 2021  18:46:09 +0000 (0:00:00.076)       0:00:01.570 **** 

TASK [v1aX_integration_test : Get BMH facts] ***********************************
[0;32mok: [localhost] => {"api_found": true, "changed": false, "resources": [{"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-0\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"ipmi://192.168.111.1:6230\",\"credentialsName\":\"node-0-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:42\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"9dbec15f-bfd5-4373-ae81-96822021daf7\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:41:42Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:48:17Z"}], "name": "node-0", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-controlplane-42wj6", "uid": "9dbec15f-bfd5-4373-ae81-96822021daf7"}], "resourceVersion": "14095", "uid": "0a41f459-3dd4-428f-8b71-1f8ce6e218c0"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "ipmi://192.168.111.1:6230", "credentialsName": "node-0-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:42", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-42wj6", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-controlplane-42wj6-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-controlplane-42wj6-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-w6ntq", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-0-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "12999"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-0", "nics": [{"ip": "192.168.111.20", "mac": "00:4a:e3:eb:f8:44", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::4759:40e9:3ace:820c%enp2s0", "mac": "00:4a:e3:eb:f8:44", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "172.22.0.67", "mac": "00:4a:e3:eb:f8:42", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::370:db5e:5d36:1385%enp1s0", "mac": "00:4a:e3:eb:f8:42", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:48:17Z", "operationHistory": {"deprovision": {"end": null, "start": null}, "inspect": {"end": "2021-11-10T15:58:39Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:48:17Z", "start": "2021-11-10T16:41:43Z"}, "register": {"end": "2021-11-10T16:41:43Z", "start": "2021-11-10T16:41:42Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "dd8afd36-42cb-435d-889b-eef745d34fff", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-0-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "12999"}}}, {"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-1\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"redfish+http://192.168.111.1:8000/redfish/v1/Systems/5414b5e7-bae3-4f7e-8e59-cf44f009a7a1\",\"credentialsName\":\"node-1-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:46\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"e42d05a1-4860-44fc-b495-7567aba97ed1\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:02:26Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:19:02Z"}], "name": "node-1", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-controlplane-9z8sd", "uid": "e42d05a1-4860-44fc-b495-7567aba97ed1"}], "resourceVersion": "8004", "uid": "44016cf3-4182-4fb6-9325-3c76d7ac4c45"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "redfish+http://192.168.111.1:8000/redfish/v1/Systems/5414b5e7-bae3-4f7e-8e59-cf44f009a7a1", "credentialsName": "node-1-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:46", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-9z8sd", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-controlplane-9z8sd-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-controlplane-9z8sd-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-86wzb", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-1-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "4784"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-1", "nics": [{"ip": "172.22.0.71", "mac": "00:4a:e3:eb:f8:46", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::7ea5:8770:bf6c:a746%enp1s0", "mac": "00:4a:e3:eb:f8:46", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "192.168.111.21", "mac": "00:4a:e3:eb:f8:48", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::6797:d34:31c5:8f05%enp2s0", "mac": "00:4a:e3:eb:f8:48", "model": "0x1af4 0x0001", "name": "enp2s0"}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:19:02Z", "operationHistory": {"deprovision": {"end": "2021-11-10T16:15:31Z", "start": "2021-11-10T16:14:10Z"}, "inspect": {"end": "2021-11-10T15:58:38Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:19:02Z", "start": "2021-11-10T16:15:32Z"}, "register": {"end": "2021-11-10T16:02:27Z", "start": "2021-11-10T16:02:26Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "cac5fa5f-7eae-4f70-8cbe-672834a26ca0", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-1-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "4784"}}}, {"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-2\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"ipmi://192.168.111.1:6232\",\"credentialsName\":\"node-2-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:4a\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"191e4d98-6281-4156-ab55-015e2161d3f7\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:50:44Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:54:56Z"}], "name": "node-2", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-workers-xb9ks", "uid": "191e4d98-6281-4156-ab55-015e2161d3f7"}], "resourceVersion": "15508", "uid": "d367f112-8bbc-41f2-9f53-9dd493bbe9b8"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "ipmi://192.168.111.1:6232", "credentialsName": "node-2-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:4a", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-workers-xb9ks", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-workers-xb9ks-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-workers-xb9ks-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-workers-xcrc8", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-2-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "14934"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-2", "nics": [{"ip": "172.22.0.75", "mac": "00:4a:e3:eb:f8:4a", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::72e9:a34d:2642:ca46%enp1s0", "mac": "00:4a:e3:eb:f8:4a", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "192.168.111.22", "mac": "00:4a:e3:eb:f8:4c", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::7d6a:52da:c2d1:79ea%enp2s0", "mac": "00:4a:e3:eb:f8:4c", "model": "0x1af4 0x0001", "name": "enp2s0"}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:54:56Z", "operationHistory": {"deprovision": {"end": null, "start": null}, "inspect": {"end": "2021-11-10T15:58:39Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:54:56Z", "start": "2021-11-10T16:50:44Z"}, "register": {"end": "2021-11-10T16:50:44Z", "start": "2021-11-10T16:50:44Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "08c01e5d-b46e-49d0-a478-f790a9b9628a", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-2-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "14934"}}}, {"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-3\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"redfish+http://192.168.111.1:8000/redfish/v1/Systems/88c87873-8426-41bd-b43a-934c4041474b\",\"credentialsName\":\"node-3-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:4e\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"c22cdded-d5e2-4c90-a998-20b230c8c580\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:20:27Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:38:11Z"}], "name": "node-3", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-controlplane-st75s", "uid": "c22cdded-d5e2-4c90-a998-20b230c8c580"}], "resourceVersion": "11981", "uid": "ea568c6d-2491-4ffa-909b-f57ce0cb407c"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "redfish+http://192.168.111.1:8000/redfish/v1/Systems/88c87873-8426-41bd-b43a-934c4041474b", "credentialsName": "node-3-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:4e", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-st75s", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-controlplane-st75s-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-controlplane-st75s-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-tz8qx", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-3-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "8402"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-3", "nics": [{"ip": "192.168.111.23", "mac": "00:4a:e3:eb:f8:50", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::574b:d072:30b:524b%enp2s0", "mac": "00:4a:e3:eb:f8:50", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "172.22.0.79", "mac": "00:4a:e3:eb:f8:4e", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::bd73:acea:cfd1:da79%enp1s0", "mac": "00:4a:e3:eb:f8:4e", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:38:11Z", "operationHistory": {"deprovision": {"end": "2021-11-10T16:32:19Z", "start": "2021-11-10T16:30:57Z"}, "inspect": {"end": "2021-11-10T15:58:38Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:38:11Z", "start": "2021-11-10T16:32:19Z"}, "register": {"end": "2021-11-10T16:20:27Z", "start": "2021-11-10T16:20:27Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "2fa3356e-4f9a-46b3-b4fd-792df6fa5c74", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-3-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "8402"}}}]}[0m
Wednesday 10 November 2021  18:46:10 +0000 (0:00:00.885)       0:00:02.456 **** 

TASK [v1aX_integration_test : Set fact for NIC names for the first BMH found] ***
[0;32mok: [localhost] => {"ansible_facts": {"bmh_nic_names": ["enp1s0", "enp2s0"]}, "changed": false}[0m
Wednesday 10 November 2021  18:46:10 +0000 (0:00:00.068)       0:00:02.524 **** 

TASK [v1aX_integration_test : Create a temporary manifest directory if it does not exist] ***
[0;32mok: [localhost] => {"changed": false, "gid": 1000, "group": "capm3", "mode": "0755", "owner": "capm3", "path": "/home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/files/manifests", "size": 4096, "state": "directory", "uid": 1000}[0m
Wednesday 10 November 2021  18:46:10 +0000 (0:00:00.413)       0:00:02.938 **** 

TASK [v1aX_integration_test : Deploy clusterctl variables to clusterctl config] ***
[0;32mok: [localhost] => {"changed": false, "checksum": "5567578392c7f59ce1d211bc7065528d40f6f6d8", "dest": "/home/capm3/.cluster-api/clusterctl.yaml", "gid": 1000, "group": "capm3", "mode": "0664", "owner": "capm3", "path": "/home/capm3/.cluster-api/clusterctl.yaml", "size": 867, "state": "file", "uid": 1000}[0m
Wednesday 10 November 2021  18:46:11 +0000 (0:00:00.723)       0:00:03.661 **** 

TASK [v1aX_integration_test : Generate clusterctl cluster template] ************
[0;32mok: [localhost] => (item=cluster) => {"ansible_loop_var": "item", "changed": false, "checksum": "ea6c9b080a8d37e9747980d9c9396adb0eb5ebc1", "dest": "/home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-cluster.yaml", "gid": 1000, "group": "capm3", "item": "cluster", "mode": "0664", "owner": "capm3", "path": "/home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-cluster.yaml", "size": 1472, "state": "file", "uid": 1000}[0m
[0;32mok: [localhost] => (item=controlplane) => {"ansible_loop_var": "item", "changed": false, "checksum": "fad2bc8dac61883fcc37e34596a75d23ba12c2f7", "dest": "/home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-controlplane.yaml", "gid": 1000, "group": "capm3", "item": "controlplane", "mode": "0664", "owner": "capm3", "path": "/home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-controlplane.yaml", "size": 7283, "state": "file", "uid": 1000}[0m
[0;32mok: [localhost] => (item=workers) => {"ansible_loop_var": "item", "changed": false, "checksum": "43a64fb099c78f74c78e1335ba7309784b325055", "dest": "/home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-workers.yaml", "gid": 1000, "group": "capm3", "item": "workers", "mode": "0664", "owner": "capm3", "path": "/home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-workers.yaml", "size": 4737, "state": "file", "uid": 1000}[0m
Wednesday 10 November 2021  18:46:12 +0000 (0:00:01.626)       0:00:05.288 **** 

TASK [v1aX_integration_test : Generate templates] ******************************
[0;33mchanged: [localhost] => (item=cluster) => {"ansible_loop_var": "item", "changed": true, "cmd": "clusterctl config cluster test1 --from /home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-cluster.yaml --kubernetes-version v1.21.1 --control-plane-machine-count=3 --worker-machine-count=1 --target-namespace=metal3 > /home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/files/manifests/v1alpha5_cluster_ubuntu.yaml\n", "delta": "0:00:00.041282", "end": "2021-11-10 18:46:13.281363", "item": "cluster", "msg": "", "rc": 0, "start": "2021-11-10 18:46:13.240081", "stderr": "Command \"cluster\" is deprecated, use `clusterctl generate cluster` instead", "stderr_lines": ["Command \"cluster\" is deprecated, use `clusterctl generate cluster` instead"], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=controlplane) => {"ansible_loop_var": "item", "changed": true, "cmd": "clusterctl config cluster test1 --from /home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-controlplane.yaml --kubernetes-version v1.21.1 --control-plane-machine-count=3 --worker-machine-count=1 --target-namespace=metal3 > /home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/files/manifests/v1alpha5_controlplane_ubuntu.yaml\n", "delta": "0:00:00.041785", "end": "2021-11-10 18:46:13.536536", "item": "controlplane", "msg": "", "rc": 0, "start": "2021-11-10 18:46:13.494751", "stderr": "Command \"cluster\" is deprecated, use `clusterctl generate cluster` instead", "stderr_lines": ["Command \"cluster\" is deprecated, use `clusterctl generate cluster` instead"], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=workers) => {"ansible_loop_var": "item", "changed": true, "cmd": "clusterctl config cluster test1 --from /home/capm3/.cluster-api/overrides/infrastructure-metal3/v0.5.2/cluster-template-workers.yaml --kubernetes-version v1.21.1 --control-plane-machine-count=3 --worker-machine-count=1 --target-namespace=metal3 > /home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/files/manifests/v1alpha5_workers_ubuntu.yaml\n", "delta": "0:00:00.040980", "end": "2021-11-10 18:46:13.793765", "item": "workers", "msg": "", "rc": 0, "start": "2021-11-10 18:46:13.752785", "stderr": "Command \"cluster\" is deprecated, use `clusterctl generate cluster` instead", "stderr_lines": ["Command \"cluster\" is deprecated, use `clusterctl generate cluster` instead"], "stdout": "", "stdout_lines": []}[0m
Wednesday 10 November 2021  18:46:13 +0000 (0:00:00.943)       0:00:06.231 **** 
Wednesday 10 November 2021  18:46:13 +0000 (0:00:00.051)       0:00:06.283 **** 
Wednesday 10 November 2021  18:46:13 +0000 (0:00:00.050)       0:00:06.333 **** 

TASK [v1aX_integration_test : Provision cluster] *******************************
[0;32mok: [localhost] => {"changed": false, "cmd": "kubectl apply -f \"/home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/files/manifests/v1alpha5_cluster_ubuntu.yaml\" -n \"metal3\"", "delta": "0:00:00.324620", "end": "2021-11-10 18:46:14.492156", "msg": "", "rc": 0, "start": "2021-11-10 18:46:14.167536", "stderr": "", "stderr_lines": [], "stdout": "cluster.cluster.x-k8s.io/test1 unchanged\nmetal3cluster.infrastructure.cluster.x-k8s.io/test1 unchanged\nippool.ipam.metal3.io/provisioning-pool unchanged\nippool.ipam.metal3.io/baremetalv4-pool unchanged", "stdout_lines": ["cluster.cluster.x-k8s.io/test1 unchanged", "metal3cluster.infrastructure.cluster.x-k8s.io/test1 unchanged", "ippool.ipam.metal3.io/provisioning-pool unchanged", "ippool.ipam.metal3.io/baremetalv4-pool unchanged"]}[0m
Wednesday 10 November 2021  18:46:14 +0000 (0:00:00.593)       0:00:06.927 **** 

TASK [v1aX_integration_test : Create control plane] ****************************
[0;33mchanged: [localhost] => {"changed": true, "cmd": "kubectl apply -f \"/home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/files/manifests/v1alpha5_controlplane_ubuntu.yaml\" -n \"metal3\"", "delta": "0:00:00.384690", "end": "2021-11-10 18:46:15.149032", "msg": "", "rc": 0, "start": "2021-11-10 18:46:14.764342", "stderr": "", "stderr_lines": [], "stdout": "kubeadmcontrolplane.controlplane.cluster.x-k8s.io/test1 configured\nmetal3machinetemplate.infrastructure.cluster.x-k8s.io/test1-controlplane unchanged\nmetal3datatemplate.infrastructure.cluster.x-k8s.io/test1-controlplane-template configured", "stdout_lines": ["kubeadmcontrolplane.controlplane.cluster.x-k8s.io/test1 configured", "metal3machinetemplate.infrastructure.cluster.x-k8s.io/test1-controlplane unchanged", "metal3datatemplate.infrastructure.cluster.x-k8s.io/test1-controlplane-template configured"]}[0m
Wednesday 10 November 2021  18:46:15 +0000 (0:00:00.653)       0:00:07.581 **** 

TASK [v1aX_integration_test : Create worker nodes] *****************************
[0;33mchanged: [localhost] => {"changed": true, "cmd": "kubectl apply -f \"/home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/files/manifests/v1alpha5_workers_ubuntu.yaml\" -n \"metal3\"", "delta": "0:00:00.346838", "end": "2021-11-10 18:46:15.763799", "msg": "", "rc": 0, "start": "2021-11-10 18:46:15.416961", "stderr": "", "stderr_lines": [], "stdout": "machinedeployment.cluster.x-k8s.io/test1 unchanged\nmetal3machinetemplate.infrastructure.cluster.x-k8s.io/test1-workers unchanged\nmetal3datatemplate.infrastructure.cluster.x-k8s.io/test1-workers-template configured\nkubeadmconfigtemplate.bootstrap.cluster.x-k8s.io/test1-workers unchanged", "stdout_lines": ["machinedeployment.cluster.x-k8s.io/test1 unchanged", "metal3machinetemplate.infrastructure.cluster.x-k8s.io/test1-workers unchanged", "metal3datatemplate.infrastructure.cluster.x-k8s.io/test1-workers-template configured", "kubeadmconfigtemplate.bootstrap.cluster.x-k8s.io/test1-workers unchanged"]}[0m
Wednesday 10 November 2021  18:46:15 +0000 (0:00:00.618)       0:00:08.199 **** 

TASK [v1aX_integration_test : verify deployment] *******************************
[0;36mincluded: /home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/tasks/verify.yml for localhost[0m
Wednesday 10 November 2021  18:46:15 +0000 (0:00:00.087)       0:00:08.287 **** 

TASK [v1aX_integration_test : Define number of BMH's] **************************
[0;32mok: [localhost] => {"ansible_facts": {"NUMBER_OF_BMH": "4"}, "changed": false}[0m
Wednesday 10 November 2021  18:46:15 +0000 (0:00:00.064)       0:00:08.352 **** 

TASK [v1aX_integration_test : Wait until cluster becomes provisioned.] *********
[0;32mok: [localhost] => {"api_found": true, "attempts": 1, "changed": false, "resources": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "kind": "Cluster", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"cluster.x-k8s.io/v1alpha4\",\"kind\":\"Cluster\",\"metadata\":{\"annotations\":{},\"name\":\"test1\",\"namespace\":\"metal3\"},\"spec\":{\"clusterNetwork\":{\"pods\":{\"cidrBlocks\":[\"192.168.0.0/18\"]},\"services\":{\"cidrBlocks\":[\"10.96.0.0/12\"]}},\"controlPlaneRef\":{\"apiVersion\":\"controlplane.cluster.x-k8s.io/v1alpha4\",\"kind\":\"KubeadmControlPlane\",\"name\":\"test1\"},\"infrastructureRef\":{\"apiVersion\":\"infrastructure.cluster.x-k8s.io/v1alpha5\",\"kind\":\"Metal3Cluster\",\"name\":\"test1\"}}}\n"}, "creationTimestamp": "2021-11-10T15:59:24Z", "finalizers": ["cluster.cluster.x-k8s.io"], "generation": 2, "managedFields": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:clusterNetwork": {".": {}, "f:pods": {".": {}, "f:cidrBlocks": {}}, "f:services": {".": {}, "f:cidrBlocks": {}}}, "f:controlPlaneRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}}, "f:infrastructureRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:59:24Z"}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T15:59:24Z"}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:conditions": {}, "f:infrastructureReady": {}, "f:observedGeneration": {}, "f:phase": {}}}, "manager": "manager", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:02:24Z"}], "name": "test1", "namespace": "metal3", "resourceVersion": "14114", "uid": "60d86cfe-ef1c-4788-bc7f-ba930704a2f4"}, "spec": {"clusterNetwork": {"pods": {"cidrBlocks": ["192.168.0.0/18"]}, "services": {"cidrBlocks": ["10.96.0.0/12"]}}, "controlPlaneEndpoint": {"host": "192.168.111.249", "port": 6443}, "controlPlaneRef": {"apiVersion": "controlplane.cluster.x-k8s.io/v1alpha4", "kind": "KubeadmControlPlane", "name": "test1", "namespace": "metal3"}, "infrastructureRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Cluster", "name": "test1", "namespace": "metal3"}}, "status": {"conditions": [{"lastTransitionTime": "2021-11-10T16:48:18Z", "status": "True", "type": "Ready"}, {"lastTransitionTime": "2021-11-10T16:19:59Z", "status": "True", "type": "ControlPlaneInitialized"}, {"lastTransitionTime": "2021-11-10T16:48:18Z", "status": "True", "type": "ControlPlaneReady"}, {"lastTransitionTime": "2021-11-10T15:59:24Z", "status": "True", "type": "InfrastructureReady"}], "infrastructureReady": true, "observedGeneration": 2, "phase": "Provisioned"}}]}[0m
Wednesday 10 November 2021  18:46:16 +0000 (0:00:00.712)       0:00:09.065 **** 

TASK [v1aX_integration_test : Wait until "4" BMHs become provisioned.] *********
[0;32mok: [localhost] => {"api_found": true, "attempts": 1, "changed": false, "resources": [{"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-0\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"ipmi://192.168.111.1:6230\",\"credentialsName\":\"node-0-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:42\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"9dbec15f-bfd5-4373-ae81-96822021daf7\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:41:42Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:48:17Z"}], "name": "node-0", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-controlplane-42wj6", "uid": "9dbec15f-bfd5-4373-ae81-96822021daf7"}], "resourceVersion": "14095", "uid": "0a41f459-3dd4-428f-8b71-1f8ce6e218c0"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "ipmi://192.168.111.1:6230", "credentialsName": "node-0-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:42", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-42wj6", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-controlplane-42wj6-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-controlplane-42wj6-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-w6ntq", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-0-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "12999"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-0", "nics": [{"ip": "192.168.111.20", "mac": "00:4a:e3:eb:f8:44", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::4759:40e9:3ace:820c%enp2s0", "mac": "00:4a:e3:eb:f8:44", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "172.22.0.67", "mac": "00:4a:e3:eb:f8:42", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::370:db5e:5d36:1385%enp1s0", "mac": "00:4a:e3:eb:f8:42", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:48:17Z", "operationHistory": {"deprovision": {"end": null, "start": null}, "inspect": {"end": "2021-11-10T15:58:39Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:48:17Z", "start": "2021-11-10T16:41:43Z"}, "register": {"end": "2021-11-10T16:41:43Z", "start": "2021-11-10T16:41:42Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "dd8afd36-42cb-435d-889b-eef745d34fff", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-0-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "12999"}}}, {"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-1\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"redfish+http://192.168.111.1:8000/redfish/v1/Systems/5414b5e7-bae3-4f7e-8e59-cf44f009a7a1\",\"credentialsName\":\"node-1-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:46\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"e42d05a1-4860-44fc-b495-7567aba97ed1\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:02:26Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:19:02Z"}], "name": "node-1", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-controlplane-9z8sd", "uid": "e42d05a1-4860-44fc-b495-7567aba97ed1"}], "resourceVersion": "8004", "uid": "44016cf3-4182-4fb6-9325-3c76d7ac4c45"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "redfish+http://192.168.111.1:8000/redfish/v1/Systems/5414b5e7-bae3-4f7e-8e59-cf44f009a7a1", "credentialsName": "node-1-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:46", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-9z8sd", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-controlplane-9z8sd-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-controlplane-9z8sd-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-86wzb", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-1-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "4784"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-1", "nics": [{"ip": "172.22.0.71", "mac": "00:4a:e3:eb:f8:46", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::7ea5:8770:bf6c:a746%enp1s0", "mac": "00:4a:e3:eb:f8:46", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "192.168.111.21", "mac": "00:4a:e3:eb:f8:48", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::6797:d34:31c5:8f05%enp2s0", "mac": "00:4a:e3:eb:f8:48", "model": "0x1af4 0x0001", "name": "enp2s0"}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:19:02Z", "operationHistory": {"deprovision": {"end": "2021-11-10T16:15:31Z", "start": "2021-11-10T16:14:10Z"}, "inspect": {"end": "2021-11-10T15:58:38Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:19:02Z", "start": "2021-11-10T16:15:32Z"}, "register": {"end": "2021-11-10T16:02:27Z", "start": "2021-11-10T16:02:26Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "cac5fa5f-7eae-4f70-8cbe-672834a26ca0", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-1-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "4784"}}}, {"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-2\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"ipmi://192.168.111.1:6232\",\"credentialsName\":\"node-2-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:4a\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"191e4d98-6281-4156-ab55-015e2161d3f7\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:50:44Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:54:56Z"}], "name": "node-2", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-workers-xb9ks", "uid": "191e4d98-6281-4156-ab55-015e2161d3f7"}], "resourceVersion": "15508", "uid": "d367f112-8bbc-41f2-9f53-9dd493bbe9b8"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "ipmi://192.168.111.1:6232", "credentialsName": "node-2-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:4a", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-workers-xb9ks", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-workers-xb9ks-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-workers-xb9ks-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-workers-xcrc8", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-2-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "14934"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-2", "nics": [{"ip": "172.22.0.75", "mac": "00:4a:e3:eb:f8:4a", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::72e9:a34d:2642:ca46%enp1s0", "mac": "00:4a:e3:eb:f8:4a", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "192.168.111.22", "mac": "00:4a:e3:eb:f8:4c", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::7d6a:52da:c2d1:79ea%enp2s0", "mac": "00:4a:e3:eb:f8:4c", "model": "0x1af4 0x0001", "name": "enp2s0"}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:54:56Z", "operationHistory": {"deprovision": {"end": null, "start": null}, "inspect": {"end": "2021-11-10T15:58:39Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:54:56Z", "start": "2021-11-10T16:50:44Z"}, "register": {"end": "2021-11-10T16:50:44Z", "start": "2021-11-10T16:50:44Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "08c01e5d-b46e-49d0-a478-f790a9b9628a", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-2-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "14934"}}}, {"apiVersion": "metal3.io/v1alpha1", "kind": "BareMetalHost", "metadata": {"annotations": {"kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"metal3.io/v1alpha1\",\"kind\":\"BareMetalHost\",\"metadata\":{\"annotations\":{},\"name\":\"node-3\",\"namespace\":\"metal3\"},\"spec\":{\"bmc\":{\"address\":\"redfish+http://192.168.111.1:8000/redfish/v1/Systems/88c87873-8426-41bd-b43a-934c4041474b\",\"credentialsName\":\"node-3-bmc-secret\"},\"bootMACAddress\":\"00:4a:e3:eb:f8:4e\",\"bootMode\":\"legacy\",\"online\":true}}\n"}, "creationTimestamp": "2021-11-10T15:54:10Z", "finalizers": ["baremetalhost.metal3.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:finalizers": {".": {}, "v:\"baremetalhost.metal3.io\"": {}}}}, "manager": "baremetal-operator", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:kubectl.kubernetes.io/last-applied-configuration": {}}}, "f:spec": {".": {}, "f:automatedCleaningMode": {}, "f:bmc": {".": {}, "f:address": {}, "f:credentialsName": {}}, "f:bootMACAddress": {}, "f:bootMode": {}, "f:online": {}}}, "manager": "kubectl-client-side-apply", "operation": "Update", "time": "2021-11-10T15:54:10Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"c22cdded-d5e2-4c90-a998-20b230c8c580\"}": {}}}, "f:spec": {"f:consumerRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:namespace": {}}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:metaData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:networkData": {".": {}, "f:name": {}, "f:namespace": {}}, "f:userData": {".": {}, "f:name": {}, "f:namespace": {}}}}, "manager": "cluster-api-provider-metal3-manager", "operation": "Update", "time": "2021-11-10T16:20:27Z"}, {"apiVersion": "metal3.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {".": {}, "f:errorCount": {}, "f:errorMessage": {}, "f:goodCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}, "f:hardware": {".": {}, "f:cpu": {".": {}, "f:arch": {}, "f:clockMegahertz": {}, "f:count": {}, "f:flags": {}, "f:model": {}}, "f:firmware": {".": {}, "f:bios": {".": {}, "f:date": {}, "f:vendor": {}, "f:version": {}}}, "f:hostname": {}, "f:nics": {}, "f:ramMebibytes": {}, "f:storage": {}, "f:systemVendor": {".": {}, "f:manufacturer": {}, "f:productName": {}}}, "f:hardwareProfile": {}, "f:lastUpdated": {}, "f:operationHistory": {".": {}, "f:deprovision": {".": {}, "f:end": {}, "f:start": {}}, "f:inspect": {".": {}, "f:end": {}, "f:start": {}}, "f:provision": {".": {}, "f:end": {}, "f:start": {}}, "f:register": {".": {}, "f:end": {}, "f:start": {}}}, "f:operationalStatus": {}, "f:poweredOn": {}, "f:provisioning": {".": {}, "f:ID": {}, "f:bootMode": {}, "f:image": {".": {}, "f:checksum": {}, "f:checksumType": {}, "f:format": {}, "f:url": {}}, "f:raid": {".": {}, "f:hardwareRAIDVolumes": {}, "f:softwareRAIDVolumes": {}}, "f:rootDeviceHints": {".": {}, "f:deviceName": {}}, "f:state": {}}, "f:triedCredentials": {".": {}, "f:credentials": {".": {}, "f:name": {}, "f:namespace": {}}, "f:credentialsVersion": {}}}}, "manager": "baremetal-operator", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:38:11Z"}], "name": "node-3", "namespace": "metal3", "ownerReferences": [{"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "controller": true, "kind": "Metal3Machine", "name": "test1-controlplane-st75s", "uid": "c22cdded-d5e2-4c90-a998-20b230c8c580"}], "resourceVersion": "11981", "uid": "ea568c6d-2491-4ffa-909b-f57ce0cb407c"}, "spec": {"automatedCleaningMode": "metadata", "bmc": {"address": "redfish+http://192.168.111.1:8000/redfish/v1/Systems/88c87873-8426-41bd-b43a-934c4041474b", "credentialsName": "node-3-bmc-secret"}, "bootMACAddress": "00:4a:e3:eb:f8:4e", "bootMode": "legacy", "consumerRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-st75s", "namespace": "metal3"}, "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "metaData": {"name": "test1-controlplane-st75s-metadata", "namespace": "metal3"}, "networkData": {"name": "test1-controlplane-st75s-networkdata", "namespace": "metal3"}, "online": true, "userData": {"name": "test1-tz8qx", "namespace": "metal3"}}, "status": {"errorCount": 0, "errorMessage": "", "goodCredentials": {"credentials": {"name": "node-3-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "8402"}, "hardware": {"cpu": {"arch": "x86_64", "clockMegahertz": 2095, "count": 2, "flags": ["3dnowprefetch", "abm", "adx", "aes", "apic", "arat", "arch_capabilities", "avx", "avx2", "avx512bw", "avx512cd", "avx512dq", "avx512f", "avx512vl", "bmi1", "bmi2", "clflush", "clflushopt", "cmov", "constant_tsc", "cpuid", "cpuid_fault", "cx16", "cx8", "de", "ept", "erms", "f16c", "fma", "fpu", "fsgsbase", "fxsr", "hle", "hypervisor", "invpcid", "invpcid_single", "lahf_lm", "lm", "mca", "mce", "md_clear", "mmx", "movbe", "mpx", "msr", "mtrr", "nopl", "nx", "pae", "pat", "pcid", "pclmulqdq", "pdpe1gb", "pge", "pni", "popcnt", "pse", "pse36", "pti", "rdrand", "rdseed", "rdtscp", "rep_good", "rtm", "sep", "smap", "smep", "ss", "sse", "sse2", "sse4_1", "sse4_2", "ssse3", "syscall", "tpr_shadow", "tsc", "tsc_adjust", "tsc_deadline_timer", "tsc_known_freq", "umip", "vme", "vmx", "vnmi", "vpid", "x2apic", "xsave", "xsavec", "xsaveopt", "xsaves", "xtopology"], "model": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"}, "firmware": {"bios": {"date": "04/01/2014", "vendor": "SeaBIOS", "version": "1.13.0-1ubuntu1.1"}}, "hostname": "node-3", "nics": [{"ip": "192.168.111.23", "mac": "00:4a:e3:eb:f8:50", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "fe80::574b:d072:30b:524b%enp2s0", "mac": "00:4a:e3:eb:f8:50", "model": "0x1af4 0x0001", "name": "enp2s0"}, {"ip": "172.22.0.79", "mac": "00:4a:e3:eb:f8:4e", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}, {"ip": "fe80::bd73:acea:cfd1:da79%enp1s0", "mac": "00:4a:e3:eb:f8:4e", "model": "0x1af4 0x0001", "name": "enp1s0", "pxe": true}], "ramMebibytes": 4096, "storage": [{"hctl": "0:0:0:0", "model": "QEMU HARDDISK", "name": "/dev/sda", "rotational": true, "serialNumber": "drive-scsi0-0-0-0", "sizeBytes": 53687091200, "type": "HDD", "vendor": "QEMU"}], "systemVendor": {"manufacturer": "QEMU", "productName": "Standard PC (Q35 + ICH9, 2009)"}}, "hardwareProfile": "unknown", "lastUpdated": "2021-11-10T16:38:11Z", "operationHistory": {"deprovision": {"end": "2021-11-10T16:32:19Z", "start": "2021-11-10T16:30:57Z"}, "inspect": {"end": "2021-11-10T15:58:38Z", "start": "2021-11-10T15:54:55Z"}, "provision": {"end": "2021-11-10T16:38:11Z", "start": "2021-11-10T16:32:19Z"}, "register": {"end": "2021-11-10T16:20:27Z", "start": "2021-11-10T16:20:27Z"}}, "operationalStatus": "OK", "poweredOn": true, "provisioning": {"ID": "2fa3356e-4f9a-46b3-b4fd-792df6fa5c74", "bootMode": "legacy", "image": {"checksum": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum", "checksumType": "md5", "format": "raw", "url": "http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img"}, "raid": {"hardwareRAIDVolumes": null, "softwareRAIDVolumes": []}, "rootDeviceHints": {"deviceName": "/dev/sda"}, "state": "provisioned"}, "triedCredentials": {"credentials": {"name": "node-3-bmc-secret", "namespace": "metal3"}, "credentialsVersion": "8402"}}}]}[0m
Wednesday 10 November 2021  18:46:17 +0000 (0:00:01.004)       0:00:10.070 **** 

TASK [v1aX_integration_test : Wait until "4" machines become running.] *********
[0;32mok: [localhost] => {"api_found": true, "attempts": 1, "changed": false, "resources": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "kind": "Machine", "metadata": {"creationTimestamp": "2021-11-10T16:50:28Z", "finalizers": ["machine.cluster.x-k8s.io"], "generateName": "test1-849bcb9bdc-", "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1", "machine-template-hash": "4056765687", "nodepool": "nodepool-0"}, "managedFields": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:bootstrapReady": {}, "f:conditions": {}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:55:25Z"}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:addresses": {}, "f:infrastructureReady": {}, "f:lastUpdated": {}, "f:nodeInfo": {".": {}, "f:architecture": {}, "f:bootID": {}, "f:containerRuntimeVersion": {}, "f:kernelVersion": {}, "f:kubeProxyVersion": {}, "f:kubeletVersion": {}, "f:machineID": {}, "f:operatingSystem": {}, "f:osImage": {}, "f:systemUUID": {}}, "f:nodeRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:uid": {}}, "f:observedGeneration": {}, "f:phase": {}}}, "manager": "manager", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:55:25Z"}], "name": "test1-849bcb9bdc-mt9bv", "namespace": "metal3", "ownerReferences": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "blockOwnerDeletion": true, "controller": true, "kind": "MachineSet", "name": "test1-849bcb9bdc", "uid": "046e0803-5951-4862-a0f6-5b7cda44bc4d"}], "resourceVersion": "15698", "uid": "b632183a-0a35-47af-ae02-cd8df7fd8449"}, "spec": {"bootstrap": {"configRef": {"apiVersion": "bootstrap.cluster.x-k8s.io/v1alpha4", "kind": "KubeadmConfig", "name": "test1-workers-xcrc8", "namespace": "metal3", "uid": "73ebcd9b-13d1-478b-bb2d-4997d85065ef"}, "dataSecretName": "test1-workers-xcrc8"}, "clusterName": "test1", "infrastructureRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-workers-xb9ks", "namespace": "metal3", "uid": "191e4d98-6281-4156-ab55-015e2161d3f7"}, "nodeDrainTimeout": "0s", "providerID": "metal3://d367f112-8bbc-41f2-9f53-9dd493bbe9b8", "version": "v1.21.1"}, "status": {"addresses": [{"address": "172.22.0.75", "type": "InternalIP"}, {"address": "fe80::72e9:a34d:2642:ca46%enp1s0", "type": "InternalIP"}, {"address": "192.168.111.22", "type": "InternalIP"}, {"address": "fe80::7d6a:52da:c2d1:79ea%enp2s0", "type": "InternalIP"}, {"address": "node-2", "type": "Hostname"}, {"address": "node-2", "type": "InternalDNS"}], "bootstrapReady": true, "conditions": [{"lastTransitionTime": "2021-11-10T16:55:25Z", "status": "True", "type": "Ready"}, {"lastTransitionTime": "2021-11-10T16:50:43Z", "status": "True", "type": "BootstrapReady"}, {"lastTransitionTime": "2021-11-10T16:55:25Z", "status": "True", "type": "InfrastructureReady"}, {"lastTransitionTime": "2021-11-10T16:55:25Z", "message": "Node condition Ready is False. ", "reason": "NodeConditionsFailed", "severity": "Warning", "status": "False", "type": "NodeHealthy"}], "infrastructureReady": true, "lastUpdated": "2021-11-10T16:55:25Z", "nodeInfo": {"architecture": "amd64", "bootID": "a8cff6d0-df1d-4381-a6af-d08ecaf2573e", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "4757b466-419f-4d0e-86a2-4efb517e615a"}, "nodeRef": {"apiVersion": "v1", "kind": "Node", "name": "test1-849bcb9bdc-mt9bv", "uid": "a61a4ab6-98b4-4457-94ed-7186e43ddd97"}, "observedGeneration": 3, "phase": "Running"}}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "kind": "Machine", "metadata": {"annotations": {"controlplane.cluster.x-k8s.io/kubeadm-cluster-configuration": "{\"etcd\":{},\"networking\":{},\"apiServer\":{},\"controllerManager\":{},\"scheduler\":{},\"dns\":{}}"}, "creationTimestamp": "2021-11-10T16:02:26Z", "finalizers": ["machine.cluster.x-k8s.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1", "cluster.x-k8s.io/control-plane": ""}, "managedFields": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:addresses": {}, "f:bootstrapReady": {}, "f:infrastructureReady": {}, "f:nodeInfo": {".": {}, "f:architecture": {}, "f:bootID": {}, "f:containerRuntimeVersion": {}, "f:kernelVersion": {}, "f:kubeProxyVersion": {}, "f:kubeletVersion": {}, "f:machineID": {}, "f:operatingSystem": {}, "f:osImage": {}, "f:systemUUID": {}}, "f:nodeRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:uid": {}}, "f:phase": {}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:20:26Z"}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:conditions": {}, "f:lastUpdated": {}, "f:observedGeneration": {}}}, "manager": "manager", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:20:26Z"}], "name": "test1-crxn4", "namespace": "metal3", "ownerReferences": [{"apiVersion": "controlplane.cluster.x-k8s.io/v1alpha4", "blockOwnerDeletion": true, "controller": true, "kind": "KubeadmControlPlane", "name": "test1", "uid": "357d56c5-8128-4707-bcf6-b03093050365"}], "resourceVersion": "11840", "uid": "0e75f27d-3203-4336-8c06-ca7f9cd9a7ff"}, "spec": {"bootstrap": {"configRef": {"apiVersion": "bootstrap.cluster.x-k8s.io/v1alpha4", "kind": "KubeadmConfig", "name": "test1-86wzb", "namespace": "metal3", "uid": "f741cc9e-3bdb-430e-b989-52281dd84a27"}, "dataSecretName": "test1-86wzb"}, "clusterName": "test1", "infrastructureRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-9z8sd", "namespace": "metal3", "uid": "e42d05a1-4860-44fc-b495-7567aba97ed1"}, "nodeDrainTimeout": "0s", "providerID": "metal3://44016cf3-4182-4fb6-9325-3c76d7ac4c45", "version": "v1.21.1"}, "status": {"addresses": [{"address": "172.22.0.71", "type": "InternalIP"}, {"address": "fe80::7ea5:8770:bf6c:a746%enp1s0", "type": "InternalIP"}, {"address": "192.168.111.21", "type": "InternalIP"}, {"address": "fe80::6797:d34:31c5:8f05%enp2s0", "type": "InternalIP"}, {"address": "node-1", "type": "Hostname"}, {"address": "node-1", "type": "InternalDNS"}], "bootstrapReady": true, "conditions": [{"lastTransitionTime": "2021-11-10T16:20:16Z", "status": "True", "type": "Ready"}, {"lastTransitionTime": "2021-11-10T16:37:33Z", "status": "True", "type": "APIServerPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:02:26Z", "status": "True", "type": "BootstrapReady"}, {"lastTransitionTime": "2021-11-10T16:37:33Z", "status": "True", "type": "ControllerManagerPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:20:26Z", "status": "True", "type": "EtcdMemberHealthy"}, {"lastTransitionTime": "2021-11-10T16:37:33Z", "status": "True", "type": "EtcdPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:20:16Z", "status": "True", "type": "InfrastructureReady"}, {"lastTransitionTime": "2021-11-10T16:20:16Z", "message": "Node condition Ready is False. ", "reason": "NodeConditionsFailed", "severity": "Warning", "status": "False", "type": "NodeHealthy"}, {"lastTransitionTime": "2021-11-10T16:37:33Z", "status": "True", "type": "SchedulerPodHealthy"}], "infrastructureReady": true, "lastUpdated": "2021-11-10T16:20:26Z", "nodeInfo": {"architecture": "amd64", "bootID": "c2b05f6d-e9b8-438a-a5bc-1778ae2b936a", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "5414b5e7-bae3-4f7e-8e59-cf44f009a7a1"}, "nodeRef": {"apiVersion": "v1", "kind": "Node", "name": "test1-crxn4", "uid": "0354e288-4484-4958-bc30-83a28e576e71"}, "observedGeneration": 3, "phase": "Running"}}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "kind": "Machine", "metadata": {"annotations": {"controlplane.cluster.x-k8s.io/kubeadm-cluster-configuration": "{\"etcd\":{},\"networking\":{},\"apiServer\":{},\"controllerManager\":{},\"scheduler\":{},\"dns\":{}}"}, "creationTimestamp": "2021-11-10T16:41:42Z", "finalizers": ["machine.cluster.x-k8s.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1", "cluster.x-k8s.io/control-plane": ""}, "managedFields": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:bootstrapReady": {}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:48:17Z"}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:addresses": {}, "f:conditions": {}, "f:infrastructureReady": {}, "f:lastUpdated": {}, "f:nodeInfo": {".": {}, "f:architecture": {}, "f:bootID": {}, "f:containerRuntimeVersion": {}, "f:kernelVersion": {}, "f:kubeProxyVersion": {}, "f:kubeletVersion": {}, "f:machineID": {}, "f:operatingSystem": {}, "f:osImage": {}, "f:systemUUID": {}}, "f:nodeRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:uid": {}}, "f:observedGeneration": {}, "f:phase": {}}}, "manager": "manager", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:48:20Z"}], "name": "test1-tdcbq", "namespace": "metal3", "ownerReferences": [{"apiVersion": "controlplane.cluster.x-k8s.io/v1alpha4", "blockOwnerDeletion": true, "controller": true, "kind": "KubeadmControlPlane", "name": "test1", "uid": "357d56c5-8128-4707-bcf6-b03093050365"}], "resourceVersion": "14121", "uid": "c86e243b-d479-4fb6-b044-468585b7b1e0"}, "spec": {"bootstrap": {"configRef": {"apiVersion": "bootstrap.cluster.x-k8s.io/v1alpha4", "kind": "KubeadmConfig", "name": "test1-w6ntq", "namespace": "metal3", "uid": "6134638f-5a94-499f-bb6e-b93beb3f18ea"}, "dataSecretName": "test1-w6ntq"}, "clusterName": "test1", "infrastructureRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-42wj6", "namespace": "metal3", "uid": "9dbec15f-bfd5-4373-ae81-96822021daf7"}, "nodeDrainTimeout": "0s", "providerID": "metal3://0a41f459-3dd4-428f-8b71-1f8ce6e218c0", "version": "v1.21.1"}, "status": {"addresses": [{"address": "192.168.111.20", "type": "InternalIP"}, {"address": "fe80::4759:40e9:3ace:820c%enp2s0", "type": "InternalIP"}, {"address": "172.22.0.67", "type": "InternalIP"}, {"address": "fe80::370:db5e:5d36:1385%enp1s0", "type": "InternalIP"}, {"address": "node-0", "type": "Hostname"}, {"address": "node-0", "type": "InternalDNS"}], "bootstrapReady": true, "conditions": [{"lastTransitionTime": "2021-11-10T16:48:17Z", "status": "True", "type": "Ready"}, {"lastTransitionTime": "2021-11-10T16:48:19Z", "status": "True", "type": "APIServerPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:41:42Z", "status": "True", "type": "BootstrapReady"}, {"lastTransitionTime": "2021-11-10T16:48:19Z", "status": "True", "type": "ControllerManagerPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:48:20Z", "status": "True", "type": "EtcdMemberHealthy"}, {"lastTransitionTime": "2021-11-10T16:48:20Z", "status": "True", "type": "EtcdPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:48:17Z", "status": "True", "type": "InfrastructureReady"}, {"lastTransitionTime": "2021-11-10T16:48:17Z", "message": "Node condition Ready is False. ", "reason": "NodeConditionsFailed", "severity": "Warning", "status": "False", "type": "NodeHealthy"}, {"lastTransitionTime": "2021-11-10T16:48:19Z", "status": "True", "type": "SchedulerPodHealthy"}], "infrastructureReady": true, "lastUpdated": "2021-11-10T16:48:17Z", "nodeInfo": {"architecture": "amd64", "bootID": "4bd1f10d-b963-45ce-a712-37bfae4cc407", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "fbf93ce0-df11-4e33-a075-5214a2d9bce3"}, "nodeRef": {"apiVersion": "v1", "kind": "Node", "name": "test1-tdcbq", "uid": "323baa1e-a460-4041-a3ad-6d7a17a1cc58"}, "observedGeneration": 3, "phase": "Running"}}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "kind": "Machine", "metadata": {"annotations": {"controlplane.cluster.x-k8s.io/kubeadm-cluster-configuration": "{\"etcd\":{},\"networking\":{},\"apiServer\":{},\"controllerManager\":{},\"scheduler\":{},\"dns\":{}}"}, "creationTimestamp": "2021-11-10T16:20:26Z", "finalizers": ["machine.cluster.x-k8s.io"], "generation": 3, "labels": {"cluster.x-k8s.io/cluster-name": "test1", "cluster.x-k8s.io/control-plane": ""}, "managedFields": [{"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:bootstrapReady": {}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:41:41Z"}, {"apiVersion": "cluster.x-k8s.io/v1alpha4", "fieldsType": "FieldsV1", "fieldsV1": {"f:status": {"f:addresses": {}, "f:conditions": {}, "f:infrastructureReady": {}, "f:lastUpdated": {}, "f:nodeInfo": {".": {}, "f:architecture": {}, "f:bootID": {}, "f:containerRuntimeVersion": {}, "f:kernelVersion": {}, "f:kubeProxyVersion": {}, "f:kubeletVersion": {}, "f:machineID": {}, "f:operatingSystem": {}, "f:osImage": {}, "f:systemUUID": {}}, "f:nodeRef": {".": {}, "f:apiVersion": {}, "f:kind": {}, "f:name": {}, "f:uid": {}}, "f:observedGeneration": {}, "f:phase": {}}}, "manager": "manager", "operation": "Update", "subresource": "status", "time": "2021-11-10T16:41:42Z"}], "name": "test1-xzxfp", "namespace": "metal3", "ownerReferences": [{"apiVersion": "controlplane.cluster.x-k8s.io/v1alpha4", "blockOwnerDeletion": true, "controller": true, "kind": "KubeadmControlPlane", "name": "test1", "uid": "357d56c5-8128-4707-bcf6-b03093050365"}], "resourceVersion": "12978", "uid": "d0bde614-7860-41ef-8d3b-e8a88ad14c07"}, "spec": {"bootstrap": {"configRef": {"apiVersion": "bootstrap.cluster.x-k8s.io/v1alpha4", "kind": "KubeadmConfig", "name": "test1-tz8qx", "namespace": "metal3", "uid": "a8b96bf8-3648-48fe-bb16-d58a91fb06f0"}, "dataSecretName": "test1-tz8qx"}, "clusterName": "test1", "infrastructureRef": {"apiVersion": "infrastructure.cluster.x-k8s.io/v1alpha5", "kind": "Metal3Machine", "name": "test1-controlplane-st75s", "namespace": "metal3", "uid": "c22cdded-d5e2-4c90-a998-20b230c8c580"}, "nodeDrainTimeout": "0s", "providerID": "metal3://ea568c6d-2491-4ffa-909b-f57ce0cb407c", "version": "v1.21.1"}, "status": {"addresses": [{"address": "192.168.111.23", "type": "InternalIP"}, {"address": "fe80::574b:d072:30b:524b%enp2s0", "type": "InternalIP"}, {"address": "172.22.0.79", "type": "InternalIP"}, {"address": "fe80::bd73:acea:cfd1:da79%enp1s0", "type": "InternalIP"}, {"address": "node-3", "type": "Hostname"}, {"address": "node-3", "type": "InternalDNS"}], "bootstrapReady": true, "conditions": [{"lastTransitionTime": "2021-11-10T16:41:41Z", "status": "True", "type": "Ready"}, {"lastTransitionTime": "2021-11-10T16:41:42Z", "status": "True", "type": "APIServerPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:20:26Z", "status": "True", "type": "BootstrapReady"}, {"lastTransitionTime": "2021-11-10T16:41:42Z", "status": "True", "type": "ControllerManagerPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:41:42Z", "status": "True", "type": "EtcdMemberHealthy"}, {"lastTransitionTime": "2021-11-10T16:41:42Z", "status": "True", "type": "EtcdPodHealthy"}, {"lastTransitionTime": "2021-11-10T16:41:41Z", "status": "True", "type": "InfrastructureReady"}, {"lastTransitionTime": "2021-11-10T16:41:41Z", "message": "Node condition Ready is False. ", "reason": "NodeConditionsFailed", "severity": "Warning", "status": "False", "type": "NodeHealthy"}, {"lastTransitionTime": "2021-11-10T16:41:42Z", "status": "True", "type": "SchedulerPodHealthy"}], "infrastructureReady": true, "lastUpdated": "2021-11-10T16:41:41Z", "nodeInfo": {"architecture": "amd64", "bootID": "2158d241-9376-4b61-b920-14314f40ecf2", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "88c87873-8426-41bd-b43a-934c4041474b"}, "nodeRef": {"apiVersion": "v1", "kind": "Node", "name": "test1-xzxfp", "uid": "ca7a632a-f74b-4ea1-ac9d-9d17fe24b578"}, "observedGeneration": 3, "phase": "Running"}}]}[0m
Wednesday 10 November 2021  18:46:18 +0000 (0:00:00.744)       0:00:10.815 **** 

TASK [v1aX_integration_test : Fetch target cluster kubeconfig] *****************
[0;32mok: [localhost] => {"api_found": true, "changed": false, "resources": [{"apiVersion": "v1", "data": {"value": "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNMmFrTkRRV1JMWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplRTFVUlhoTlJFVXhUbFJqZVU1R2IxaEVWRTE0VFZSRmQwOUVSVEpOUkVsNVRrWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVDAxcUNuSnpXVUpVY1hwUVNGUnVlbkJuWVhKaFZqSkNTRmQwUjJOQmIza3dMekpyWkVSTGJXTktTVmhLY0VveVpYQXJaVEpXZVdJM1VEZEpkblZ3YTJGRmJrVUtOV1o1YUdGV2EyaEhWekZzYkVSa1dEWnJiU3RhT1VoMFVESlpaRUZ5TUdZM1MzRjZXbFY2YlUwclYwVnZXbkpFVVROU01DOXpTRlExYVZOWGNISllaZ3BUUm1NNFdFWnVjRVp3ZVU4MGNIZFZjM0JHY1VGdWVqRlFZV0VyZHpobk5XRjRjMlF6YlhkR1RHeExiSGRaYjJGRFJUWlpWMFl4V0dOSWVWQjZNak53Q2xKa2RsaDJVR054UjJkRVVtTkdUbUp2UjFoSmRGVk9UR3B2TURkQlIzZzRSbEpvUWxGcGR5ODNiM1ExVm5oa1ZXcGxMMnhLTnpkeU0weFpiRWxzWkd3S1kybHZOMk5WY0V3d1JWUnFUaTl3Wm1GVFJpOVJRbWg2TnpCbEsyaFRhaXQwWlcwclFteDVRM0UyTVhKaFJqQkNlWGhpTlZsVWRsVkJhVlpUWkhkQ1Fnb3lXRFlyV2psbU0wOVlOMmRtUkRCWU5XOUZRMEYzUlVGQllVNUdUVVZOZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVSkpSMEV4VldSRmQwVkNDaTkzVVVsTlFWbENRV1k0UTBGUlFYZElVVmxFVmxJd1QwSkNXVVZHVGxVeE1rMXRMMUpRVjJFNFEyOWtVQ3M0UTFOTVV6QkpabTl4VFVFd1IwTlRjVWNLVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUTFaRVlreE5hVEExYUhWMldtdGxWVk5JUlhGaVNHSXZVRFJ6VVhOaVVIQnlUV2x1ZHpjeFpGVkthWHBqU3dwaWEwWTBZM0p2VVhoTVlVbGtWVXhxTjBscWFHTllPWEpYYlVkaE5FVTNZbFF3Y2xocE4wVkxTVVpTY1RkVVNGUmFRbWRxZFRoeU9IRm5TV3BoTTBockNuVnJkVWR0U21GMVlWWldPVUY0U1dwNFdGZzBNWHBxU1VaeFkwNXRXRVZpVHpaWFVDOXFaR05LT0ZOallrdHdTRXRwYjA5UGVEWklha0V4SzFkSldGZ0tiVmRUTDBsa1lrd3dZMDR2WmpOMVNuVkpORzgyVDJ3dmRrWXpOMGxpV2xKbmVYaHRlbGxvUzFoQmVtMVZVMDAxY2xkSGIzZExTREYzWjIxNmRWQlZjUXByVmpVM1ZUQndSemQ2V0ROb2MxQm1iRGh3WnpGWWFqTjNaRXRpYzJoRVNXeGpkM2hyVFZOMFVXNURTSGQ2YUdSNVdGWXpObFIwTlRKRE1rOVVkV04zQ2xGRVJFUTJSREpqTldoUlpsTm9Rek5pWlhsaE5GZHBSM1pETHlzMmRuUXJWM0pwYzNkbVJHWUtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIHNlcnZlcjogaHR0cHM6Ly8xOTIuMTY4LjExMS4yNDk6NjQ0MwogIG5hbWU6IHRlc3QxCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiB0ZXN0MQogICAgdXNlcjogdGVzdDEtYWRtaW4KICBuYW1lOiB0ZXN0MS1hZG1pbkB0ZXN0MQpjdXJyZW50LWNvbnRleHQ6IHRlc3QxLWFkbWluQHRlc3QxCmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZTogdGVzdDEtYWRtaW4KICB1c2VyOgogICAgY2xpZW50LWNlcnRpZmljYXRlLWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJGZWtORFFXWjFaMEYzU1VKQlowbEpRMHBqVW1rMFpYTklXVmwzUkZGWlNrdHZXa2xvZG1OT1FWRkZURUpSUVhkR1ZFVlVUVUpGUjBFeFZVVUtRWGhOUzJFelZtbGFXRXAxV2xoU2JHTjZRV1ZHZHpCNVRWUkZlRTFVUVhoT1ZGVXpUV3BTWVVaM01IbE5ha1Y0VFZSQmVFNXFRWGxOYWxaaFRVUlJlQXBHZWtGV1FtZE9Wa0pCYjFSRWJrNDFZek5TYkdKVWNIUlpXRTR3V2xoS2VrMVNhM2RHZDFsRVZsRlJSRVY0UW5Ka1YwcHNZMjAxYkdSSFZucE1WMFpyQ21KWGJIVk5TVWxDU1dwQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSUlVaQlFVOURRVkU0UVUxSlNVSkRaMHREUVZGRlFYaHZNRmRwWjBZNFdtNHdWQ3RrWlRjS1lXMHdNMDU1TldweWIyZzFWWGh0VDFkbGJucFBPVTVsVFRkaVkzUnNUbUpxTW10RWNrdEdlR3ROY3pKclZsZHlkMkpoTjFaeFdsbG9jakJGYm1aMGRnb3ZSSFptU0hFMVlYRmhReXR3ZG5GeGNUQlFlakY0TVZoS05HaHBWVmRDUzJKNVZrUktPWFJ3WWtRME9TdFBUbEJoVFVGd2VVcGFZMjlPYXpkNVRsZHhDazFKZGxkWVYxSm5iWGR3UkZRdlpWQTJSVzVCVTFKVGNHVlZkRTFQUTJ4TVUyNUhSazFXTVZCc2F6aHNkVmw0U1d0amNEbDBNbFkzY0Rjd1kwMXJWbWtLYWxOMWQzRnJkbkpxUXpCd09GWldXQzlpYUhwRVEzb3pRWFpEYVhST1FYRlBVME5yU3pOMU5rRkJibWRKWm1oblkyWmlZVlIzWkZKdVkySnJjMEpGV2dwMGEzaENTWEp5TlV0RmJuWXlPWG95YkRCS1YxQlRjWGMzUlVSVlNWcHlTR3BWVDJGcFJrdFZXV2RhZUdkaWVqaFhjWEp1WjJwUU5URktha3RXYTFKMENsRmFXamQzZDBsRVFWRkJRbTh3WjNkU2FrRlBRbWRPVmtoUk9FSkJaamhGUWtGTlEwSmhRWGRGZDFsRVZsSXdiRUpCZDNkRFoxbEpTM2RaUWtKUlZVZ0tRWGRKZDBoM1dVUldVakJxUWtKbmQwWnZRVlV4VkZoWmVXSTVSVGxhY25kTGFEQXZOM2RLU1hSTVVXZ3JhVzkzUkZGWlNrdHZXa2xvZG1OT1FWRkZUQXBDVVVGRVoyZEZRa0ZGVUVGemRrTkVjVkZYVUdSb05GZ3pWMVo0ZG5ReGVIWlBPWGRIY3pkeVIxUlliMlJLZURWbE4ycE9kbkY2YkRST2NVNXdSVmRhQ2pSRk5HSjRZVUV2TlV4a1QxUlVWRkptU0VRM1ZuTTNUREFyWlZWNGJYVlRVelpTVlZRcldtZE1XV2REWkVWMlNFcGpNRVkwVVU1d2VFNDBSbmhrV0ZNS1pVMDBhVVZKTkVWSGQxWk5VbGcwYlV4dmFrNXlkSEJVZDBOTlpVUTJaVVlyWlhwNlFqTkxkbVkyT1VseFdEZDVWVTFITWpaVVFtbDRhM1JvU1VWamJRbzJaMUJZWlZwdVdWaG9ORWwwTlhsMlNURnBPVkp1WlhoUmFFUTNhVTFRYm5scmN6RkhVMDlDVDBKV05FaGhOMk5sTUdFMWNqQTRlbE5EUjNsTmVXUTVDbFpXWm1ST2JVZHRVa1JETW1WTFRqWlBhMEZrVG01NU4xVXliMUV6VFZSMVNXWkROVGt2VTNKMU5XWlJUM1F5TUROQ1FVeHRibXBETjBkM1FuQnJPWG9LT1ZseFpXcFRTRkJ0VDBNelFsUlVlVWhpVDJVNVVtVTBVRlZuWm1GMlp6MEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjJkSlFrRkJTME5CVVVWQmVHOHdWMmxuUmpoYWJqQlVLMlJsTjJGdE1ETk9lVFZxY205b05WVjRiVTlYWlc1NlR6bE9aVTAzWW1OMGJFNWlDbW95YTBSeVMwWjRhMDF6TW10V1YzSjNZbUUzVm5GYVdXaHlNRVZ1Wm5SMkwwUjJaa2h4TldGeFlVTXJjSFp4Y1hFd1VIb3hlREZZU2pSb2FWVlhRa3NLWW5sV1JFbzVkSEJpUkRRNUswOU9VR0ZOUVhCNVNscGpiMDVyTjNsT1YzRk5TWFpYV0ZkU1oyMTNjRVJVTDJWUU5rVnVRVk5TVTNCbFZYUk5UME5zVEFwVGJrZEdUVll4VUd4ck9HeDFXWGhKYTJOd09YUXlWamR3TnpCalRXdFdhV3BUZFhkeGEzWnlha013Y0RoV1ZsZ3ZZbWg2UkVONk0wRjJRMmwwVGtGeENrOVRRMnRMTTNVMlFVRnVaMGxtYUdkalptSmhWSGRrVW01alltdHpRa1ZhZEd0NFFrbHljalZMUlc1Mk1qbDZNbXd3U2xkUVUzRjNOMFZFVlVsYWNrZ0thbFZQWVdsR1MxVlpaMXA0WjJKNk9GZHhjbTVuYWxBMU1VcHFTMVpyVW5SUldsbzNkM2RKUkVGUlFVSkJiMGxDUVVkTU1IVklTVXB6V1RKSE9IbHFTQXBQTTBsalozSk9kVE5IUjBaU1UzRkZhSGt3U3pZMU5EWm9lVEo0UTNGdFdVOHZOM0Z6VG10bFJWaExMM2hUSzBWRGFteGxjMFp1VFZORWVraEJaMFZYQ2paeldrVjBUSGRsTWpkTVJrZGhRWGhQUmxKd1duRk5hM3BYV1ROc1FVUkpkeTlDU0VkM1VraFdNME5MVTA5eE9YQTNjMjFaZFhwRkt6azVlWGhXWjJjS1NGWldZWEpJYTFwaFVXZzRaMlpZWlVKWmQxcEVZM1ZsYWpaVFUxbE5aV05uTVV3MlVuaDJSa0ZuTDNFeWVWRk5XVVI1TDA5RWRsRXhiMDV2YjJSdFp3cG5SMHRGWVVOWFlVVklTVmgxVjBsd2IxWkxVM0JPY21GV1FuVnhZbmRrVkd4amFtaEtaMHd3YjFGd1oxcEVSMDE2WTNkR1pUazFjM0pvZG5VeVJEQnBDbXhJV25GSlIySkJkVEpOUzNsSVRVWm1ZMGRTZUdKalMzaFNWaXRTY3paalF6UTRlVWxyYldKUmJHTkdUbkZKTVd0Rk56VXJOa1FyVDNjMlRtcDRkMmNLZUhsaFNVcFhSVU5uV1VWQk5tRnJhM0JXYW1OUlV5dEtZWEIwYVdwTlVpOHJkR1p5TVRGV2RsTlhhalJQUjFFeFNGSlhRbkJzVGtONGFEQmFTVkp0Y0FwNVFXSlFhbXN3V0M5elFtTklNVmRRVEVOaFFuWmhaREZTWjJNeFRHWmhORWxrUjFwS1kyRlJRM1JoZFhWNlVuQk1Tak5tTlVKQ05rUmFSR3MxV1c1T0NuWlhkMnR6UVZWQ2FrUTNVVXh0YkhSck4xcE1UamhtYlZOVVlrb3pWbGRtTW00eFR6bFdaVFJXUzJ4a1ZtbENUbFpwUjBRclpFMURaMWxGUVRKWmFXa0tNRGxST1M5cU5rSmlObnBaZEc5a0wxbzFURlIwV0VrdllXRlhOVVJhVUZCNVNYTnRZMUU1U0ROTmEzSnRWR2hWTURsbmRuZG5WMkZqT1ZneVZrUnJUd3BpYkM5UlZ6QXlaV2x5TVM5TFRuazNNVEZJTkRGblNXSTVjelZGU1hwaFRtMXJOa1pyUW5oak9Hc3hXamxxTHpob1JWTmFabm8yVUdKR1QzZFVWbGh0Q2pSa1JUQlNUMmd5UXpCYVJIQkxha3hCTTJSWWNsaFJjVmh0VjJOSVEzaG1ZMmwzYWpCR1JVTm5XVUZCTm5CSWFrOUNjamxCYms4eVowVTVPVzQ1VDJzS2NIazBZMnhTUVhaeFNVczBjbVZRY21KclkyODBUa014VDBNekswUkVlVE5PVW1Wb1VtcHZaVE5MUVM4eWVsVkthR3RyYURsclRXMWxRMkpGVUVkQ2VRcGxXVVI0VUdaeldXNDRhbXh2VVc0NGFUZ3plRGxuUzFWb1VXNTNkMGcyV0VSS1MwVlJha1JGV0ZGaGVEa3JXR1pITW5KdFIwSnRWMFpsYm5GMlZXYzBDazFvSzJGS1RFeHlWMmhMYzI5TmJrMHlZWEpNTUhkTFFtZEJiVGhSVEZaRlQxZFpTV1pDYURSWWRHRkZXaXRLUm5kMU0wczJRMWRrVVdoUWJXVndWV0VLUkZOV1oweHlTV3d5Y1hGdWVEZDNXRmc0VUV0S2JXaHhkV1pTTkM5VWJGcFdiVlJRY1ROdVFVVXhTRXd4ZVdoRGVHVlZiVUZSVW1od1RrVkRibmRITlFvMEsxcFpUSEI1TVdNMFNTdDVUbXhQYWt0UlUwMDJPRUZoT1VvMlRuSlJRMlprYkdKdlpsUk9UbnBtUjFOb1pXdHVjWEp1YlZGSVUyZEdUVTlrVmsxU0NuZExVMUpCYjBkQlZVbHZkekV5TTFOaWJtdG1WV0ptU1V3M2VGTmxZWGhwWjNSc1oxQmtPV1JTZFdobmVUTXJTSEJqTkZaUlJWcFpPV1UyY1hkU1Rra0tMMGRoYlhoMWVXUjVZekp1VXpKb0wwOVhkemh2YkhGd1RVdEROMlpvU0dFeGNWTlFZV1Z5V1dSeVEwNW5Va3hQU0d3Mk0xQlFZWE5KTWtrM1Rtb3JhZ3BLV1Zsc0wwZFJkR2RpWVd3NFpYQTBiMkl5UlVGb01scG9WbGM0VTBORFUzcEJURmRGZUhndlVsazVOVVpJVUhWUWNEQTlDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQo="}, "kind": "Secret", "metadata": {"creationTimestamp": "2021-11-10T16:02:25Z", "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:data": {".": {}, "f:value": {}}, "f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"357d56c5-8128-4707-bcf6-b03093050365\"}": {}}}, "f:type": {}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:02:25Z"}], "name": "test1-kubeconfig", "namespace": "metal3", "ownerReferences": [{"apiVersion": "controlplane.cluster.x-k8s.io/v1alpha4", "blockOwnerDeletion": true, "controller": true, "kind": "KubeadmControlPlane", "name": "test1", "uid": "357d56c5-8128-4707-bcf6-b03093050365"}], "resourceVersion": "4758", "uid": "09d31777-3697-4f62-967d-0c035064ca58"}, "type": "cluster.x-k8s.io/secret"}]}[0m
Wednesday 10 November 2021  18:46:19 +0000 (0:00:00.772)       0:00:11.587 **** 

TASK [v1aX_integration_test : Store target cluster kubeconfig] *****************
[0;33mchanged: [localhost] => {"changed": true, "msg": "File created"}[0m
Wednesday 10 November 2021  18:46:19 +0000 (0:00:00.428)       0:00:12.016 **** 

TASK [v1aX_integration_test : Download Calico manifest] ************************
[0;33mchanged: [localhost] => {"changed": true, "checksum_dest": null, "checksum_src": "1f30dbb6715d311f86d94734ecca7875f8556be5", "dest": "/tmp/calico.yaml", "elapsed": 0, "gid": 1000, "group": "capm3", "md5sum": "17ba158b31429704faa7ea7f41dcd81f", "mode": "0664", "msg": "OK (217525 bytes)", "owner": "capm3", "size": 217525, "src": "/home/capm3/.ansible/tmp/ansible-tmp-1636569979.6781156-401175-142874206020956/tmp0seif533", "state": "file", "status_code": 200, "uid": 1000, "url": "https://docs.projectcalico.org/manifests/calico.yaml"}[0m
Wednesday 10 November 2021  18:46:20 +0000 (0:00:00.995)       0:00:13.012 **** 

TASK [v1aX_integration_test : Replace the POD_CIDR in calico config] ***********
[0;33mchanged: [localhost] => {"changed": true, "msg": "1 replacements made"}[0m
Wednesday 10 November 2021  18:46:21 +0000 (0:00:00.419)       0:00:13.431 **** 

TASK [v1aX_integration_test : Add IP_AUTODETECTION_METHOD in calico config Ubuntu] ***
[0;33mchanged: [localhost] => {"changed": true, "msg": "Block inserted"}[0m
Wednesday 10 November 2021  18:46:21 +0000 (0:00:00.270)       0:00:13.702 **** 

TASK [v1aX_integration_test : Apply Calico manifest] ***************************
[0;33mchanged: [localhost] => {"changed": true, "result": {"results": [{"changed": true, "method": "create", "result": {"apiVersion": "v1", "data": {"calico_backend": "bird", "cni_network_config": "{\n  \"name\": \"k8s-pod-network\",\n  \"cniVersion\": \"0.3.1\",\n  \"plugins\": [\n    {\n      \"type\": \"calico\",\n      \"log_level\": \"info\",\n      \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n      \"datastore_type\": \"kubernetes\",\n      \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n      \"mtu\": __CNI_MTU__,\n      \"ipam\": {\n          \"type\": \"calico-ipam\"\n      },\n      \"policy\": {\n          \"type\": \"k8s\"\n      },\n      \"kubernetes\": {\n          \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"snat\": true,\n      \"capabilities\": {\"portMappings\": true}\n    },\n    {\n      \"type\": \"bandwidth\",\n      \"capabilities\": {\"bandwidth\": true}\n    }\n  ]\n}", "typha_service_name": "none", "veth_mtu": "0"}, "kind": "ConfigMap", "metadata": {"creationTimestamp": "2021-11-10T18:46:22Z", "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:data": {".": {}, "f:calico_backend": {}, "f:cni_network_config": {}, "f:typha_service_name": {}, "f:veth_mtu": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "calico-config", "namespace": "kube-system", "resourceVersion": "14903", "uid": "5622d2a1-f4ab-4f5f-9c0f-e1b9ff796483"}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:22Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "bgpconfigurations.crd.projectcalico.org", "resourceVersion": "14904", "uid": "e89b1a60-4cb8-4a9c-a425-62157ca3b290"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "BGPConfiguration", "listKind": "BGPConfigurationList", "plural": "bgpconfigurations", "singular": "bgpconfiguration"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"description": "BGPConfiguration contains the configuration for any BGP routing.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "BGPConfigurationSpec contains the values of the BGP configuration.", "properties": {"asNumber": {"description": "ASNumber is the default AS number used by a node. [Default: 64512]", "format": "int32", "type": "integer"}, "communities": {"description": "Communities is a list of BGP community values and their arbitrary names for tagging routes.", "items": {"description": "Community contains standard or large community value and its name.", "properties": {"name": {"description": "Name given to community value.", "type": "string"}, "value": {"description": "Value must be of format `aa:nn` or `aa:nn:mm`. For standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number. For large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number. Where, `aa` is an AS Number, `nn` and `mm` are per-AS identifier.", "pattern": "^(\\d+):(\\d+)$|^(\\d+):(\\d+):(\\d+)$", "type": "string"}}, "type": "object"}, "type": "array"}, "listenPort": {"description": "ListenPort is the port where BGP protocol should listen. Defaults to 179", "maximum": 65535, "minimum": 1, "type": "integer"}, "logSeverityScreen": {"description": "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: INFO]", "type": "string"}, "nodeToNodeMeshEnabled": {"description": "NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled. [Default: true]", "type": "boolean"}, "prefixAdvertisements": {"description": "PrefixAdvertisements contains per-prefix advertisement configuration.", "items": {"description": "PrefixAdvertisement configures advertisement properties for the specified CIDR.", "properties": {"cidr": {"description": "CIDR for which properties should be advertised.", "type": "string"}, "communities": {"description": "Communities can be list of either community names already defined in `Specs.Communities` or community value of format `aa:nn` or `aa:nn:mm`. For standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number. For large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number. Where,`aa` is an AS Number, `nn` and `mm` are per-AS identifier.", "items": {"type": "string"}, "type": "array"}}, "type": "object"}, "type": "array"}, "serviceClusterIPs": {"description": "ServiceClusterIPs are the CIDR blocks from which service cluster IPs are allocated. If specified, Calico will advertise these blocks, as well as any cluster IPs within them.", "items": {"description": "ServiceClusterIPBlock represents a single allowed ClusterIP CIDR block.", "properties": {"cidr": {"type": "string"}}, "type": "object"}, "type": "array"}, "serviceExternalIPs": {"description": "ServiceExternalIPs are the CIDR blocks for Kubernetes Service External IPs. Kubernetes Service ExternalIPs will only be advertised if they are within one of these blocks.", "items": {"description": "ServiceExternalIPBlock represents a single allowed External IP CIDR block.", "properties": {"cidr": {"type": "string"}}, "type": "object"}, "type": "array"}, "serviceLoadBalancerIPs": {"description": "ServiceLoadBalancerIPs are the CIDR blocks for Kubernetes Service LoadBalancer IPs. Kubernetes Service status.LoadBalancer.Ingress IPs will only be advertised if they are within one of these blocks.", "items": {"description": "ServiceLoadBalancerIPBlock represents a single allowed LoadBalancer IP CIDR block.", "properties": {"cidr": {"type": "string"}}, "type": "object"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:22Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "bgppeers.crd.projectcalico.org", "resourceVersion": "14907", "uid": "ef62a176-5b3c-4905-8740-63538611959d"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "BGPPeer", "listKind": "BGPPeerList", "plural": "bgppeers", "singular": "bgppeer"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "BGPPeerSpec contains the specification for a BGPPeer resource.", "properties": {"asNumber": {"description": "The AS Number of the peer.", "format": "int32", "type": "integer"}, "keepOriginalNextHop": {"description": "Option to keep the original nexthop field when routes are sent to a BGP Peer. Setting \"true\" configures the selected BGP Peers node to use the \"next hop keep;\" instead of \"next hop self;\"(default) in the specific branch of the Node on \"bird.cfg\".", "type": "boolean"}, "maxRestartTime": {"description": "Time to allow for software restart.  When specified, this is configured as the graceful restart timeout.  When not specified, the BIRD default of 120s is used.", "type": "string"}, "node": {"description": "The node name identifying the Calico node instance that is targeted by this peer. If this is not set, and no nodeSelector is specified, then this BGP peer selects all nodes in the cluster.", "type": "string"}, "nodeSelector": {"description": "Selector for the nodes that should have this peering.  When this is set, the Node field must be empty.", "type": "string"}, "password": {"description": "Optional BGP password for the peerings generated by this BGPPeer resource.", "properties": {"secretKeyRef": {"description": "Selects a key of a secret in the node pod's namespace.", "properties": {"key": {"description": "The key of the secret to select from.  Must be a valid secret key.", "type": "string"}, "name": {"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?", "type": "string"}, "optional": {"description": "Specify whether the Secret or its key must be defined", "type": "boolean"}}, "required": ["key"], "type": "object"}}, "type": "object"}, "peerIP": {"description": "The IP address of the peer followed by an optional port number to peer with. If port number is given, format should be `[<IPv6>]:port` or `<IPv4>:<port>` for IPv4. If optional port number is not set, and this peer IP and ASNumber belongs to a calico/node with ListenPort set in BGPConfiguration, then we use that port to peer.", "type": "string"}, "peerSelector": {"description": "Selector for the remote nodes to peer with.  When this is set, the PeerIP and ASNumber fields must be empty.  For each peering between the local node and selected remote nodes, we configure an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified, and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The remote AS number comes from the remote node's NodeBGPSpec.ASNumber, or the global default if that is not set.", "type": "string"}, "sourceAddress": {"description": "Specifies whether and how to configure a source address for the peerings generated by this BGPPeer resource.  Default value \"UseNodeIP\" means to configure the node IP as the source address.  \"None\" means not to configure a source address.", "type": "string"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:22Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "blockaffinities.crd.projectcalico.org", "resourceVersion": "14910", "uid": "06cd7d68-88ab-4033-afa9-926c872126a7"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "BlockAffinity", "listKind": "BlockAffinityList", "plural": "blockaffinities", "singular": "blockaffinity"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "BlockAffinitySpec contains the specification for a BlockAffinity resource.", "properties": {"cidr": {"type": "string"}, "deleted": {"description": "Deleted indicates that this block affinity is being deleted. This field is a string for compatibility with older releases that mistakenly treat this field as a string.", "type": "string"}, "node": {"type": "string"}, "state": {"type": "string"}}, "required": ["cidr", "deleted", "node", "state"], "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"annotations": {"controller-gen.kubebuilder.io/version": "(devel)"}, "creationTimestamp": "2021-11-10T18:46:22Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:controller-gen.kubebuilder.io/version": {}}}, "f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "caliconodestatuses.crd.projectcalico.org", "resourceVersion": "14913", "uid": "58871d45-1160-45c5-8c4a-e2b5b6c6713e"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "CalicoNodeStatus", "listKind": "CalicoNodeStatusList", "plural": "caliconodestatuses", "singular": "caliconodestatus"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "CalicoNodeStatusSpec contains the specification for a CalicoNodeStatus resource.", "properties": {"classes": {"description": "Classes declares the types of information to monitor for this calico/node, and allows for selective status reporting about certain subsets of information.", "items": {"type": "string"}, "type": "array"}, "node": {"description": "The node name identifies the Calico node instance for node status.", "type": "string"}, "updatePeriodSeconds": {"description": "UpdatePeriodSeconds is the period at which CalicoNodeStatus should be updated. Set to 0 to disable CalicoNodeStatus refresh. Maximum update period is one day.", "format": "int32", "type": "integer"}}, "type": "object"}, "status": {"description": "CalicoNodeStatusStatus defines the observed state of CalicoNodeStatus. No validation needed for status since it is updated by Calico.", "properties": {"agent": {"description": "Agent holds agent status on the node.", "properties": {"birdV4": {"description": "BIRDV4 represents the latest observed status of bird4.", "properties": {"lastBootTime": {"description": "LastBootTime holds the value of lastBootTime from bird.ctl output.", "type": "string"}, "lastReconfigurationTime": {"description": "LastReconfigurationTime holds the value of lastReconfigTime from bird.ctl output.", "type": "string"}, "routerID": {"description": "Router ID used by bird.", "type": "string"}, "state": {"description": "The state of the BGP Daemon.", "type": "string"}, "version": {"description": "Version of the BGP daemon", "type": "string"}}, "type": "object"}, "birdV6": {"description": "BIRDV6 represents the latest observed status of bird6.", "properties": {"lastBootTime": {"description": "LastBootTime holds the value of lastBootTime from bird.ctl output.", "type": "string"}, "lastReconfigurationTime": {"description": "LastReconfigurationTime holds the value of lastReconfigTime from bird.ctl output.", "type": "string"}, "routerID": {"description": "Router ID used by bird.", "type": "string"}, "state": {"description": "The state of the BGP Daemon.", "type": "string"}, "version": {"description": "Version of the BGP daemon", "type": "string"}}, "type": "object"}}, "type": "object"}, "bgp": {"description": "BGP holds node BGP status.", "properties": {"numberEstablishedV4": {"description": "The total number of IPv4 established bgp sessions.", "type": "integer"}, "numberEstablishedV6": {"description": "The total number of IPv6 established bgp sessions.", "type": "integer"}, "numberNotEstablishedV4": {"description": "The total number of IPv4 non-established bgp sessions.", "type": "integer"}, "numberNotEstablishedV6": {"description": "The total number of IPv6 non-established bgp sessions.", "type": "integer"}, "peersV4": {"description": "PeersV4 represents IPv4 BGP peers status on the node.", "items": {"description": "CalicoNodePeer contains the status of BGP peers on the node.", "properties": {"peerIP": {"description": "IP address of the peer whose condition we are reporting.", "type": "string"}, "since": {"description": "Since the state or reason last changed.", "type": "string"}, "state": {"description": "State is the BGP session state.", "type": "string"}, "type": {"description": "Type indicates whether this peer is configured via the node-to-node mesh, or via en explicit global or per-node BGPPeer object.", "type": "string"}}, "type": "object"}, "type": "array"}, "peersV6": {"description": "PeersV6 represents IPv6 BGP peers status on the node.", "items": {"description": "CalicoNodePeer contains the status of BGP peers on the node.", "properties": {"peerIP": {"description": "IP address of the peer whose condition we are reporting.", "type": "string"}, "since": {"description": "Since the state or reason last changed.", "type": "string"}, "state": {"description": "State is the BGP session state.", "type": "string"}, "type": {"description": "Type indicates whether this peer is configured via the node-to-node mesh, or via en explicit global or per-node BGPPeer object.", "type": "string"}}, "type": "object"}, "type": "array"}}, "required": ["numberEstablishedV4", "numberEstablishedV6", "numberNotEstablishedV4", "numberNotEstablishedV6"], "type": "object"}, "lastUpdated": {"description": "LastUpdated is a timestamp representing the server time when CalicoNodeStatus object last updated. It is represented in RFC3339 form and is in UTC.", "format": "date-time", "nullable": true, "type": "string"}, "routes": {"description": "Routes reports routes known to the Calico BGP daemon on the node.", "properties": {"routesV4": {"description": "RoutesV4 represents IPv4 routes on the node.", "items": {"description": "CalicoNodeRoute contains the status of BGP routes on the node.", "properties": {"destination": {"description": "Destination of the route.", "type": "string"}, "gateway": {"description": "Gateway for the destination.", "type": "string"}, "interface": {"description": "Interface for the destination", "type": "string"}, "learnedFrom": {"description": "LearnedFrom contains information regarding where this route originated.", "properties": {"peerIP": {"description": "If sourceType is NodeMesh or BGPPeer, IP address of the router that sent us this route.", "type": "string"}, "sourceType": {"description": "Type of the source where a route is learned from.", "type": "string"}}, "type": "object"}, "type": {"description": "Type indicates if the route is being used for forwarding or not.", "type": "string"}}, "type": "object"}, "type": "array"}, "routesV6": {"description": "RoutesV6 represents IPv6 routes on the node.", "items": {"description": "CalicoNodeRoute contains the status of BGP routes on the node.", "properties": {"destination": {"description": "Destination of the route.", "type": "string"}, "gateway": {"description": "Gateway for the destination.", "type": "string"}, "interface": {"description": "Interface for the destination", "type": "string"}, "learnedFrom": {"description": "LearnedFrom contains information regarding where this route originated.", "properties": {"peerIP": {"description": "If sourceType is NodeMesh or BGPPeer, IP address of the router that sent us this route.", "type": "string"}, "sourceType": {"description": "Type of the source where a route is learned from.", "type": "string"}}, "type": "object"}, "type": {"description": "Type indicates if the route is being used for forwarding or not.", "type": "string"}}, "type": "object"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:22Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "clusterinformations.crd.projectcalico.org", "resourceVersion": "14917", "uid": "8cf127ca-5b8e-4af4-a4cd-063c1bdc6983"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "ClusterInformation", "listKind": "ClusterInformationList", "plural": "clusterinformations", "singular": "clusterinformation"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"description": "ClusterInformation contains the cluster specific information.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "ClusterInformationSpec contains the values of describing the cluster.", "properties": {"calicoVersion": {"description": "CalicoVersion is the version of Calico that the cluster is running", "type": "string"}, "clusterGUID": {"description": "ClusterGUID is the GUID of the cluster", "type": "string"}, "clusterType": {"description": "ClusterType describes the type of the cluster", "type": "string"}, "datastoreReady": {"description": "DatastoreReady is used during significant datastore migrations to signal to components such as Felix that it should wait before accessing the datastore.", "type": "boolean"}, "variant": {"description": "Variant declares which variant of Calico should be active.", "type": "string"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:22Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "felixconfigurations.crd.projectcalico.org", "resourceVersion": "14920", "uid": "ca2fd756-d215-4577-83a2-e68a4565bcc2"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "FelixConfiguration", "listKind": "FelixConfigurationList", "plural": "felixconfigurations", "singular": "felixconfiguration"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"description": "Felix Configuration contains the configuration for Felix.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "FelixConfigurationSpec contains the values of the Felix configuration.", "properties": {"allowIPIPPacketsFromWorkloads": {"description": "AllowIPIPPacketsFromWorkloads controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads [Default: false]", "type": "boolean"}, "allowVXLANPacketsFromWorkloads": {"description": "AllowVXLANPacketsFromWorkloads controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads [Default: false]", "type": "boolean"}, "awsSrcDstCheck": {"description": "Set source-destination-check on AWS EC2 instances. Accepted value must be one of \"DoNothing\", \"Enable\" or \"Disable\". [Default: DoNothing]", "enum": ["DoNothing", "Enable", "Disable"], "type": "string"}, "bpfConnectTimeLoadBalancingEnabled": {"description": "BPFConnectTimeLoadBalancingEnabled when in BPF mode, controls whether Felix installs the connection-time load balancer.  The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.  The only reason to disable it is for debugging purposes.  [Default: true]", "type": "boolean"}, "bpfDataIfacePattern": {"description": "BPFDataIfacePattern is a regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network.  This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.  It should not match the workload interfaces (usually named cali...).", "type": "string"}, "bpfDisableUnprivileged": {"description": "BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF.  This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's. [Default: true]", "type": "boolean"}, "bpfEnabled": {"description": "BPFEnabled, if enabled Felix will use the BPF dataplane. [Default: false]", "type": "boolean"}, "bpfExtToServiceConnmark": {"description": "BPFExtToServiceConnmark in BPF mode, control a 32bit mark that is set on connections from an external client to a local service. This mark allows us to control how packets of that connection are routed within the host and how is routing intepreted by RPF check. [Default: 0]", "type": "integer"}, "bpfExternalServiceMode": {"description": "BPFExternalServiceMode in BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads.  If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node.  If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node.  In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.  [Default: Tunnel]", "type": "string"}, "bpfKubeProxyEndpointSlicesEnabled": {"description": "BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls whether Felix's embedded kube-proxy accepts EndpointSlices or not.", "type": "boolean"}, "bpfKubeProxyIptablesCleanupEnabled": {"description": "BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains.  Should only be enabled if kube-proxy is not running.  [Default: true]", "type": "boolean"}, "bpfKubeProxyMinSyncPeriod": {"description": "BPFKubeProxyMinSyncPeriod, in BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy.  Lower values give reduced set-up latency.  Higher values reduce Felix CPU usage by batching up more work.  [Default: 1s]", "type": "string"}, "bpfLogLevel": {"description": "BPFLogLevel controls the log level of the BPF programs when in BPF dataplane mode.  One of \"Off\", \"Info\", or \"Debug\".  The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`. [Default: Off].", "type": "string"}, "chainInsertMode": {"description": "ChainInsertMode controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed. [Default: insert]", "type": "string"}, "dataplaneDriver": {"type": "string"}, "debugDisableLogDropping": {"type": "boolean"}, "debugMemoryProfilePath": {"type": "string"}, "debugSimulateCalcGraphHangAfter": {"type": "string"}, "debugSimulateDataplaneHangAfter": {"type": "string"}, "defaultEndpointToHostAction": {"description": "DefaultEndpointToHostAction controls what happens to traffic that goes from a workload endpoint to the host itself (after the traffic hits the endpoint egress policy). By default Calico blocks traffic from workload endpoints to the host itself with an iptables \"DROP\" action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables \"INPUT\" chain; Calico will insert its rules at the top of that chain, then \"RETURN\" packets to the \"INPUT\" chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy. [Default: Drop]", "type": "string"}, "deviceRouteProtocol": {"description": "This defines the route protocol added to programmed device routes, by default this will be RTPROT_BOOT when left blank.", "type": "integer"}, "deviceRouteSourceAddress": {"description": "This is the source address to use on programmed device routes. By default the source address is left blank, leaving the kernel to choose the source address used.", "type": "string"}, "disableConntrackInvalidCheck": {"type": "boolean"}, "endpointReportingDelay": {"type": "string"}, "endpointReportingEnabled": {"type": "boolean"}, "externalNodesList": {"description": "ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes which may source tunnel traffic and have the tunneled traffic be accepted at calico nodes.", "items": {"type": "string"}, "type": "array"}, "failsafeInboundHostPorts": {"description": "FailsafeInboundHostPorts is a list of UDP/TCP ports and CIDRs that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For back-compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all inbound host ports, use the value none. The default value allows ssh access and DHCP. [Default: tcp:22, udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667]", "items": {"description": "ProtoPort is combination of protocol, port, and CIDR. Protocol and port must be specified.", "properties": {"net": {"type": "string"}, "port": {"type": "integer"}, "protocol": {"type": "string"}}, "required": ["port", "protocol"], "type": "object"}, "type": "array"}, "failsafeOutboundHostPorts": {"description": "FailsafeOutboundHostPorts is a list of UDP/TCP ports and CIDRs that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For back-compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all outbound host ports, use the value none. The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP and DNS. [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667, udp:53, udp:67]", "items": {"description": "ProtoPort is combination of protocol, port, and CIDR. Protocol and port must be specified.", "properties": {"net": {"type": "string"}, "port": {"type": "integer"}, "protocol": {"type": "string"}}, "required": ["port", "protocol"], "type": "object"}, "type": "array"}, "featureDetectOverride": {"description": "FeatureDetectOverride is used to override the feature detection. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". \"true\" or \"false\" will force the feature, empty or omitted values are auto-detected.", "type": "string"}, "genericXDPEnabled": {"description": "GenericXDPEnabled enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables. [Default: false]", "type": "boolean"}, "healthEnabled": {"type": "boolean"}, "healthHost": {"type": "string"}, "healthPort": {"type": "integer"}, "interfaceExclude": {"description": "InterfaceExclude is a comma-separated list of interfaces that Felix should exclude when monitoring for host endpoints. The default value ensures that Felix ignores Kubernetes' IPVS dummy interface, which is used internally by kube-proxy. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with '/'. For example having values '/^kube/,veth1' will exclude all interfaces that begin with 'kube' and also the interface 'veth1'. [Default: kube-ipvs0]", "type": "string"}, "interfacePrefix": {"description": "InterfacePrefix is the interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value. [Default: cali]", "type": "string"}, "interfaceRefreshInterval": {"description": "InterfaceRefreshInterval is the period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.", "type": "string"}, "ipipEnabled": {"type": "boolean"}, "ipipMTU": {"description": "IPIPMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]", "type": "integer"}, "ipsetsRefreshInterval": {"description": "IpsetsRefreshInterval is the period at which Felix re-checks all iptables state to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable iptables refresh. [Default: 90s]", "type": "string"}, "iptablesBackend": {"description": "IptablesBackend specifies which backend of iptables will be used. The default is legacy.", "type": "string"}, "iptablesFilterAllowAction": {"type": "string"}, "iptablesLockFilePath": {"description": "IptablesLockFilePath is the location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path). [Default: /run/xtables.lock]", "type": "string"}, "iptablesLockProbeInterval": {"description": "IptablesLockProbeInterval is the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU. [Default: 50ms]", "type": "string"}, "iptablesLockTimeout": {"description": "IptablesLockTimeout is the time that Felix will wait for the iptables lock, or 0, to disable. To use this feature, Felix must share the iptables lock file with all other processes that also take the lock. When running Felix inside a container, this requires the /run directory of the host to be mounted into the calico/node or calico/felix container. [Default: 0s disabled]", "type": "string"}, "iptablesMangleAllowAction": {"type": "string"}, "iptablesMarkMask": {"description": "IptablesMarkMask is the mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system. [Default: 0xff000000]", "format": "int32", "type": "integer"}, "iptablesNATOutgoingInterfaceFilter": {"type": "string"}, "iptablesPostWriteCheckInterval": {"description": "IptablesPostWriteCheckInterval is the period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock. [Default: 1s]", "type": "string"}, "iptablesRefreshInterval": {"description": "IptablesRefreshInterval is the period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage. [Default: 10s]", "type": "string"}, "ipv6Support": {"type": "boolean"}, "kubeNodePortRanges": {"description": "KubeNodePortRanges holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. [Default: 30000:32767].", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "logFilePath": {"description": "LogFilePath is the full path to the Felix log. Set to none to disable file logging. [Default: /var/log/calico/felix.log]", "type": "string"}, "logPrefix": {"description": "LogPrefix is the log prefix that Felix uses when rendering LOG rules. [Default: calico-packet]", "type": "string"}, "logSeverityFile": {"description": "LogSeverityFile is the log severity above which logs are sent to the log file. [Default: Info]", "type": "string"}, "logSeverityScreen": {"description": "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]", "type": "string"}, "logSeveritySys": {"description": "LogSeveritySys is the log severity above which logs are sent to the syslog. Set to None for no logging to syslog. [Default: Info]", "type": "string"}, "maxIpsetSize": {"type": "integer"}, "metadataAddr": {"description": "MetadataAddr is the IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case insensitive) means that Felix should not set up any NAT rule for the metadata path. [Default: 127.0.0.1]", "type": "string"}, "metadataPort": {"description": "MetadataPort is the port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed [Default: 8775].", "type": "integer"}, "mtuIfacePattern": {"description": "MTUIfacePattern is a regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).", "type": "string"}, "natOutgoingAddress": {"description": "NATOutgoingAddress specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (ie it uses the iptables MASQUERADE target)", "type": "string"}, "natPortRange": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "NATPortRange specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "netlinkTimeout": {"type": "string"}, "openstackRegion": {"description": "OpenstackRegion is the name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node. [Default: Empty]", "type": "string"}, "policySyncPathPrefix": {"description": "PolicySyncPathPrefix is used to by Felix to communicate policy changes to external services, like Application layer policy. [Default: Empty]", "type": "string"}, "prometheusGoMetricsEnabled": {"description": "PrometheusGoMetricsEnabled disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]", "type": "boolean"}, "prometheusMetricsEnabled": {"description": "PrometheusMetricsEnabled enables the Prometheus metrics server in Felix if set to true. [Default: false]", "type": "boolean"}, "prometheusMetricsHost": {"description": "PrometheusMetricsHost is the host that the Prometheus metrics server should bind to. [Default: empty]", "type": "string"}, "prometheusMetricsPort": {"description": "PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. [Default: 9091]", "type": "integer"}, "prometheusProcessMetricsEnabled": {"description": "PrometheusProcessMetricsEnabled disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]", "type": "boolean"}, "prometheusWireGuardMetricsEnabled": {"description": "PrometheusWireGuardMetricsEnabled disables wireguard metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]", "type": "boolean"}, "removeExternalRoutes": {"description": "Whether or not to remove device routes that have not been programmed by Felix. Disabling this will allow external applications to also add device routes. This is enabled by default which means we will remove externally added routes.", "type": "boolean"}, "reportingInterval": {"description": "ReportingInterval is the interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments. [Default: 30s]", "type": "string"}, "reportingTTL": {"description": "ReportingTTL is the time-to-live setting for process-wide status reports. [Default: 90s]", "type": "string"}, "routeRefreshInterval": {"description": "RouteRefreshInterval is the period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh. [Default: 90s]", "type": "string"}, "routeSource": {"description": "RouteSource configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.", "type": "string"}, "routeTableRange": {"description": "Calico programs additional Linux route tables for various purposes.  RouteTableRange specifies the indices of the route tables that Calico should use.", "properties": {"max": {"type": "integer"}, "min": {"type": "integer"}}, "required": ["max", "min"], "type": "object"}, "serviceLoopPrevention": {"description": "When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed. [Default: Drop]", "type": "string"}, "sidecarAccelerationEnabled": {"description": "SidecarAccelerationEnabled enables experimental sidecar acceleration [Default: false]", "type": "boolean"}, "usageReportingEnabled": {"description": "UsageReportingEnabled reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage server. For example, if a significant security vulnerability has been discovered in the version of Calico being used. [Default: true]", "type": "boolean"}, "usageReportingInitialDelay": {"description": "UsageReportingInitialDelay controls the minimum delay before Felix makes a report. [Default: 300s]", "type": "string"}, "usageReportingInterval": {"description": "UsageReportingInterval controls the interval at which Felix makes reports. [Default: 86400s]", "type": "string"}, "useInternalDataplaneDriver": {"type": "boolean"}, "vxlanEnabled": {"type": "boolean"}, "vxlanMTU": {"description": "VXLANMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]", "type": "integer"}, "vxlanPort": {"type": "integer"}, "vxlanVNI": {"type": "integer"}, "wireguardEnabled": {"description": "WireguardEnabled controls whether Wireguard is enabled. [Default: false]", "type": "boolean"}, "wireguardHostEncryptionEnabled": {"description": "WireguardHostEncryptionEnabled controls whether Wireguard host-to-host encryption is enabled. [Default: false]", "type": "boolean"}, "wireguardInterfaceName": {"description": "WireguardInterfaceName specifies the name to use for the Wireguard interface. [Default: wg.calico]", "type": "string"}, "wireguardListeningPort": {"description": "WireguardListeningPort controls the listening port used by Wireguard. [Default: 51820]", "type": "integer"}, "wireguardMTU": {"description": "WireguardMTU controls the MTU on the Wireguard interface. See Configuring MTU [Default: 1420]", "type": "integer"}, "wireguardRoutingRulePriority": {"description": "WireguardRoutingRulePriority controls the priority value to use for the Wireguard routing rule. [Default: 99]", "type": "integer"}, "xdpEnabled": {"description": "XDPEnabled enables XDP acceleration for suitable untracked incoming deny rules. [Default: true]", "type": "boolean"}, "xdpRefreshInterval": {"description": "XDPRefreshInterval is the period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh. [Default: 90s]", "type": "string"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:22Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:22Z"}], "name": "globalnetworkpolicies.crd.projectcalico.org", "resourceVersion": "14923", "uid": "73dedef3-1b6b-4adb-a511-73f6b82a4f96"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "GlobalNetworkPolicy", "listKind": "GlobalNetworkPolicyList", "plural": "globalnetworkpolicies", "singular": "globalnetworkpolicy"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"properties": {"applyOnForward": {"description": "ApplyOnForward indicates to apply the rules in this policy on forward traffic.", "type": "boolean"}, "doNotTrack": {"description": "DoNotTrack indicates whether packets matched by the rules in this policy should go through the data plane's connection tracking, such as Linux conntrack.  If True, the rules in this policy are applied before any data plane connection tracking, and packets allowed by this policy are marked as not to be tracked.", "type": "boolean"}, "egress": {"description": "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.", "items": {"description": "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.", "properties": {"action": {"type": "string"}, "destination": {"description": "Destination contains the match criteria that apply to destination entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}, "http": {"description": "HTTP contains match criteria that apply to HTTP requests.", "properties": {"methods": {"description": "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.", "items": {"type": "string"}, "type": "array"}, "paths": {"description": "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.", "items": {"description": "HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix", "properties": {"exact": {"type": "string"}, "prefix": {"type": "string"}}, "type": "object"}, "type": "array"}}, "type": "object"}, "icmp": {"description": "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "ipVersion": {"description": "IPVersion is an optional field that restricts the rule to only match a specific IP version.", "type": "integer"}, "metadata": {"description": "Metadata contains additional information for this rule", "properties": {"annotations": {"additionalProperties": {"type": "string"}, "description": "Annotations is a set of key value pairs that give extra information about the rule", "type": "object"}}, "type": "object"}, "notICMP": {"description": "NotICMP is the negated version of the ICMP field.", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "notProtocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "NotProtocol is the negated version of the Protocol field.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "protocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "source": {"description": "Source contains the match criteria that apply to source entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}}, "required": ["action"], "type": "object"}, "type": "array"}, "ingress": {"description": "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.", "items": {"description": "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.", "properties": {"action": {"type": "string"}, "destination": {"description": "Destination contains the match criteria that apply to destination entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}, "http": {"description": "HTTP contains match criteria that apply to HTTP requests.", "properties": {"methods": {"description": "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.", "items": {"type": "string"}, "type": "array"}, "paths": {"description": "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.", "items": {"description": "HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix", "properties": {"exact": {"type": "string"}, "prefix": {"type": "string"}}, "type": "object"}, "type": "array"}}, "type": "object"}, "icmp": {"description": "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "ipVersion": {"description": "IPVersion is an optional field that restricts the rule to only match a specific IP version.", "type": "integer"}, "metadata": {"description": "Metadata contains additional information for this rule", "properties": {"annotations": {"additionalProperties": {"type": "string"}, "description": "Annotations is a set of key value pairs that give extra information about the rule", "type": "object"}}, "type": "object"}, "notICMP": {"description": "NotICMP is the negated version of the ICMP field.", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "notProtocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "NotProtocol is the negated version of the Protocol field.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "protocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "source": {"description": "Source contains the match criteria that apply to source entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}}, "required": ["action"], "type": "object"}, "type": "array"}, "namespaceSelector": {"description": "NamespaceSelector is an optional field for an expression used to select a pod based on namespaces.", "type": "string"}, "order": {"description": "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\".", "type": "number"}, "preDNAT": {"description": "PreDNAT indicates to apply the rules in this policy before any DNAT.", "type": "boolean"}, "selector": {"description": "The selector is an expression used to pick pick out the endpoints that the policy should be applied to. \n Selector expressions follow this syntax: \n \tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"   ->  not equal; also matches if label is not present \tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\" \thas(label_name)  -> True if that label is present \t! expr -> negation of expr \texpr && expr  -> Short-circuit and \texpr || expr  -> Short-circuit or \t( expr ) -> parens for grouping \tall() or the empty selector -> matches all endpoints. \n Label names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters. \n Examples (with made-up labels): \n \ttype == \"webserver\" && deployment == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment != \"dev\" \t! has(label_name)", "type": "string"}, "serviceAccountSelector": {"description": "ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.", "type": "string"}, "types": {"description": "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress rules are present in the policy.  The default is: \n - [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are   also no Ingress rules) \n - [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules \n - [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules. \n When the policy is read back again, Types will always be one of these values, never empty or nil.", "items": {"description": "PolicyType enumerates the possible values of the PolicySpec Types field.", "type": "string"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "globalnetworksets.crd.projectcalico.org", "resourceVersion": "14925", "uid": "5b19352e-0360-4a04-b808-ed2f130a67a4"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "GlobalNetworkSet", "listKind": "GlobalNetworkSetList", "plural": "globalnetworksets", "singular": "globalnetworkset"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"description": "GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs that share labels to allow rules to refer to them via selectors.  The labels of GlobalNetworkSet are not namespaced.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "GlobalNetworkSetSpec contains the specification for a NetworkSet resource.", "properties": {"nets": {"description": "The list of IP networks that belong to this set.", "items": {"type": "string"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "hostendpoints.crd.projectcalico.org", "resourceVersion": "14929", "uid": "eeadf5c7-8e6b-47b2-bd38-faace0a08506"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "HostEndpoint", "listKind": "HostEndpointList", "plural": "hostendpoints", "singular": "hostendpoint"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "HostEndpointSpec contains the specification for a HostEndpoint resource.", "properties": {"expectedIPs": {"description": "The expected IP addresses (IPv4 and IPv6) of the endpoint. If \"InterfaceName\" is not present, Calico will look for an interface matching any of the IPs in the list and apply policy to that. Note: \tWhen using the selector match criteria in an ingress or egress security Policy \tor Profile, Calico converts the selector into a set of IP addresses. For host \tendpoints, the ExpectedIPs field is used for that purpose. (If only the interface \tname is specified, Calico does not learn the IPs of the interface for use in match \tcriteria.)", "items": {"type": "string"}, "type": "array"}, "interfaceName": {"description": "Either \"*\", or the name of a specific Linux interface to apply policy to; or empty.  \"*\" indicates that this HostEndpoint governs all traffic to, from or through the default network namespace of the host named by the \"Node\" field; entering and leaving that namespace via any interface, including those from/to non-host-networked local workloads. \n If InterfaceName is not \"*\", this HostEndpoint only governs traffic that enters or leaves the host through the specific interface named by InterfaceName, or - when InterfaceName is empty - through the specific interface that has one of the IPs in ExpectedIPs. Therefore, when InterfaceName is empty, at least one expected IP must be specified.  Only external interfaces (such as \"eth0\") are supported here; it isn't possible for a HostEndpoint to protect traffic through a specific local workload interface. \n Note: Only some kinds of policy are implemented for \"*\" HostEndpoints; initially just pre-DNAT policy.  Please check Calico documentation for the latest position.", "type": "string"}, "node": {"description": "The node name identifying the Calico node instance.", "type": "string"}, "ports": {"description": "Ports contains the endpoint's named ports, which may be referenced in security policy rules.", "items": {"properties": {"name": {"type": "string"}, "port": {"type": "integer"}, "protocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}}, "required": ["name", "port", "protocol"], "type": "object"}, "type": "array"}, "profiles": {"description": "A list of identifiers of security Profile objects that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.", "items": {"type": "string"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "ipamblocks.crd.projectcalico.org", "resourceVersion": "14932", "uid": "b81b590b-02bd-41f4-8a66-4882e7dc8f71"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "IPAMBlock", "listKind": "IPAMBlockList", "plural": "ipamblocks", "singular": "ipamblock"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "IPAMBlockSpec contains the specification for an IPAMBlock resource.", "properties": {"affinity": {"type": "string"}, "allocations": {"items": {"nullable": true, "type": "integer"}, "type": "array"}, "attributes": {"items": {"properties": {"handle_id": {"type": "string"}, "secondary": {"additionalProperties": {"type": "string"}, "type": "object"}}, "type": "object"}, "type": "array"}, "cidr": {"type": "string"}, "deleted": {"type": "boolean"}, "strictAffinity": {"type": "boolean"}, "unallocated": {"items": {"type": "integer"}, "type": "array"}}, "required": ["allocations", "attributes", "cidr", "strictAffinity", "unallocated"], "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "ipamconfigs.crd.projectcalico.org", "resourceVersion": "14934", "uid": "db76c207-45bc-4bb4-89c8-c38d8ac745f4"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "IPAMConfig", "listKind": "IPAMConfigList", "plural": "ipamconfigs", "singular": "ipamconfig"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "IPAMConfigSpec contains the specification for an IPAMConfig resource.", "properties": {"autoAllocateBlocks": {"type": "boolean"}, "maxBlocksPerHost": {"description": "MaxBlocksPerHost, if non-zero, is the max number of blocks that can be affine to each host.", "type": "integer"}, "strictAffinity": {"type": "boolean"}}, "required": ["autoAllocateBlocks", "strictAffinity"], "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "ipamhandles.crd.projectcalico.org", "resourceVersion": "14937", "uid": "117cf869-7f72-436d-b468-48649a5f9ddb"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "IPAMHandle", "listKind": "IPAMHandleList", "plural": "ipamhandles", "singular": "ipamhandle"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "IPAMHandleSpec contains the specification for an IPAMHandle resource.", "properties": {"block": {"additionalProperties": {"type": "integer"}, "type": "object"}, "deleted": {"type": "boolean"}, "handleID": {"type": "string"}}, "required": ["block", "handleID"], "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "ippools.crd.projectcalico.org", "resourceVersion": "14940", "uid": "57d74b73-5507-47ae-8f8b-20e48d168894"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "IPPool", "listKind": "IPPoolList", "plural": "ippools", "singular": "ippool"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "IPPoolSpec contains the specification for an IPPool resource.", "properties": {"allowedUses": {"description": "AllowedUse controls what the IP pool will be used for.  If not specified or empty, defaults to [\"Tunnel\", \"Workload\"] for back-compatibility", "items": {"type": "string"}, "type": "array"}, "blockSize": {"description": "The block size to use for IP address assignments from this pool. Defaults to 26 for IPv4 and 112 for IPv6.", "type": "integer"}, "cidr": {"description": "The pool CIDR.", "type": "string"}, "disableBGPExport": {"description": "Disable exporting routes from this IP Pool’s CIDR over BGP. [Default: false]", "type": "boolean"}, "disabled": {"description": "When disabled is true, Calico IPAM will not assign addresses from this pool.", "type": "boolean"}, "ipip": {"description": "Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.", "properties": {"enabled": {"description": "When enabled is true, ipip tunneling will be used to deliver packets to destinations within this pool.", "type": "boolean"}, "mode": {"description": "The IPIP mode.  This can be one of \"always\" or \"cross-subnet\".  A mode of \"always\" will also use IPIP tunneling for routing to destination IP addresses within this pool.  A mode of \"cross-subnet\" will only use IPIP tunneling when the destination node is on a different subnet to the originating node.  The default value (if not specified) is \"always\".", "type": "string"}}, "type": "object"}, "ipipMode": {"description": "Contains configuration for IPIP tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. IPIP tunneling is disabled).", "type": "string"}, "nat-outgoing": {"description": "Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.", "type": "boolean"}, "natOutgoing": {"description": "When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.", "type": "boolean"}, "nodeSelector": {"description": "Allows IPPool to allocate for a specific node by label selector.", "type": "string"}, "vxlanMode": {"description": "Contains configuration for VXLAN tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. VXLAN tunneling is disabled).", "type": "string"}}, "required": ["cidr"], "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "ipreservations.crd.projectcalico.org", "resourceVersion": "14944", "uid": "5d3209bf-7594-4ecc-a273-8c629c93643f"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "IPReservation", "listKind": "IPReservationList", "plural": "ipreservations", "singular": "ipreservation"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "IPReservationSpec contains the specification for an IPReservation resource.", "properties": {"reservedCIDRs": {"description": "ReservedCIDRs is a list of CIDRs and/or IP addresses that Calico IPAM will exclude from new allocations.", "items": {"type": "string"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "kubecontrollersconfigurations.crd.projectcalico.org", "resourceVersion": "14947", "uid": "351dbbf5-eea9-407c-9f8e-6f895fd36745"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "KubeControllersConfiguration", "listKind": "KubeControllersConfigurationList", "plural": "kubecontrollersconfigurations", "singular": "kubecontrollersconfiguration"}, "scope": "Cluster", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "KubeControllersConfigurationSpec contains the values of the Kubernetes controllers configuration.", "properties": {"controllers": {"description": "Controllers enables and configures individual Kubernetes controllers", "properties": {"namespace": {"description": "Namespace enables and configures the namespace controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}, "node": {"description": "Node enables and configures the node controller. Enabled by default, set to nil to disable.", "properties": {"hostEndpoint": {"description": "HostEndpoint controls syncing nodes to host endpoints. Disabled by default, set to nil to disable.", "properties": {"autoCreate": {"description": "AutoCreate enables automatic creation of host endpoints for every node. [Default: Disabled]", "type": "string"}}, "type": "object"}, "leakGracePeriod": {"description": "LeakGracePeriod is the period used by the controller to determine if an IP address has been leaked. Set to 0 to disable IP garbage collection. [Default: 15m]", "type": "string"}, "reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}, "syncLabels": {"description": "SyncLabels controls whether to copy Kubernetes node labels to Calico nodes. [Default: Enabled]", "type": "string"}}, "type": "object"}, "policy": {"description": "Policy enables and configures the policy controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}, "serviceAccount": {"description": "ServiceAccount enables and configures the service account controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}, "workloadEndpoint": {"description": "WorkloadEndpoint enables and configures the workload endpoint controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}}, "type": "object"}, "etcdV3CompactionPeriod": {"description": "EtcdV3CompactionPeriod is the period between etcdv3 compaction requests. Set to 0 to disable. [Default: 10m]", "type": "string"}, "healthChecks": {"description": "HealthChecks enables or disables support for health checks [Default: Enabled]", "type": "string"}, "logSeverityScreen": {"description": "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]", "type": "string"}, "prometheusMetricsPort": {"description": "PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. Set to 0 to disable. [Default: 9094]", "type": "integer"}}, "required": ["controllers"], "type": "object"}, "status": {"description": "KubeControllersConfigurationStatus represents the status of the configuration. It's useful for admins to be able to see the actual config that was applied, which can be modified by environment variables on the kube-controllers process.", "properties": {"environmentVars": {"additionalProperties": {"type": "string"}, "description": "EnvironmentVars contains the environment variables on the kube-controllers that influenced the RunningConfig.", "type": "object"}, "runningConfig": {"description": "RunningConfig contains the effective config that is running in the kube-controllers pod, after merging the API resource with any environment variables.", "properties": {"controllers": {"description": "Controllers enables and configures individual Kubernetes controllers", "properties": {"namespace": {"description": "Namespace enables and configures the namespace controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}, "node": {"description": "Node enables and configures the node controller. Enabled by default, set to nil to disable.", "properties": {"hostEndpoint": {"description": "HostEndpoint controls syncing nodes to host endpoints. Disabled by default, set to nil to disable.", "properties": {"autoCreate": {"description": "AutoCreate enables automatic creation of host endpoints for every node. [Default: Disabled]", "type": "string"}}, "type": "object"}, "leakGracePeriod": {"description": "LeakGracePeriod is the period used by the controller to determine if an IP address has been leaked. Set to 0 to disable IP garbage collection. [Default: 15m]", "type": "string"}, "reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}, "syncLabels": {"description": "SyncLabels controls whether to copy Kubernetes node labels to Calico nodes. [Default: Enabled]", "type": "string"}}, "type": "object"}, "policy": {"description": "Policy enables and configures the policy controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}, "serviceAccount": {"description": "ServiceAccount enables and configures the service account controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}, "workloadEndpoint": {"description": "WorkloadEndpoint enables and configures the workload endpoint controller. Enabled by default, set to nil to disable.", "properties": {"reconcilerPeriod": {"description": "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]", "type": "string"}}, "type": "object"}}, "type": "object"}, "etcdV3CompactionPeriod": {"description": "EtcdV3CompactionPeriod is the period between etcdv3 compaction requests. Set to 0 to disable. [Default: 10m]", "type": "string"}, "healthChecks": {"description": "HealthChecks enables or disables support for health checks [Default: Enabled]", "type": "string"}, "logSeverityScreen": {"description": "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]", "type": "string"}, "prometheusMetricsPort": {"description": "PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. Set to 0 to disable. [Default: 9094]", "type": "integer"}}, "required": ["controllers"], "type": "object"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "networkpolicies.crd.projectcalico.org", "resourceVersion": "14949", "uid": "dde42e92-ca77-4f1f-9d6a-0479d20c4325"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "NetworkPolicy", "listKind": "NetworkPolicyList", "plural": "networkpolicies", "singular": "networkpolicy"}, "scope": "Namespaced", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"properties": {"egress": {"description": "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.", "items": {"description": "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.", "properties": {"action": {"type": "string"}, "destination": {"description": "Destination contains the match criteria that apply to destination entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}, "http": {"description": "HTTP contains match criteria that apply to HTTP requests.", "properties": {"methods": {"description": "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.", "items": {"type": "string"}, "type": "array"}, "paths": {"description": "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.", "items": {"description": "HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix", "properties": {"exact": {"type": "string"}, "prefix": {"type": "string"}}, "type": "object"}, "type": "array"}}, "type": "object"}, "icmp": {"description": "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "ipVersion": {"description": "IPVersion is an optional field that restricts the rule to only match a specific IP version.", "type": "integer"}, "metadata": {"description": "Metadata contains additional information for this rule", "properties": {"annotations": {"additionalProperties": {"type": "string"}, "description": "Annotations is a set of key value pairs that give extra information about the rule", "type": "object"}}, "type": "object"}, "notICMP": {"description": "NotICMP is the negated version of the ICMP field.", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "notProtocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "NotProtocol is the negated version of the Protocol field.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "protocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "source": {"description": "Source contains the match criteria that apply to source entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}}, "required": ["action"], "type": "object"}, "type": "array"}, "ingress": {"description": "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.", "items": {"description": "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.", "properties": {"action": {"type": "string"}, "destination": {"description": "Destination contains the match criteria that apply to destination entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}, "http": {"description": "HTTP contains match criteria that apply to HTTP requests.", "properties": {"methods": {"description": "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.", "items": {"type": "string"}, "type": "array"}, "paths": {"description": "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.", "items": {"description": "HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix", "properties": {"exact": {"type": "string"}, "prefix": {"type": "string"}}, "type": "object"}, "type": "array"}}, "type": "object"}, "icmp": {"description": "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "ipVersion": {"description": "IPVersion is an optional field that restricts the rule to only match a specific IP version.", "type": "integer"}, "metadata": {"description": "Metadata contains additional information for this rule", "properties": {"annotations": {"additionalProperties": {"type": "string"}, "description": "Annotations is a set of key value pairs that give extra information about the rule", "type": "object"}}, "type": "object"}, "notICMP": {"description": "NotICMP is the negated version of the ICMP field.", "properties": {"code": {"description": "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.", "type": "integer"}, "type": {"description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).", "type": "integer"}}, "type": "object"}, "notProtocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "NotProtocol is the negated version of the Protocol field.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "protocol": {"anyOf": [{"type": "integer"}, {"type": "string"}], "description": "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.", "pattern": "^.*", "x-kubernetes-int-or-string": true}, "source": {"description": "Source contains the match criteria that apply to source entity.", "properties": {"namespaceSelector": {"description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.", "type": "string"}, "nets": {"description": "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.", "items": {"type": "string"}, "type": "array"}, "notNets": {"description": "NotNets is the negated version of the Nets field.", "items": {"type": "string"}, "type": "array"}, "notPorts": {"description": "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "notSelector": {"description": "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.", "type": "string"}, "ports": {"description": "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".", "items": {"anyOf": [{"type": "integer"}, {"type": "string"}], "pattern": "^.*", "x-kubernetes-int-or-string": true}, "type": "array"}, "selector": {"description": "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.", "type": "string"}, "serviceAccounts": {"description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.", "properties": {"names": {"description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.", "items": {"type": "string"}, "type": "array"}, "selector": {"description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.", "type": "string"}}, "type": "object"}, "services": {"description": "Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.", "properties": {"name": {"description": "Name specifies the name of a Kubernetes Service to match.", "type": "string"}, "namespace": {"description": "Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.", "type": "string"}}, "type": "object"}}, "type": "object"}}, "required": ["action"], "type": "object"}, "type": "array"}, "order": {"description": "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\".", "type": "number"}, "selector": {"description": "The selector is an expression used to pick pick out the endpoints that the policy should be applied to. \n Selector expressions follow this syntax: \n \tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"   ->  not equal; also matches if label is not present \tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\" \thas(label_name)  -> True if that label is present \t! expr -> negation of expr \texpr && expr  -> Short-circuit and \texpr || expr  -> Short-circuit or \t( expr ) -> parens for grouping \tall() or the empty selector -> matches all endpoints. \n Label names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters. \n Examples (with made-up labels): \n \ttype == \"webserver\" && deployment == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment != \"dev\" \t! has(label_name)", "type": "string"}, "serviceAccountSelector": {"description": "ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.", "type": "string"}, "types": {"description": "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress are present in the policy.  The default is: \n - [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are   also no Ingress rules) \n - [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules \n - [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules. \n When the policy is read back again, Types will always be one of these values, never empty or nil.", "items": {"description": "PolicyType enumerates the possible values of the PolicySpec Types field.", "type": "string"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apiextensions.k8s.io/v1", "kind": "CustomResourceDefinition", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "managedFields": [{"apiVersion": "apiextensions.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:spec": {"f:conversion": {".": {}, "f:strategy": {}}, "f:group": {}, "f:names": {"f:kind": {}, "f:listKind": {}, "f:plural": {}, "f:singular": {}}, "f:scope": {}, "f:versions": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "networksets.crd.projectcalico.org", "resourceVersion": "14951", "uid": "e6cf8a85-8faf-4fe1-814e-78ed120dbbcf"}, "spec": {"conversion": {"strategy": "None"}, "group": "crd.projectcalico.org", "names": {"kind": "NetworkSet", "listKind": "NetworkSetList", "plural": "networksets", "singular": "networkset"}, "scope": "Namespaced", "versions": [{"name": "v1", "schema": {"openAPIV3Schema": {"description": "NetworkSet is the Namespaced-equivalent of the GlobalNetworkSet.", "properties": {"apiVersion": {"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", "type": "string"}, "kind": {"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", "type": "string"}, "metadata": {"type": "object"}, "spec": {"description": "NetworkSetSpec contains the specification for a NetworkSet resource.", "properties": {"nets": {"description": "The list of IP networks that belong to this set.", "items": {"type": "string"}, "type": "array"}}, "type": "object"}}, "type": "object"}}, "served": true, "storage": true}]}, "status": {"acceptedNames": {"kind": "", "plural": ""}, "conditions": null, "storedVersions": ["v1"]}}}, {"changed": true, "method": "create", "result": {"apiVersion": "rbac.authorization.k8s.io/v1", "kind": "ClusterRole", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "managedFields": [{"apiVersion": "rbac.authorization.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:rules": {}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "calico-kube-controllers", "resourceVersion": "14954", "uid": "f162bce2-da9f-46eb-b0cb-3852eaed7432"}, "rules": [{"apiGroups": [""], "resources": ["nodes"], "verbs": ["watch", "list", "get"]}, {"apiGroups": [""], "resources": ["pods"], "verbs": ["get", "list", "watch"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["ippools", "ipreservations"], "verbs": ["list"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["blockaffinities", "ipamblocks", "ipamhandles"], "verbs": ["get", "list", "create", "update", "delete", "watch"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["hostendpoints"], "verbs": ["get", "list", "create", "update", "delete"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["clusterinformations"], "verbs": ["get", "create", "update"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["kubecontrollersconfigurations"], "verbs": ["get", "create", "update", "watch"]}]}}, {"changed": true, "method": "create", "result": {"apiVersion": "rbac.authorization.k8s.io/v1", "kind": "ClusterRoleBinding", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "managedFields": [{"apiVersion": "rbac.authorization.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:roleRef": {"f:apiGroup": {}, "f:kind": {}, "f:name": {}}, "f:subjects": {}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "calico-kube-controllers", "resourceVersion": "14956", "uid": "3d8f1d7b-5140-4002-814f-5dbb86d0988f"}, "roleRef": {"apiGroup": "rbac.authorization.k8s.io", "kind": "ClusterRole", "name": "calico-kube-controllers"}, "subjects": [{"kind": "ServiceAccount", "name": "calico-kube-controllers", "namespace": "kube-system"}]}}, {"changed": true, "method": "create", "result": {"apiVersion": "rbac.authorization.k8s.io/v1", "kind": "ClusterRole", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "managedFields": [{"apiVersion": "rbac.authorization.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:rules": {}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "calico-node", "resourceVersion": "14958", "uid": "2732ca37-98bd-4177-8fe8-5d4517011041"}, "rules": [{"apiGroups": [""], "resources": ["pods", "nodes", "namespaces"], "verbs": ["get"]}, {"apiGroups": ["discovery.k8s.io"], "resources": ["endpointslices"], "verbs": ["watch", "list"]}, {"apiGroups": [""], "resources": ["endpoints", "services"], "verbs": ["watch", "list", "get"]}, {"apiGroups": [""], "resources": ["configmaps"], "verbs": ["get"]}, {"apiGroups": [""], "resources": ["nodes/status"], "verbs": ["patch", "update"]}, {"apiGroups": ["networking.k8s.io"], "resources": ["networkpolicies"], "verbs": ["watch", "list"]}, {"apiGroups": [""], "resources": ["pods", "namespaces", "serviceaccounts"], "verbs": ["list", "watch"]}, {"apiGroups": [""], "resources": ["pods/status"], "verbs": ["patch"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["globalfelixconfigs", "felixconfigurations", "bgppeers", "globalbgpconfigs", "bgpconfigurations", "ippools", "ipreservations", "ipamblocks", "globalnetworkpolicies", "globalnetworksets", "networkpolicies", "networksets", "clusterinformations", "hostendpoints", "blockaffinities", "caliconodestatuses"], "verbs": ["get", "list", "watch"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["ippools", "felixconfigurations", "clusterinformations"], "verbs": ["create", "update"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["caliconodestatuses"], "verbs": ["update"]}, {"apiGroups": [""], "resources": ["nodes"], "verbs": ["get", "list", "watch"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["bgpconfigurations", "bgppeers"], "verbs": ["create", "update"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["blockaffinities", "ipamblocks", "ipamhandles"], "verbs": ["get", "list", "create", "update", "delete"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["ipamconfigs"], "verbs": ["get"]}, {"apiGroups": ["crd.projectcalico.org"], "resources": ["blockaffinities"], "verbs": ["watch"]}, {"apiGroups": ["apps"], "resources": ["daemonsets"], "verbs": ["get"]}]}}, {"changed": true, "method": "create", "result": {"apiVersion": "rbac.authorization.k8s.io/v1", "kind": "ClusterRoleBinding", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "managedFields": [{"apiVersion": "rbac.authorization.k8s.io/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:roleRef": {"f:apiGroup": {}, "f:kind": {}, "f:name": {}}, "f:subjects": {}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "calico-node", "resourceVersion": "14959", "uid": "1e6a2707-aa4e-42f8-96e0-0e5828ed7d63"}, "roleRef": {"apiGroup": "rbac.authorization.k8s.io", "kind": "ClusterRole", "name": "calico-node"}, "subjects": [{"kind": "ServiceAccount", "name": "calico-node", "namespace": "kube-system"}]}}, {"changed": true, "method": "create", "result": {"apiVersion": "apps/v1", "kind": "DaemonSet", "metadata": {"annotations": {"deprecated.daemonset.template.generation": "1"}, "creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "labels": {"k8s-app": "calico-node"}, "managedFields": [{"apiVersion": "apps/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:deprecated.daemonset.template.generation": {}}, "f:labels": {".": {}, "f:k8s-app": {}}}, "f:spec": {"f:revisionHistoryLimit": {}, "f:selector": {}, "f:template": {"f:metadata": {"f:labels": {".": {}, "f:k8s-app": {}}}, "f:spec": {"f:containers": {"k:{\"name\":\"calico-node\"}": {".": {}, "f:env": {".": {}, "k:{\"name\":\"CALICO_DISABLE_FILE_LOGGING\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"CALICO_IPV4POOL_IPIP\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"CALICO_IPV4POOL_VXLAN\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"CALICO_NETWORKING_BACKEND\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:configMapKeyRef": {".": {}, "f:key": {}, "f:name": {}}}}, "k:{\"name\":\"CLUSTER_TYPE\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"DATASTORE_TYPE\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"FELIX_DEFAULTENDPOINTTOHOSTACTION\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"FELIX_HEALTHENABLED\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"FELIX_IPINIPMTU\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:configMapKeyRef": {".": {}, "f:key": {}, "f:name": {}}}}, "k:{\"name\":\"FELIX_IPV6SUPPORT\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"FELIX_VXLANMTU\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:configMapKeyRef": {".": {}, "f:key": {}, "f:name": {}}}}, "k:{\"name\":\"FELIX_WIREGUARDMTU\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:configMapKeyRef": {".": {}, "f:key": {}, "f:name": {}}}}, "k:{\"name\":\"IP\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"IP_AUTODETECTION_METHOD\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"NODENAME\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:fieldRef": {".": {}, "f:apiVersion": {}, "f:fieldPath": {}}}}, "k:{\"name\":\"WAIT_FOR_DATASTORE\"}": {".": {}, "f:name": {}, "f:value": {}}}, "f:envFrom": {}, "f:image": {}, "f:imagePullPolicy": {}, "f:lifecycle": {".": {}, "f:preStop": {".": {}, "f:exec": {".": {}, "f:command": {}}}}, "f:livenessProbe": {".": {}, "f:exec": {".": {}, "f:command": {}}, "f:failureThreshold": {}, "f:initialDelaySeconds": {}, "f:periodSeconds": {}, "f:successThreshold": {}, "f:timeoutSeconds": {}}, "f:name": {}, "f:readinessProbe": {".": {}, "f:exec": {".": {}, "f:command": {}}, "f:failureThreshold": {}, "f:periodSeconds": {}, "f:successThreshold": {}, "f:timeoutSeconds": {}}, "f:resources": {".": {}, "f:requests": {".": {}, "f:cpu": {}}}, "f:securityContext": {".": {}, "f:privileged": {}}, "f:terminationMessagePath": {}, "f:terminationMessagePolicy": {}, "f:volumeMounts": {".": {}, "k:{\"mountPath\":\"/host/etc/cni/net.d\"}": {".": {}, "f:mountPath": {}, "f:name": {}}, "k:{\"mountPath\":\"/lib/modules\"}": {".": {}, "f:mountPath": {}, "f:name": {}, "f:readOnly": {}}, "k:{\"mountPath\":\"/run/xtables.lock\"}": {".": {}, "f:mountPath": {}, "f:name": {}}, "k:{\"mountPath\":\"/sys/fs/\"}": {".": {}, "f:mountPath": {}, "f:mountPropagation": {}, "f:name": {}}, "k:{\"mountPath\":\"/var/lib/calico\"}": {".": {}, "f:mountPath": {}, "f:name": {}}, "k:{\"mountPath\":\"/var/log/calico/cni\"}": {".": {}, "f:mountPath": {}, "f:name": {}, "f:readOnly": {}}, "k:{\"mountPath\":\"/var/run/calico\"}": {".": {}, "f:mountPath": {}, "f:name": {}}, "k:{\"mountPath\":\"/var/run/nodeagent\"}": {".": {}, "f:mountPath": {}, "f:name": {}}}}}, "f:dnsPolicy": {}, "f:hostNetwork": {}, "f:initContainers": {".": {}, "k:{\"name\":\"flexvol-driver\"}": {".": {}, "f:image": {}, "f:imagePullPolicy": {}, "f:name": {}, "f:resources": {}, "f:securityContext": {".": {}, "f:privileged": {}}, "f:terminationMessagePath": {}, "f:terminationMessagePolicy": {}, "f:volumeMounts": {".": {}, "k:{\"mountPath\":\"/host/driver\"}": {".": {}, "f:mountPath": {}, "f:name": {}}}}, "k:{\"name\":\"install-cni\"}": {".": {}, "f:command": {}, "f:env": {".": {}, "k:{\"name\":\"CNI_CONF_NAME\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"CNI_MTU\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:configMapKeyRef": {".": {}, "f:key": {}, "f:name": {}}}}, "k:{\"name\":\"CNI_NETWORK_CONFIG\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:configMapKeyRef": {".": {}, "f:key": {}, "f:name": {}}}}, "k:{\"name\":\"KUBERNETES_NODE_NAME\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:fieldRef": {".": {}, "f:apiVersion": {}, "f:fieldPath": {}}}}, "k:{\"name\":\"SLEEP\"}": {".": {}, "f:name": {}, "f:value": {}}}, "f:envFrom": {}, "f:image": {}, "f:imagePullPolicy": {}, "f:name": {}, "f:resources": {}, "f:securityContext": {".": {}, "f:privileged": {}}, "f:terminationMessagePath": {}, "f:terminationMessagePolicy": {}, "f:volumeMounts": {".": {}, "k:{\"mountPath\":\"/host/etc/cni/net.d\"}": {".": {}, "f:mountPath": {}, "f:name": {}}, "k:{\"mountPath\":\"/host/opt/cni/bin\"}": {".": {}, "f:mountPath": {}, "f:name": {}}}}, "k:{\"name\":\"upgrade-ipam\"}": {".": {}, "f:command": {}, "f:env": {".": {}, "k:{\"name\":\"CALICO_NETWORKING_BACKEND\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:configMapKeyRef": {".": {}, "f:key": {}, "f:name": {}}}}, "k:{\"name\":\"KUBERNETES_NODE_NAME\"}": {".": {}, "f:name": {}, "f:valueFrom": {".": {}, "f:fieldRef": {".": {}, "f:apiVersion": {}, "f:fieldPath": {}}}}}, "f:envFrom": {}, "f:image": {}, "f:imagePullPolicy": {}, "f:name": {}, "f:resources": {}, "f:securityContext": {".": {}, "f:privileged": {}}, "f:terminationMessagePath": {}, "f:terminationMessagePolicy": {}, "f:volumeMounts": {".": {}, "k:{\"mountPath\":\"/host/opt/cni/bin\"}": {".": {}, "f:mountPath": {}, "f:name": {}}, "k:{\"mountPath\":\"/var/lib/cni/networks\"}": {".": {}, "f:mountPath": {}, "f:name": {}}}}}, "f:nodeSelector": {".": {}, "f:kubernetes.io/os": {}}, "f:priorityClassName": {}, "f:restartPolicy": {}, "f:schedulerName": {}, "f:securityContext": {}, "f:serviceAccount": {}, "f:serviceAccountName": {}, "f:terminationGracePeriodSeconds": {}, "f:tolerations": {}, "f:volumes": {".": {}, "k:{\"name\":\"cni-bin-dir\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"cni-log-dir\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"cni-net-dir\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"flexvol-driver-host\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"host-local-net-dir\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"lib-modules\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"policysync\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"sysfs\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"var-lib-calico\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"var-run-calico\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}, "k:{\"name\":\"xtables-lock\"}": {".": {}, "f:hostPath": {".": {}, "f:path": {}, "f:type": {}}, "f:name": {}}}}}, "f:updateStrategy": {"f:rollingUpdate": {".": {}, "f:maxSurge": {}, "f:maxUnavailable": {}}, "f:type": {}}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "calico-node", "namespace": "kube-system", "resourceVersion": "14960", "uid": "bed160ac-0c64-4994-abd9-c5a44eff4df0"}, "spec": {"revisionHistoryLimit": 10, "selector": {"matchLabels": {"k8s-app": "calico-node"}}, "template": {"metadata": {"creationTimestamp": null, "labels": {"k8s-app": "calico-node"}}, "spec": {"containers": [{"env": [{"name": "DATASTORE_TYPE", "value": "kubernetes"}, {"name": "WAIT_FOR_DATASTORE", "value": "true"}, {"name": "NODENAME", "valueFrom": {"fieldRef": {"apiVersion": "v1", "fieldPath": "spec.nodeName"}}}, {"name": "CALICO_NETWORKING_BACKEND", "valueFrom": {"configMapKeyRef": {"key": "calico_backend", "name": "calico-config"}}}, {"name": "CLUSTER_TYPE", "value": "k8s,bgp"}, {"name": "IP", "value": "autodetect"}, {"name": "CALICO_IPV4POOL_IPIP", "value": "Always"}, {"name": "CALICO_IPV4POOL_VXLAN", "value": "Never"}, {"name": "FELIX_IPINIPMTU", "valueFrom": {"configMapKeyRef": {"key": "veth_mtu", "name": "calico-config"}}}, {"name": "FELIX_VXLANMTU", "valueFrom": {"configMapKeyRef": {"key": "veth_mtu", "name": "calico-config"}}}, {"name": "FELIX_WIREGUARDMTU", "valueFrom": {"configMapKeyRef": {"key": "veth_mtu", "name": "calico-config"}}}, {"name": "IP_AUTODETECTION_METHOD", "value": "cidr=192.168.111.1/24"}, {"name": "CALICO_DISABLE_FILE_LOGGING", "value": "true"}, {"name": "FELIX_DEFAULTENDPOINTTOHOSTACTION", "value": "ACCEPT"}, {"name": "FELIX_IPV6SUPPORT", "value": "false"}, {"name": "FELIX_HEALTHENABLED", "value": "true"}], "envFrom": [{"configMapRef": {"name": "kubernetes-services-endpoint", "optional": true}}], "image": "docker.io/calico/node:v3.21.0", "imagePullPolicy": "IfNotPresent", "lifecycle": {"preStop": {"exec": {"command": ["/bin/calico-node", "-shutdown"]}}}, "livenessProbe": {"exec": {"command": ["/bin/calico-node", "-felix-live", "-bird-live"]}, "failureThreshold": 6, "initialDelaySeconds": 10, "periodSeconds": 10, "successThreshold": 1, "timeoutSeconds": 10}, "name": "calico-node", "readinessProbe": {"exec": {"command": ["/bin/calico-node", "-felix-ready", "-bird-ready"]}, "failureThreshold": 3, "periodSeconds": 10, "successThreshold": 1, "timeoutSeconds": 10}, "resources": {"requests": {"cpu": "250m"}}, "securityContext": {"privileged": true}, "terminationMessagePath": "/dev/termination-log", "terminationMessagePolicy": "File", "volumeMounts": [{"mountPath": "/host/etc/cni/net.d", "name": "cni-net-dir"}, {"mountPath": "/lib/modules", "name": "lib-modules", "readOnly": true}, {"mountPath": "/run/xtables.lock", "name": "xtables-lock"}, {"mountPath": "/var/run/calico", "name": "var-run-calico"}, {"mountPath": "/var/lib/calico", "name": "var-lib-calico"}, {"mountPath": "/var/run/nodeagent", "name": "policysync"}, {"mountPath": "/sys/fs/", "mountPropagation": "Bidirectional", "name": "sysfs"}, {"mountPath": "/var/log/calico/cni", "name": "cni-log-dir", "readOnly": true}]}], "dnsPolicy": "ClusterFirst", "hostNetwork": true, "initContainers": [{"command": ["/opt/cni/bin/calico-ipam", "-upgrade"], "env": [{"name": "KUBERNETES_NODE_NAME", "valueFrom": {"fieldRef": {"apiVersion": "v1", "fieldPath": "spec.nodeName"}}}, {"name": "CALICO_NETWORKING_BACKEND", "valueFrom": {"configMapKeyRef": {"key": "calico_backend", "name": "calico-config"}}}], "envFrom": [{"configMapRef": {"name": "kubernetes-services-endpoint", "optional": true}}], "image": "docker.io/calico/cni:v3.21.0", "imagePullPolicy": "IfNotPresent", "name": "upgrade-ipam", "resources": {}, "securityContext": {"privileged": true}, "terminationMessagePath": "/dev/termination-log", "terminationMessagePolicy": "File", "volumeMounts": [{"mountPath": "/var/lib/cni/networks", "name": "host-local-net-dir"}, {"mountPath": "/host/opt/cni/bin", "name": "cni-bin-dir"}]}, {"command": ["/opt/cni/bin/install"], "env": [{"name": "CNI_CONF_NAME", "value": "10-calico.conflist"}, {"name": "CNI_NETWORK_CONFIG", "valueFrom": {"configMapKeyRef": {"key": "cni_network_config", "name": "calico-config"}}}, {"name": "KUBERNETES_NODE_NAME", "valueFrom": {"fieldRef": {"apiVersion": "v1", "fieldPath": "spec.nodeName"}}}, {"name": "CNI_MTU", "valueFrom": {"configMapKeyRef": {"key": "veth_mtu", "name": "calico-config"}}}, {"name": "SLEEP", "value": "false"}], "envFrom": [{"configMapRef": {"name": "kubernetes-services-endpoint", "optional": true}}], "image": "docker.io/calico/cni:v3.21.0", "imagePullPolicy": "IfNotPresent", "name": "install-cni", "resources": {}, "securityContext": {"privileged": true}, "terminationMessagePath": "/dev/termination-log", "terminationMessagePolicy": "File", "volumeMounts": [{"mountPath": "/host/opt/cni/bin", "name": "cni-bin-dir"}, {"mountPath": "/host/etc/cni/net.d", "name": "cni-net-dir"}]}, {"image": "docker.io/calico/pod2daemon-flexvol:v3.21.0", "imagePullPolicy": "IfNotPresent", "name": "flexvol-driver", "resources": {}, "securityContext": {"privileged": true}, "terminationMessagePath": "/dev/termination-log", "terminationMessagePolicy": "File", "volumeMounts": [{"mountPath": "/host/driver", "name": "flexvol-driver-host"}]}], "nodeSelector": {"kubernetes.io/os": "linux"}, "priorityClassName": "system-node-critical", "restartPolicy": "Always", "schedulerName": "default-scheduler", "securityContext": {}, "serviceAccount": "calico-node", "serviceAccountName": "calico-node", "terminationGracePeriodSeconds": 0, "tolerations": [{"effect": "NoSchedule", "operator": "Exists"}, {"key": "CriticalAddonsOnly", "operator": "Exists"}, {"effect": "NoExecute", "operator": "Exists"}], "volumes": [{"hostPath": {"path": "/lib/modules", "type": ""}, "name": "lib-modules"}, {"hostPath": {"path": "/var/run/calico", "type": ""}, "name": "var-run-calico"}, {"hostPath": {"path": "/var/lib/calico", "type": ""}, "name": "var-lib-calico"}, {"hostPath": {"path": "/run/xtables.lock", "type": "FileOrCreate"}, "name": "xtables-lock"}, {"hostPath": {"path": "/sys/fs/", "type": "DirectoryOrCreate"}, "name": "sysfs"}, {"hostPath": {"path": "/opt/cni/bin", "type": ""}, "name": "cni-bin-dir"}, {"hostPath": {"path": "/etc/cni/net.d", "type": ""}, "name": "cni-net-dir"}, {"hostPath": {"path": "/var/log/calico/cni", "type": ""}, "name": "cni-log-dir"}, {"hostPath": {"path": "/var/lib/cni/networks", "type": ""}, "name": "host-local-net-dir"}, {"hostPath": {"path": "/var/run/nodeagent", "type": "DirectoryOrCreate"}, "name": "policysync"}, {"hostPath": {"path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds", "type": "DirectoryOrCreate"}, "name": "flexvol-driver-host"}]}}, "updateStrategy": {"rollingUpdate": {"maxSurge": 0, "maxUnavailable": 1}, "type": "RollingUpdate"}}, "status": {"currentNumberScheduled": 0, "desiredNumberScheduled": 0, "numberMisscheduled": 0, "numberReady": 0}}}, {"changed": true, "method": "create", "result": {"apiVersion": "v1", "kind": "ServiceAccount", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "name": "calico-node", "namespace": "kube-system", "resourceVersion": "14961", "uid": "3cf6e71d-1534-4461-aaef-d75ca9ea34a1"}}}, {"changed": true, "method": "create", "result": {"apiVersion": "apps/v1", "kind": "Deployment", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "labels": {"k8s-app": "calico-kube-controllers"}, "managedFields": [{"apiVersion": "apps/v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:k8s-app": {}}}, "f:spec": {"f:progressDeadlineSeconds": {}, "f:replicas": {}, "f:revisionHistoryLimit": {}, "f:selector": {}, "f:strategy": {"f:type": {}}, "f:template": {"f:metadata": {"f:labels": {".": {}, "f:k8s-app": {}}, "f:name": {}, "f:namespace": {}}, "f:spec": {"f:containers": {"k:{\"name\":\"calico-kube-controllers\"}": {".": {}, "f:env": {".": {}, "k:{\"name\":\"DATASTORE_TYPE\"}": {".": {}, "f:name": {}, "f:value": {}}, "k:{\"name\":\"ENABLED_CONTROLLERS\"}": {".": {}, "f:name": {}, "f:value": {}}}, "f:image": {}, "f:imagePullPolicy": {}, "f:livenessProbe": {".": {}, "f:exec": {".": {}, "f:command": {}}, "f:failureThreshold": {}, "f:initialDelaySeconds": {}, "f:periodSeconds": {}, "f:successThreshold": {}, "f:timeoutSeconds": {}}, "f:name": {}, "f:readinessProbe": {".": {}, "f:exec": {".": {}, "f:command": {}}, "f:failureThreshold": {}, "f:periodSeconds": {}, "f:successThreshold": {}, "f:timeoutSeconds": {}}, "f:resources": {}, "f:terminationMessagePath": {}, "f:terminationMessagePolicy": {}}}, "f:dnsPolicy": {}, "f:nodeSelector": {".": {}, "f:kubernetes.io/os": {}}, "f:priorityClassName": {}, "f:restartPolicy": {}, "f:schedulerName": {}, "f:securityContext": {}, "f:serviceAccount": {}, "f:serviceAccountName": {}, "f:terminationGracePeriodSeconds": {}, "f:tolerations": {}}}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "calico-kube-controllers", "namespace": "kube-system", "resourceVersion": "14962", "uid": "d1598714-0191-40b3-9dee-5fdd2b67fd1a"}, "spec": {"progressDeadlineSeconds": 600, "replicas": 1, "revisionHistoryLimit": 10, "selector": {"matchLabels": {"k8s-app": "calico-kube-controllers"}}, "strategy": {"type": "Recreate"}, "template": {"metadata": {"creationTimestamp": null, "labels": {"k8s-app": "calico-kube-controllers"}, "name": "calico-kube-controllers", "namespace": "kube-system"}, "spec": {"containers": [{"env": [{"name": "ENABLED_CONTROLLERS", "value": "node"}, {"name": "DATASTORE_TYPE", "value": "kubernetes"}], "image": "docker.io/calico/kube-controllers:v3.21.0", "imagePullPolicy": "IfNotPresent", "livenessProbe": {"exec": {"command": ["/usr/bin/check-status", "-l"]}, "failureThreshold": 6, "initialDelaySeconds": 10, "periodSeconds": 10, "successThreshold": 1, "timeoutSeconds": 10}, "name": "calico-kube-controllers", "readinessProbe": {"exec": {"command": ["/usr/bin/check-status", "-r"]}, "failureThreshold": 3, "periodSeconds": 10, "successThreshold": 1, "timeoutSeconds": 1}, "resources": {}, "terminationMessagePath": "/dev/termination-log", "terminationMessagePolicy": "File"}], "dnsPolicy": "ClusterFirst", "nodeSelector": {"kubernetes.io/os": "linux"}, "priorityClassName": "system-cluster-critical", "restartPolicy": "Always", "schedulerName": "default-scheduler", "securityContext": {}, "serviceAccount": "calico-kube-controllers", "serviceAccountName": "calico-kube-controllers", "terminationGracePeriodSeconds": 30, "tolerations": [{"key": "CriticalAddonsOnly", "operator": "Exists"}, {"effect": "NoSchedule", "key": "node-role.kubernetes.io/master"}]}}}, "status": {}}}, {"changed": true, "method": "create", "result": {"apiVersion": "v1", "kind": "ServiceAccount", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "name": "calico-kube-controllers", "namespace": "kube-system", "resourceVersion": "14963", "uid": "906bc33b-6424-423a-9b66-ab8392c5d4d6"}}}, {"changed": true, "method": "create", "result": {"apiVersion": "policy/v1beta1", "kind": "PodDisruptionBudget", "metadata": {"creationTimestamp": "2021-11-10T18:46:23Z", "generation": 1, "labels": {"k8s-app": "calico-kube-controllers"}, "managedFields": [{"apiVersion": "policy/v1beta1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:k8s-app": {}}}, "f:spec": {"f:maxUnavailable": {}, "f:selector": {}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:46:23Z"}], "name": "calico-kube-controllers", "namespace": "kube-system", "resourceVersion": "14964", "uid": "2d98bedb-efa6-4884-8bab-ea9054cc23fa"}, "spec": {"maxUnavailable": 1, "selector": {"matchLabels": {"k8s-app": "calico-kube-controllers"}}}, "status": {"currentHealthy": 0, "desiredHealthy": 0, "disruptionsAllowed": 0, "expectedPods": 0}}}]}}[0m
Wednesday 10 November 2021  18:46:23 +0000 (0:00:02.497)       0:00:16.199 **** 

TASK [v1aX_integration_test : Wait for all pods to be in running state] ********
[0;32mok: [localhost] => {"api_found": true, "attempts": 1, "changed": false, "resources": []}[0m
Wednesday 10 November 2021  18:46:24 +0000 (0:00:00.818)       0:00:17.017 **** 

TASK [v1aX_integration_test : Wait for nodes to be in ready state] *************
[0;32mok: [localhost] => {"api_found": true, "attempts": 1, "changed": false, "resources": [{"apiVersion": "v1", "kind": "Node", "metadata": {"annotations": {"cluster.x-k8s.io/cluster-name": "test1", "cluster.x-k8s.io/cluster-namespace": "metal3", "cluster.x-k8s.io/machine": "test1-849bcb9bdc-mt9bv", "cluster.x-k8s.io/owner-kind": "MachineSet", "cluster.x-k8s.io/owner-name": "test1-849bcb9bdc", "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/crio/crio.sock", "node.alpha.kubernetes.io/ttl": "0", "volumes.kubernetes.io/controller-managed-attach-detach": "true"}, "creationTimestamp": "2021-11-10T16:55:23Z", "labels": {"beta.kubernetes.io/arch": "amd64", "beta.kubernetes.io/os": "linux", "kubernetes.io/arch": "amd64", "kubernetes.io/hostname": "test1-849bcb9bdc-mt9bv", "kubernetes.io/os": "linux", "metal3.io/uuid": "d367f112-8bbc-41f2-9f53-9dd493bbe9b8"}, "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:node.alpha.kubernetes.io/ttl": {}}}, "f:spec": {"f:podCIDR": {}, "f:podCIDRs": {".": {}, "v:\"192.168.3.0/24\"": {}}}}, "manager": "kube-controller-manager", "operation": "Update", "time": "2021-11-10T16:55:23Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:kubeadm.alpha.kubernetes.io/cri-socket": {}}}}, "manager": "kubeadm", "operation": "Update", "time": "2021-11-10T16:55:23Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:cluster.x-k8s.io/cluster-name": {}, "f:cluster.x-k8s.io/cluster-namespace": {}, "f:cluster.x-k8s.io/machine": {}, "f:cluster.x-k8s.io/owner-kind": {}, "f:cluster.x-k8s.io/owner-name": {}}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:55:25Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:volumes.kubernetes.io/controller-managed-attach-detach": {}}, "f:labels": {".": {}, "f:beta.kubernetes.io/arch": {}, "f:beta.kubernetes.io/os": {}, "f:kubernetes.io/arch": {}, "f:kubernetes.io/hostname": {}, "f:kubernetes.io/os": {}, "f:metal3.io/uuid": {}}}, "f:spec": {"f:providerID": {}}, "f:status": {"f:allocatable": {"f:ephemeral-storage": {}}, "f:capacity": {"f:ephemeral-storage": {}}, "f:conditions": {"k:{\"type\":\"DiskPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"MemoryPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"PIDPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"Ready\"}": {"f:lastHeartbeatTime": {}, "f:message": {}}}, "f:images": {}}}, "manager": "kubelet", "operation": "Update", "time": "2021-11-10T16:55:53Z"}], "name": "test1-849bcb9bdc-mt9bv", "resourceVersion": "14435", "uid": "a61a4ab6-98b4-4457-94ed-7186e43ddd97"}, "spec": {"podCIDR": "192.168.3.0/24", "podCIDRs": ["192.168.3.0/24"], "providerID": "metal3://d367f112-8bbc-41f2-9f53-9dd493bbe9b8", "taints": [{"effect": "NoSchedule", "key": "node.kubernetes.io/not-ready"}]}, "status": {"addresses": [{"address": "192.168.111.103", "type": "InternalIP"}, {"address": "test1-849bcb9bdc-mt9bv", "type": "Hostname"}], "allocatable": {"cpu": "2", "ephemeral-storage": "46605923866", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "3928188Ki", "pods": "110"}, "capacity": {"cpu": "2", "ephemeral-storage": "50570664Ki", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "4030588Ki", "pods": "110"}, "conditions": [{"lastHeartbeatTime": "2021-11-10T18:41:46Z", "lastTransitionTime": "2021-11-10T16:55:23Z", "message": "kubelet has sufficient memory available", "reason": "KubeletHasSufficientMemory", "status": "False", "type": "MemoryPressure"}, {"lastHeartbeatTime": "2021-11-10T18:41:46Z", "lastTransitionTime": "2021-11-10T16:55:23Z", "message": "kubelet has no disk pressure", "reason": "KubeletHasNoDiskPressure", "status": "False", "type": "DiskPressure"}, {"lastHeartbeatTime": "2021-11-10T18:41:46Z", "lastTransitionTime": "2021-11-10T16:55:23Z", "message": "kubelet has sufficient PID available", "reason": "KubeletHasSufficientPID", "status": "False", "type": "PIDPressure"}, {"lastHeartbeatTime": "2021-11-10T18:41:46Z", "lastTransitionTime": "2021-11-10T16:55:23Z", "message": "container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: No CNI configuration file in /etc/cni/net.d/. Has your network provider started?", "reason": "KubeletNotReady", "status": "False", "type": "Ready"}], "daemonEndpoints": {"kubeletEndpoint": {"Port": 10250}}, "images": [{"names": ["docker.io/calico/node@sha256:7f9aa7e31fbcea7be64b153f8bcfd494de023679ec10d851a05667f0adb42650", "docker.io/calico/node@sha256:913955a36179a53d36a0df7f26319a5278991eea2514eab339cce15df24c220c", "docker.io/calico/node:v3.20.0"], "sizeBytes": 172565966}, {"names": ["docker.io/calico/cni@sha256:7c43c152cdf589ed789528c4055503d2f2b0ee943d7815c820fd8e99793f36b3", "docker.io/calico/cni@sha256:9906e2cca8006e1fe9fc3f358a3a06da6253afdd6fad05d594e884e8298ffe1d", "docker.io/calico/cni:v3.20.0"], "sizeBytes": 146031600}, {"names": ["k8s.gcr.io/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8", "k8s.gcr.io/kube-proxy@sha256:53af05c2a6cddd32cebf5856f71994f5d41ef2a62824b87f140f2087f91e4a38", "k8s.gcr.io/kube-proxy:v1.21.1"], "sizeBytes": 132731403}, {"names": ["docker.io/calico/kube-controllers@sha256:a850ce8daa84433a5641900693b0f8bc8e5177a4aa4cac8cf4b6cd8c24fd9886", "docker.io/calico/kube-controllers@sha256:b206ed8a5dd2384d11172c0244a94bea2d0d191208926fd6970484c3692641df", "docker.io/calico/kube-controllers:v3.20.0"], "sizeBytes": 63174961}, {"names": ["docker.io/calico/pod2daemon-flexvol@sha256:1cf3c28a3d384bb89d3fb3a73f6c8242eb4a40bd0a7c6c828692ded8aa3ea072", "docker.io/calico/pod2daemon-flexvol@sha256:c17e3e9871682bed00bfd33f8d6f00db1d1a126034a25bf5380355978e0c548d", "docker.io/calico/pod2daemon-flexvol:v3.20.0"], "sizeBytes": 21765440}, {"names": ["k8s.gcr.io/pause@sha256:1ff6c18fbef2045af6b9c16bf034cc421a29027b800e4f9b68ae9b1cb3e9ae07", "k8s.gcr.io/pause@sha256:369201a612f7b2b585a8e6ca99f77a36bcdbd032463d815388a96800b63ef2c8", "k8s.gcr.io/pause:3.5"], "sizeBytes": 689969}], "nodeInfo": {"architecture": "amd64", "bootID": "a8cff6d0-df1d-4381-a6af-d08ecaf2573e", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "4757b466-419f-4d0e-86a2-4efb517e615a"}}}, {"apiVersion": "v1", "kind": "Node", "metadata": {"annotations": {"cluster.x-k8s.io/cluster-name": "test1", "cluster.x-k8s.io/cluster-namespace": "metal3", "cluster.x-k8s.io/machine": "test1-crxn4", "cluster.x-k8s.io/owner-kind": "KubeadmControlPlane", "cluster.x-k8s.io/owner-name": "test1", "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/crio/crio.sock", "node.alpha.kubernetes.io/ttl": "0", "volumes.kubernetes.io/controller-managed-attach-detach": "true"}, "creationTimestamp": "2021-11-10T16:20:01Z", "labels": {"beta.kubernetes.io/arch": "amd64", "beta.kubernetes.io/os": "linux", "kubernetes.io/arch": "amd64", "kubernetes.io/hostname": "test1-crxn4", "kubernetes.io/os": "linux", "metal3.io/uuid": "44016cf3-4182-4fb6-9325-3c76d7ac4c45", "node-role.kubernetes.io/control-plane": "", "node-role.kubernetes.io/master": "", "node.kubernetes.io/exclude-from-external-load-balancers": ""}, "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:kubeadm.alpha.kubernetes.io/cri-socket": {}}, "f:labels": {"f:node-role.kubernetes.io/control-plane": {}, "f:node-role.kubernetes.io/master": {}, "f:node.kubernetes.io/exclude-from-external-load-balancers": {}}}, "f:spec": {"f:taints": {}}}, "manager": "kubeadm", "operation": "Update", "time": "2021-11-10T16:20:02Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:volumes.kubernetes.io/controller-managed-attach-detach": {}}, "f:labels": {".": {}, "f:beta.kubernetes.io/arch": {}, "f:beta.kubernetes.io/os": {}, "f:kubernetes.io/arch": {}, "f:kubernetes.io/hostname": {}, "f:kubernetes.io/os": {}, "f:metal3.io/uuid": {}}}, "f:spec": {"f:providerID": {}}, "f:status": {"f:allocatable": {"f:ephemeral-storage": {}}, "f:conditions": {"k:{\"type\":\"DiskPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"MemoryPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"PIDPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"Ready\"}": {"f:lastHeartbeatTime": {}, "f:message": {}}}, "f:images": {}}}, "manager": "kubelet", "operation": "Update", "time": "2021-11-10T16:20:09Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:node.alpha.kubernetes.io/ttl": {}}}, "f:spec": {"f:podCIDR": {}, "f:podCIDRs": {".": {}, "v:\"192.168.0.0/24\"": {}}}}, "manager": "kube-controller-manager", "operation": "Update", "time": "2021-11-10T16:20:12Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:cluster.x-k8s.io/cluster-name": {}, "f:cluster.x-k8s.io/cluster-namespace": {}, "f:cluster.x-k8s.io/machine": {}, "f:cluster.x-k8s.io/owner-kind": {}, "f:cluster.x-k8s.io/owner-name": {}}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:20:16Z"}], "name": "test1-crxn4", "resourceVersion": "14400", "uid": "0354e288-4484-4958-bc30-83a28e576e71"}, "spec": {"podCIDR": "192.168.0.0/24", "podCIDRs": ["192.168.0.0/24"], "providerID": "metal3://44016cf3-4182-4fb6-9325-3c76d7ac4c45", "taints": [{"effect": "NoSchedule", "key": "node-role.kubernetes.io/master"}, {"effect": "NoSchedule", "key": "node.kubernetes.io/not-ready"}]}, "status": {"addresses": [{"address": "192.168.111.100", "type": "InternalIP"}, {"address": "test1-crxn4", "type": "Hostname"}], "allocatable": {"cpu": "2", "ephemeral-storage": "46605923866", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "3928196Ki", "pods": "110"}, "capacity": {"cpu": "2", "ephemeral-storage": "50570664Ki", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "4030596Ki", "pods": "110"}, "conditions": [{"lastHeartbeatTime": "2021-11-10T18:41:26Z", "lastTransitionTime": "2021-11-10T16:20:01Z", "message": "kubelet has sufficient memory available", "reason": "KubeletHasSufficientMemory", "status": "False", "type": "MemoryPressure"}, {"lastHeartbeatTime": "2021-11-10T18:41:26Z", "lastTransitionTime": "2021-11-10T16:20:01Z", "message": "kubelet has no disk pressure", "reason": "KubeletHasNoDiskPressure", "status": "False", "type": "DiskPressure"}, {"lastHeartbeatTime": "2021-11-10T18:41:26Z", "lastTransitionTime": "2021-11-10T16:20:01Z", "message": "kubelet has sufficient PID available", "reason": "KubeletHasSufficientPID", "status": "False", "type": "PIDPressure"}, {"lastHeartbeatTime": "2021-11-10T18:41:26Z", "lastTransitionTime": "2021-11-10T16:20:01Z", "message": "container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: No CNI configuration file in /etc/cni/net.d/. Has your network provider started?", "reason": "KubeletNotReady", "status": "False", "type": "Ready"}], "daemonEndpoints": {"kubeletEndpoint": {"Port": 10250}}, "images": [{"names": ["k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2", "k8s.gcr.io/etcd@sha256:bd4d2c9a19be8a492bc79df53eee199fd04b415e9993eb69f7718052602a147a", "k8s.gcr.io/etcd:3.4.13-0"], "sizeBytes": 254662613}, {"names": ["docker.io/calico/node@sha256:7f9aa7e31fbcea7be64b153f8bcfd494de023679ec10d851a05667f0adb42650", "docker.io/calico/node@sha256:913955a36179a53d36a0df7f26319a5278991eea2514eab339cce15df24c220c", "docker.io/calico/node:v3.20.0"], "sizeBytes": 172565966}, {"names": ["docker.io/calico/cni@sha256:7c43c152cdf589ed789528c4055503d2f2b0ee943d7815c820fd8e99793f36b3", "docker.io/calico/cni@sha256:9906e2cca8006e1fe9fc3f358a3a06da6253afdd6fad05d594e884e8298ffe1d", "docker.io/calico/cni:v3.20.0"], "sizeBytes": 146031600}, {"names": ["k8s.gcr.io/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8", "k8s.gcr.io/kube-proxy@sha256:53af05c2a6cddd32cebf5856f71994f5d41ef2a62824b87f140f2087f91e4a38", "k8s.gcr.io/kube-proxy:v1.21.1"], "sizeBytes": 132731403}, {"names": ["k8s.gcr.io/kube-apiserver@sha256:53a13cd1588391888c5a8ac4cef13d3ee6d229cd904038936731af7131d193a9", "k8s.gcr.io/kube-apiserver@sha256:c81aabdc567a1858c62fb939e4d54abe3854087c9c683ac9bf1a60137b272258", "k8s.gcr.io/kube-apiserver:v1.21.1"], "sizeBytes": 126866676}, {"names": ["k8s.gcr.io/kube-controller-manager@sha256:3daf9c9f9fe24c3a7b92ce864ef2d8d610c84124cc7d98e68fdbe94038337228", "k8s.gcr.io/kube-controller-manager@sha256:e0d7e62864b91b05f02e51ce0ecf8c986270eedb2d1512edff0d43b8660a442e", "k8s.gcr.io/kube-controller-manager:v1.21.1"], "sizeBytes": 121079386}, {"names": ["docker.io/calico/kube-controllers@sha256:a850ce8daa84433a5641900693b0f8bc8e5177a4aa4cac8cf4b6cd8c24fd9886", "docker.io/calico/kube-controllers@sha256:b206ed8a5dd2384d11172c0244a94bea2d0d191208926fd6970484c3692641df", "docker.io/calico/kube-controllers:v3.20.0"], "sizeBytes": 63174961}, {"names": ["k8s.gcr.io/kube-scheduler@sha256:a8c4084db3b381f0806ea563c7ec842cc3604c57722a916c91fb59b00ff67d63", "k8s.gcr.io/kube-scheduler@sha256:b959d178004ea7aa2b2f118710f55b0b4ad2b9e7710bb8427c7351ef67b943cb", "k8s.gcr.io/kube-scheduler:v1.21.1"], "sizeBytes": 51889242}, {"names": ["k8s.gcr.io/coredns/coredns@sha256:10ecc12177735e5a6fd6fa0127202776128d860ed7ab0341780ddaeb1f6dfe61", "k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e", "k8s.gcr.io/coredns/coredns:v1.8.0"], "sizeBytes": 42585056}, {"names": ["docker.io/calico/pod2daemon-flexvol@sha256:1cf3c28a3d384bb89d3fb3a73f6c8242eb4a40bd0a7c6c828692ded8aa3ea072", "docker.io/calico/pod2daemon-flexvol@sha256:c17e3e9871682bed00bfd33f8d6f00db1d1a126034a25bf5380355978e0c548d", "docker.io/calico/pod2daemon-flexvol:v3.20.0"], "sizeBytes": 21765440}, {"names": ["k8s.gcr.io/pause@sha256:1ff6c18fbef2045af6b9c16bf034cc421a29027b800e4f9b68ae9b1cb3e9ae07", "k8s.gcr.io/pause@sha256:369201a612f7b2b585a8e6ca99f77a36bcdbd032463d815388a96800b63ef2c8", "k8s.gcr.io/pause:3.5"], "sizeBytes": 689969}, {"names": ["k8s.gcr.io/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810", "k8s.gcr.io/pause@sha256:914e745e524aa94315a25b49a7fafc0aa395e332126930593225d7a513f5a6b2", "k8s.gcr.io/pause:3.4.1"], "sizeBytes": 689817}], "nodeInfo": {"architecture": "amd64", "bootID": "c2b05f6d-e9b8-438a-a5bc-1778ae2b936a", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "5414b5e7-bae3-4f7e-8e59-cf44f009a7a1"}}}, {"apiVersion": "v1", "kind": "Node", "metadata": {"annotations": {"cluster.x-k8s.io/cluster-name": "test1", "cluster.x-k8s.io/cluster-namespace": "metal3", "cluster.x-k8s.io/machine": "test1-tdcbq", "cluster.x-k8s.io/owner-kind": "KubeadmControlPlane", "cluster.x-k8s.io/owner-name": "test1", "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/crio/crio.sock", "node.alpha.kubernetes.io/ttl": "0", "volumes.kubernetes.io/controller-managed-attach-detach": "true"}, "creationTimestamp": "2021-11-10T16:47:01Z", "labels": {"beta.kubernetes.io/arch": "amd64", "beta.kubernetes.io/os": "linux", "kubernetes.io/arch": "amd64", "kubernetes.io/hostname": "test1-tdcbq", "kubernetes.io/os": "linux", "metal3.io/uuid": "0a41f459-3dd4-428f-8b71-1f8ce6e218c0", "node-role.kubernetes.io/control-plane": "", "node-role.kubernetes.io/master": "", "node.kubernetes.io/exclude-from-external-load-balancers": ""}, "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:node.alpha.kubernetes.io/ttl": {}}}, "f:spec": {"f:podCIDR": {}, "f:podCIDRs": {".": {}, "v:\"192.168.2.0/24\"": {}}}}, "manager": "kube-controller-manager", "operation": "Update", "time": "2021-11-10T16:47:01Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:kubeadm.alpha.kubernetes.io/cri-socket": {}}, "f:labels": {"f:node-role.kubernetes.io/control-plane": {}, "f:node-role.kubernetes.io/master": {}, "f:node.kubernetes.io/exclude-from-external-load-balancers": {}}}, "f:spec": {"f:taints": {}}}, "manager": "kubeadm", "operation": "Update", "time": "2021-11-10T16:47:07Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:volumes.kubernetes.io/controller-managed-attach-detach": {}}, "f:labels": {".": {}, "f:beta.kubernetes.io/arch": {}, "f:beta.kubernetes.io/os": {}, "f:kubernetes.io/arch": {}, "f:kubernetes.io/hostname": {}, "f:kubernetes.io/os": {}, "f:metal3.io/uuid": {}}}, "f:spec": {"f:providerID": {}}, "f:status": {"f:allocatable": {"f:ephemeral-storage": {}}, "f:capacity": {"f:ephemeral-storage": {}}, "f:conditions": {"k:{\"type\":\"DiskPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"MemoryPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"PIDPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"Ready\"}": {"f:lastHeartbeatTime": {}, "f:message": {}}}, "f:images": {}}}, "manager": "kubelet", "operation": "Update", "time": "2021-11-10T16:47:31Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:cluster.x-k8s.io/cluster-name": {}, "f:cluster.x-k8s.io/cluster-namespace": {}, "f:cluster.x-k8s.io/machine": {}, "f:cluster.x-k8s.io/owner-kind": {}, "f:cluster.x-k8s.io/owner-name": {}}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:48:17Z"}], "name": "test1-tdcbq", "resourceVersion": "14607", "uid": "323baa1e-a460-4041-a3ad-6d7a17a1cc58"}, "spec": {"podCIDR": "192.168.2.0/24", "podCIDRs": ["192.168.2.0/24"], "providerID": "metal3://0a41f459-3dd4-428f-8b71-1f8ce6e218c0", "taints": [{"effect": "NoSchedule", "key": "node-role.kubernetes.io/master"}, {"effect": "NoSchedule", "key": "node.kubernetes.io/not-ready"}]}, "status": {"addresses": [{"address": "192.168.111.102", "type": "InternalIP"}, {"address": "test1-tdcbq", "type": "Hostname"}], "allocatable": {"cpu": "2", "ephemeral-storage": "46605923866", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "3928196Ki", "pods": "110"}, "capacity": {"cpu": "2", "ephemeral-storage": "50570664Ki", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "4030596Ki", "pods": "110"}, "conditions": [{"lastHeartbeatTime": "2021-11-10T18:43:27Z", "lastTransitionTime": "2021-11-10T16:47:01Z", "message": "kubelet has sufficient memory available", "reason": "KubeletHasSufficientMemory", "status": "False", "type": "MemoryPressure"}, {"lastHeartbeatTime": "2021-11-10T18:43:27Z", "lastTransitionTime": "2021-11-10T16:47:01Z", "message": "kubelet has no disk pressure", "reason": "KubeletHasNoDiskPressure", "status": "False", "type": "DiskPressure"}, {"lastHeartbeatTime": "2021-11-10T18:43:27Z", "lastTransitionTime": "2021-11-10T16:47:01Z", "message": "kubelet has sufficient PID available", "reason": "KubeletHasSufficientPID", "status": "False", "type": "PIDPressure"}, {"lastHeartbeatTime": "2021-11-10T18:43:27Z", "lastTransitionTime": "2021-11-10T16:47:01Z", "message": "container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: No CNI configuration file in /etc/cni/net.d/. Has your network provider started?", "reason": "KubeletNotReady", "status": "False", "type": "Ready"}], "daemonEndpoints": {"kubeletEndpoint": {"Port": 10250}}, "images": [{"names": ["k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2", "k8s.gcr.io/etcd@sha256:bd4d2c9a19be8a492bc79df53eee199fd04b415e9993eb69f7718052602a147a", "k8s.gcr.io/etcd:3.4.13-0"], "sizeBytes": 254662613}, {"names": ["docker.io/calico/node@sha256:7f9aa7e31fbcea7be64b153f8bcfd494de023679ec10d851a05667f0adb42650", "docker.io/calico/node@sha256:913955a36179a53d36a0df7f26319a5278991eea2514eab339cce15df24c220c", "docker.io/calico/node:v3.20.0"], "sizeBytes": 172565966}, {"names": ["docker.io/calico/cni@sha256:7c43c152cdf589ed789528c4055503d2f2b0ee943d7815c820fd8e99793f36b3", "docker.io/calico/cni@sha256:9906e2cca8006e1fe9fc3f358a3a06da6253afdd6fad05d594e884e8298ffe1d", "docker.io/calico/cni:v3.20.0"], "sizeBytes": 146031600}, {"names": ["k8s.gcr.io/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8", "k8s.gcr.io/kube-proxy@sha256:53af05c2a6cddd32cebf5856f71994f5d41ef2a62824b87f140f2087f91e4a38", "k8s.gcr.io/kube-proxy:v1.21.1"], "sizeBytes": 132731403}, {"names": ["k8s.gcr.io/kube-apiserver@sha256:53a13cd1588391888c5a8ac4cef13d3ee6d229cd904038936731af7131d193a9", "k8s.gcr.io/kube-apiserver@sha256:c81aabdc567a1858c62fb939e4d54abe3854087c9c683ac9bf1a60137b272258", "k8s.gcr.io/kube-apiserver:v1.21.1"], "sizeBytes": 126866676}, {"names": ["k8s.gcr.io/kube-controller-manager@sha256:3daf9c9f9fe24c3a7b92ce864ef2d8d610c84124cc7d98e68fdbe94038337228", "k8s.gcr.io/kube-controller-manager@sha256:e0d7e62864b91b05f02e51ce0ecf8c986270eedb2d1512edff0d43b8660a442e", "k8s.gcr.io/kube-controller-manager:v1.21.1"], "sizeBytes": 121079386}, {"names": ["docker.io/calico/kube-controllers@sha256:a850ce8daa84433a5641900693b0f8bc8e5177a4aa4cac8cf4b6cd8c24fd9886", "docker.io/calico/kube-controllers@sha256:b206ed8a5dd2384d11172c0244a94bea2d0d191208926fd6970484c3692641df", "docker.io/calico/kube-controllers:v3.20.0"], "sizeBytes": 63174961}, {"names": ["k8s.gcr.io/kube-scheduler@sha256:a8c4084db3b381f0806ea563c7ec842cc3604c57722a916c91fb59b00ff67d63", "k8s.gcr.io/kube-scheduler@sha256:b959d178004ea7aa2b2f118710f55b0b4ad2b9e7710bb8427c7351ef67b943cb", "k8s.gcr.io/kube-scheduler:v1.21.1"], "sizeBytes": 51889242}, {"names": ["k8s.gcr.io/coredns/coredns@sha256:10ecc12177735e5a6fd6fa0127202776128d860ed7ab0341780ddaeb1f6dfe61", "k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e", "k8s.gcr.io/coredns/coredns:v1.8.0"], "sizeBytes": 42585056}, {"names": ["docker.io/calico/pod2daemon-flexvol@sha256:1cf3c28a3d384bb89d3fb3a73f6c8242eb4a40bd0a7c6c828692ded8aa3ea072", "docker.io/calico/pod2daemon-flexvol@sha256:c17e3e9871682bed00bfd33f8d6f00db1d1a126034a25bf5380355978e0c548d", "docker.io/calico/pod2daemon-flexvol:v3.20.0"], "sizeBytes": 21765440}, {"names": ["k8s.gcr.io/pause@sha256:1ff6c18fbef2045af6b9c16bf034cc421a29027b800e4f9b68ae9b1cb3e9ae07", "k8s.gcr.io/pause@sha256:369201a612f7b2b585a8e6ca99f77a36bcdbd032463d815388a96800b63ef2c8", "k8s.gcr.io/pause:3.5"], "sizeBytes": 689969}, {"names": ["k8s.gcr.io/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810", "k8s.gcr.io/pause@sha256:914e745e524aa94315a25b49a7fafc0aa395e332126930593225d7a513f5a6b2", "k8s.gcr.io/pause:3.4.1"], "sizeBytes": 689817}], "nodeInfo": {"architecture": "amd64", "bootID": "4bd1f10d-b963-45ce-a712-37bfae4cc407", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "fbf93ce0-df11-4e33-a075-5214a2d9bce3"}}}, {"apiVersion": "v1", "kind": "Node", "metadata": {"annotations": {"cluster.x-k8s.io/cluster-name": "test1", "cluster.x-k8s.io/cluster-namespace": "metal3", "cluster.x-k8s.io/machine": "test1-xzxfp", "cluster.x-k8s.io/owner-kind": "KubeadmControlPlane", "cluster.x-k8s.io/owner-name": "test1", "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/crio/crio.sock", "node.alpha.kubernetes.io/ttl": "0", "volumes.kubernetes.io/controller-managed-attach-detach": "true"}, "creationTimestamp": "2021-11-10T16:36:31Z", "labels": {"beta.kubernetes.io/arch": "amd64", "beta.kubernetes.io/os": "linux", "kubernetes.io/arch": "amd64", "kubernetes.io/hostname": "test1-xzxfp", "kubernetes.io/os": "linux", "metal3.io/uuid": "ea568c6d-2491-4ffa-909b-f57ce0cb407c", "node-role.kubernetes.io/control-plane": "", "node-role.kubernetes.io/master": "", "node.kubernetes.io/exclude-from-external-load-balancers": ""}, "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:node.alpha.kubernetes.io/ttl": {}}}, "f:spec": {"f:podCIDR": {}, "f:podCIDRs": {".": {}, "v:\"192.168.1.0/24\"": {}}}}, "manager": "kube-controller-manager", "operation": "Update", "time": "2021-11-10T16:36:31Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:kubeadm.alpha.kubernetes.io/cri-socket": {}}, "f:labels": {"f:node-role.kubernetes.io/control-plane": {}, "f:node-role.kubernetes.io/master": {}, "f:node.kubernetes.io/exclude-from-external-load-balancers": {}}}, "f:spec": {"f:taints": {}}}, "manager": "kubeadm", "operation": "Update", "time": "2021-11-10T16:36:46Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {".": {}, "f:volumes.kubernetes.io/controller-managed-attach-detach": {}}, "f:labels": {".": {}, "f:beta.kubernetes.io/arch": {}, "f:beta.kubernetes.io/os": {}, "f:kubernetes.io/arch": {}, "f:kubernetes.io/hostname": {}, "f:kubernetes.io/os": {}, "f:metal3.io/uuid": {}}}, "f:spec": {"f:providerID": {}}, "f:status": {"f:allocatable": {"f:ephemeral-storage": {}}, "f:capacity": {"f:ephemeral-storage": {}}, "f:conditions": {"k:{\"type\":\"DiskPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"MemoryPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"PIDPressure\"}": {"f:lastHeartbeatTime": {}}, "k:{\"type\":\"Ready\"}": {"f:lastHeartbeatTime": {}, "f:message": {}}}, "f:images": {}}}, "manager": "kubelet", "operation": "Update", "time": "2021-11-10T16:37:06Z"}, {"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:annotations": {"f:cluster.x-k8s.io/cluster-name": {}, "f:cluster.x-k8s.io/cluster-namespace": {}, "f:cluster.x-k8s.io/machine": {}, "f:cluster.x-k8s.io/owner-kind": {}, "f:cluster.x-k8s.io/owner-name": {}}}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:41:41Z"}], "name": "test1-xzxfp", "resourceVersion": "14572", "uid": "ca7a632a-f74b-4ea1-ac9d-9d17fe24b578"}, "spec": {"podCIDR": "192.168.1.0/24", "podCIDRs": ["192.168.1.0/24"], "providerID": "metal3://ea568c6d-2491-4ffa-909b-f57ce0cb407c", "taints": [{"effect": "NoSchedule", "key": "node-role.kubernetes.io/master"}, {"effect": "NoSchedule", "key": "node.kubernetes.io/not-ready"}]}, "status": {"addresses": [{"address": "192.168.111.101", "type": "InternalIP"}, {"address": "test1-xzxfp", "type": "Hostname"}], "allocatable": {"cpu": "2", "ephemeral-storage": "46605923866", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "3928188Ki", "pods": "110"}, "capacity": {"cpu": "2", "ephemeral-storage": "50570664Ki", "hugepages-1Gi": "0", "hugepages-2Mi": "0", "memory": "4030588Ki", "pods": "110"}, "conditions": [{"lastHeartbeatTime": "2021-11-10T18:43:06Z", "lastTransitionTime": "2021-11-10T16:36:31Z", "message": "kubelet has sufficient memory available", "reason": "KubeletHasSufficientMemory", "status": "False", "type": "MemoryPressure"}, {"lastHeartbeatTime": "2021-11-10T18:43:06Z", "lastTransitionTime": "2021-11-10T16:36:31Z", "message": "kubelet has no disk pressure", "reason": "KubeletHasNoDiskPressure", "status": "False", "type": "DiskPressure"}, {"lastHeartbeatTime": "2021-11-10T18:43:06Z", "lastTransitionTime": "2021-11-10T16:36:31Z", "message": "kubelet has sufficient PID available", "reason": "KubeletHasSufficientPID", "status": "False", "type": "PIDPressure"}, {"lastHeartbeatTime": "2021-11-10T18:43:06Z", "lastTransitionTime": "2021-11-10T16:36:31Z", "message": "container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: No CNI configuration file in /etc/cni/net.d/. Has your network provider started?", "reason": "KubeletNotReady", "status": "False", "type": "Ready"}], "daemonEndpoints": {"kubeletEndpoint": {"Port": 10250}}, "images": [{"names": ["k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2", "k8s.gcr.io/etcd@sha256:bd4d2c9a19be8a492bc79df53eee199fd04b415e9993eb69f7718052602a147a", "k8s.gcr.io/etcd:3.4.13-0"], "sizeBytes": 254662613}, {"names": ["docker.io/calico/node@sha256:7f9aa7e31fbcea7be64b153f8bcfd494de023679ec10d851a05667f0adb42650", "docker.io/calico/node@sha256:913955a36179a53d36a0df7f26319a5278991eea2514eab339cce15df24c220c", "docker.io/calico/node:v3.20.0"], "sizeBytes": 172565966}, {"names": ["docker.io/calico/cni@sha256:7c43c152cdf589ed789528c4055503d2f2b0ee943d7815c820fd8e99793f36b3", "docker.io/calico/cni@sha256:9906e2cca8006e1fe9fc3f358a3a06da6253afdd6fad05d594e884e8298ffe1d", "docker.io/calico/cni:v3.20.0"], "sizeBytes": 146031600}, {"names": ["k8s.gcr.io/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8", "k8s.gcr.io/kube-proxy@sha256:53af05c2a6cddd32cebf5856f71994f5d41ef2a62824b87f140f2087f91e4a38", "k8s.gcr.io/kube-proxy:v1.21.1"], "sizeBytes": 132731403}, {"names": ["k8s.gcr.io/kube-apiserver@sha256:53a13cd1588391888c5a8ac4cef13d3ee6d229cd904038936731af7131d193a9", "k8s.gcr.io/kube-apiserver@sha256:c81aabdc567a1858c62fb939e4d54abe3854087c9c683ac9bf1a60137b272258", "k8s.gcr.io/kube-apiserver:v1.21.1"], "sizeBytes": 126866676}, {"names": ["k8s.gcr.io/kube-controller-manager@sha256:3daf9c9f9fe24c3a7b92ce864ef2d8d610c84124cc7d98e68fdbe94038337228", "k8s.gcr.io/kube-controller-manager@sha256:e0d7e62864b91b05f02e51ce0ecf8c986270eedb2d1512edff0d43b8660a442e", "k8s.gcr.io/kube-controller-manager:v1.21.1"], "sizeBytes": 121079386}, {"names": ["docker.io/calico/kube-controllers@sha256:a850ce8daa84433a5641900693b0f8bc8e5177a4aa4cac8cf4b6cd8c24fd9886", "docker.io/calico/kube-controllers@sha256:b206ed8a5dd2384d11172c0244a94bea2d0d191208926fd6970484c3692641df", "docker.io/calico/kube-controllers:v3.20.0"], "sizeBytes": 63174961}, {"names": ["k8s.gcr.io/kube-scheduler@sha256:a8c4084db3b381f0806ea563c7ec842cc3604c57722a916c91fb59b00ff67d63", "k8s.gcr.io/kube-scheduler@sha256:b959d178004ea7aa2b2f118710f55b0b4ad2b9e7710bb8427c7351ef67b943cb", "k8s.gcr.io/kube-scheduler:v1.21.1"], "sizeBytes": 51889242}, {"names": ["k8s.gcr.io/coredns/coredns@sha256:10ecc12177735e5a6fd6fa0127202776128d860ed7ab0341780ddaeb1f6dfe61", "k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e", "k8s.gcr.io/coredns/coredns:v1.8.0"], "sizeBytes": 42585056}, {"names": ["docker.io/calico/pod2daemon-flexvol@sha256:1cf3c28a3d384bb89d3fb3a73f6c8242eb4a40bd0a7c6c828692ded8aa3ea072", "docker.io/calico/pod2daemon-flexvol@sha256:c17e3e9871682bed00bfd33f8d6f00db1d1a126034a25bf5380355978e0c548d", "docker.io/calico/pod2daemon-flexvol:v3.20.0"], "sizeBytes": 21765440}, {"names": ["k8s.gcr.io/pause@sha256:1ff6c18fbef2045af6b9c16bf034cc421a29027b800e4f9b68ae9b1cb3e9ae07", "k8s.gcr.io/pause@sha256:369201a612f7b2b585a8e6ca99f77a36bcdbd032463d815388a96800b63ef2c8", "k8s.gcr.io/pause:3.5"], "sizeBytes": 689969}, {"names": ["k8s.gcr.io/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810", "k8s.gcr.io/pause@sha256:914e745e524aa94315a25b49a7fafc0aa395e332126930593225d7a513f5a6b2", "k8s.gcr.io/pause:3.4.1"], "sizeBytes": 689817}], "nodeInfo": {"architecture": "amd64", "bootID": "2158d241-9376-4b61-b920-14314f40ecf2", "containerRuntimeVersion": "cri-o://1.21.2", "kernelVersion": "5.4.0-42-generic", "kubeProxyVersion": "v1.21.1", "kubeletVersion": "v1.21.1", "machineID": "97eeb30f3f214f52a873db643b927c1e", "operatingSystem": "linux", "osImage": "Ubuntu 20.04 LTS", "systemUUID": "88c87873-8426-41bd-b43a-934c4041474b"}}}]}[0m
Wednesday 10 November 2021  18:46:25 +0000 (0:00:00.776)       0:00:17.793 **** 

TASK [v1aX_integration_test : pivot] *******************************************
[0;36mincluded: /home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/tasks/move.yml for localhost[0m
Wednesday 10 November 2021  18:46:25 +0000 (0:00:00.121)       0:00:17.915 **** 

TASK [v1aX_integration_test : Define number of BMH's] **************************
[0;32mok: [localhost] => {"ansible_facts": {"NUMBER_OF_BMH": "4"}, "changed": false}[0m
Wednesday 10 November 2021  18:46:25 +0000 (0:00:00.064)       0:00:17.979 **** 

TASK [v1aX_integration_test : Create directories for storing container logs] ***
[0;33mchanged: [localhost] => (item=ironic-api) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "ironic-api", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/ironic-api", "size": 4096, "state": "directory", "uid": 1000}[0m
[0;33mchanged: [localhost] => (item=ironic-conductor) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "ironic-conductor", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/ironic-conductor", "size": 4096, "state": "directory", "uid": 1000}[0m
[0;33mchanged: [localhost] => (item=ironic-inspector) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "ironic-inspector", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/ironic-inspector", "size": 4096, "state": "directory", "uid": 1000}[0m
[0;33mchanged: [localhost] => (item=dnsmasq) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "dnsmasq", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/dnsmasq", "size": 4096, "state": "directory", "uid": 1000}[0m
[0;33mchanged: [localhost] => (item=httpd-infra) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "httpd-infra", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/httpd-infra", "size": 4096, "state": "directory", "uid": 1000}[0m
[0;33mchanged: [localhost] => (item=mariadb) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "mariadb", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/mariadb", "size": 4096, "state": "directory", "uid": 1000}[0m
[0;33mchanged: [localhost] => (item=ironic-endpoint-keepalived) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "ironic-endpoint-keepalived", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/ironic-endpoint-keepalived", "size": 4096, "state": "directory", "uid": 1000}[0m
[0;33mchanged: [localhost] => (item=ironic-log-watch) => {"ansible_loop_var": "item", "changed": true, "gid": 1000, "group": "capm3", "item": "ironic-log-watch", "mode": "0775", "owner": "capm3", "path": "/tmp/docker/ironic-log-watch", "size": 4096, "state": "directory", "uid": 1000}[0m
Wednesday 10 November 2021  18:46:27 +0000 (0:00:01.808)       0:00:19.788 **** 

TASK [v1aX_integration_test : Fetch container logs before pivoting] ************
[0;33mchanged: [localhost] => (item=ironic-api) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs ironic-api > /tmp/docker/ironic-api/stdout.log 2> /tmp/docker/ironic-api/stderr.log", "delta": "0:00:00.395471", "end": "2021-11-10 18:46:28.036824", "item": "ironic-api", "msg": "", "rc": 0, "start": "2021-11-10 18:46:27.641353", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=ironic-conductor) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs ironic-conductor > /tmp/docker/ironic-conductor/stdout.log 2> /tmp/docker/ironic-conductor/stderr.log", "delta": "0:00:00.177616", "end": "2021-11-10 18:46:28.474653", "item": "ironic-conductor", "msg": "", "rc": 0, "start": "2021-11-10 18:46:28.297037", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=ironic-inspector) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs ironic-inspector > /tmp/docker/ironic-inspector/stdout.log 2> /tmp/docker/ironic-inspector/stderr.log", "delta": "0:00:00.109589", "end": "2021-11-10 18:46:28.810682", "item": "ironic-inspector", "msg": "", "rc": 0, "start": "2021-11-10 18:46:28.701093", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=dnsmasq) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs dnsmasq > /tmp/docker/dnsmasq/stdout.log 2> /tmp/docker/dnsmasq/stderr.log", "delta": "0:00:00.064156", "end": "2021-11-10 18:46:29.094164", "item": "dnsmasq", "msg": "", "rc": 0, "start": "2021-11-10 18:46:29.030008", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=httpd-infra) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs httpd-infra > /tmp/docker/httpd-infra/stdout.log 2> /tmp/docker/httpd-infra/stderr.log", "delta": "0:00:00.089406", "end": "2021-11-10 18:46:29.411837", "item": "httpd-infra", "msg": "", "rc": 0, "start": "2021-11-10 18:46:29.322431", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=mariadb) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs mariadb > /tmp/docker/mariadb/stdout.log 2> /tmp/docker/mariadb/stderr.log", "delta": "0:00:00.057910", "end": "2021-11-10 18:46:29.702867", "item": "mariadb", "msg": "", "rc": 0, "start": "2021-11-10 18:46:29.644957", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=ironic-endpoint-keepalived) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs ironic-endpoint-keepalived > /tmp/docker/ironic-endpoint-keepalived/stdout.log 2> /tmp/docker/ironic-endpoint-keepalived/stderr.log", "delta": "0:00:00.086193", "end": "2021-11-10 18:46:30.026247", "item": "ironic-endpoint-keepalived", "msg": "", "rc": 0, "start": "2021-11-10 18:46:29.940054", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
[0;33mchanged: [localhost] => (item=ironic-log-watch) => {"ansible_loop_var": "item", "changed": true, "cmd": "sudo docker logs ironic-log-watch > /tmp/docker/ironic-log-watch/stdout.log 2> /tmp/docker/ironic-log-watch/stderr.log", "delta": "0:00:00.411565", "end": "2021-11-10 18:46:30.662561", "item": "ironic-log-watch", "msg": "", "rc": 0, "start": "2021-11-10 18:46:30.250996", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
Wednesday 10 November 2021  18:46:30 +0000 (0:00:03.319)       0:00:23.107 **** 

TASK [v1aX_integration_test : Remove ironic container from source cluster (Ephemeral Cluster is kind)] ***
[0;33mchanged: [localhost] => (item=ironic-api) => {"ansible_loop_var": "item", "changed": true, "deprecations": [{"collection_name": "community.docker", "msg": "The container_default_behavior option will change its default value from \"compatibility\" to \"no_defaults\" in community.docker 2.0.0. To remove this warning, please specify an explicit value for it now", "version": "2.0.0"}], "item": "ironic-api"}[0m
[0;33mchanged: [localhost] => (item=ironic-conductor) => {"ansible_loop_var": "item", "changed": true, "deprecations": [{"collection_name": "community.docker", "msg": "The container_default_behavior option will change its default value from \"compatibility\" to \"no_defaults\" in community.docker 2.0.0. To remove this warning, please specify an explicit value for it now", "version": "2.0.0"}], "item": "ironic-conductor"}[0m
[0;33mchanged: [localhost] => (item=ironic-inspector) => {"ansible_loop_var": "item", "changed": true, "deprecations": [{"collection_name": "community.docker", "msg": "The container_default_behavior option will change its default value from \"compatibility\" to \"no_defaults\" in community.docker 2.0.0. To remove this warning, please specify an explicit value for it now", "version": "2.0.0"}], "item": "ironic-inspector"}[0m
[0;33mchanged: [localhost] => (item=dnsmasq) => {"ansible_loop_var": "item", "changed": true, "deprecations": [{"collection_name": "community.docker", "msg": "The container_default_behavior option will change its default value from \"compatibility\" to \"no_defaults\" in community.docker 2.0.0. To remove this warning, please specify an explicit value for it now", "version": "2.0.0"}], "item": "dnsmasq"}[0m
[0;33mchanged: [localhost] => (item=mariadb) => {"ansible_loop_var": "item", "changed": true, "deprecations": [{"collection_name": "community.docker", "msg": "The container_default_behavior option will change its default value from \"compatibility\" to \"no_defaults\" in community.docker 2.0.0. To remove this warning, please specify an explicit value for it now", "version": "2.0.0"}], "item": "mariadb"}[0m
[0;33mchanged: [localhost] => (item=ironic-endpoint-keepalived) => {"ansible_loop_var": "item", "changed": true, "deprecations": [{"collection_name": "community.docker", "msg": "The container_default_behavior option will change its default value from \"compatibility\" to \"no_defaults\" in community.docker 2.0.0. To remove this warning, please specify an explicit value for it now", "version": "2.0.0"}], "item": "ironic-endpoint-keepalived"}[0m
[0;33mchanged: [localhost] => (item=ironic-log-watch) => {"ansible_loop_var": "item", "changed": true, "deprecations": [{"collection_name": "community.docker", "msg": "The container_default_behavior option will change its default value from \"compatibility\" to \"no_defaults\" in community.docker 2.0.0. To remove this warning, please specify an explicit value for it now", "version": "2.0.0"}], "item": "ironic-log-watch"}[0m
[0;35m[DEPRECATION WARNING]: The container_default_behavior option will change its [0m
[0;35mdefault value from "compatibility" to "no_defaults" in community.docker 2.0.0. [0m
[0;35mTo remove this warning, please specify an explicit value for it now. This [0m
[0;35mfeature will be removed from community.docker in version 2.0.0. Deprecation [0m
[0;35mwarnings can be disabled by setting deprecation_warnings=False in ansible.cfg.[0m
Wednesday 10 November 2021  18:47:36 +0000 (0:01:05.495)       0:01:28.602 **** 
Wednesday 10 November 2021  18:47:36 +0000 (0:00:00.059)       0:01:28.662 **** 

TASK [v1aX_integration_test : Label BMO CRDs.] *********************************
[0;33mchanged: [localhost] => (item=clusterctl.cluster.x-k8s.io="") => {"ansible_loop_var": "item", "changed": true, "cmd": "kubectl label --overwrite crds baremetalhosts.metal3.io clusterctl.cluster.x-k8s.io=\"\"", "delta": "0:00:00.119292", "end": "2021-11-10 18:47:36.642985", "item": "clusterctl.cluster.x-k8s.io=\"\"", "msg": "", "rc": 0, "start": "2021-11-10 18:47:36.523693", "stderr": "", "stderr_lines": [], "stdout": "customresourcedefinition.apiextensions.k8s.io/baremetalhosts.metal3.io labeled", "stdout_lines": ["customresourcedefinition.apiextensions.k8s.io/baremetalhosts.metal3.io labeled"]}[0m
[0;33mchanged: [localhost] => (item=cluster.x-k8s.io/provider="metal3") => {"ansible_loop_var": "item", "changed": true, "cmd": "kubectl label --overwrite crds baremetalhosts.metal3.io cluster.x-k8s.io/provider=\"metal3\"", "delta": "0:00:00.132767", "end": "2021-11-10 18:47:36.993998", "item": "cluster.x-k8s.io/provider=\"metal3\"", "msg": "", "rc": 0, "start": "2021-11-10 18:47:36.861231", "stderr": "", "stderr_lines": [], "stdout": "customresourcedefinition.apiextensions.k8s.io/baremetalhosts.metal3.io labeled", "stdout_lines": ["customresourcedefinition.apiextensions.k8s.io/baremetalhosts.metal3.io labeled"]}[0m
Wednesday 10 November 2021  18:47:37 +0000 (0:00:00.774)       0:01:29.436 **** 

TASK [v1aX_integration_test : Obtain target cluster kubeconfig] ****************
[0;32mok: [localhost] => {"api_found": true, "changed": false, "resources": [{"apiVersion": "v1", "data": {"value": "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNMmFrTkRRV1JMWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplRTFVUlhoTlJFVXhUbFJqZVU1R2IxaEVWRTE0VFZSRmQwOUVSVEpOUkVsNVRrWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVDAxcUNuSnpXVUpVY1hwUVNGUnVlbkJuWVhKaFZqSkNTRmQwUjJOQmIza3dMekpyWkVSTGJXTktTVmhLY0VveVpYQXJaVEpXZVdJM1VEZEpkblZ3YTJGRmJrVUtOV1o1YUdGV2EyaEhWekZzYkVSa1dEWnJiU3RhT1VoMFVESlpaRUZ5TUdZM1MzRjZXbFY2YlUwclYwVnZXbkpFVVROU01DOXpTRlExYVZOWGNISllaZ3BUUm1NNFdFWnVjRVp3ZVU4MGNIZFZjM0JHY1VGdWVqRlFZV0VyZHpobk5XRjRjMlF6YlhkR1RHeExiSGRaYjJGRFJUWlpWMFl4V0dOSWVWQjZNak53Q2xKa2RsaDJVR054UjJkRVVtTkdUbUp2UjFoSmRGVk9UR3B2TURkQlIzZzRSbEpvUWxGcGR5ODNiM1ExVm5oa1ZXcGxMMnhLTnpkeU0weFpiRWxzWkd3S1kybHZOMk5WY0V3d1JWUnFUaTl3Wm1GVFJpOVJRbWg2TnpCbEsyaFRhaXQwWlcwclFteDVRM0UyTVhKaFJqQkNlWGhpTlZsVWRsVkJhVlpUWkhkQ1Fnb3lXRFlyV2psbU0wOVlOMmRtUkRCWU5XOUZRMEYzUlVGQllVNUdUVVZOZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVSkpSMEV4VldSRmQwVkNDaTkzVVVsTlFWbENRV1k0UTBGUlFYZElVVmxFVmxJd1QwSkNXVVZHVGxVeE1rMXRMMUpRVjJFNFEyOWtVQ3M0UTFOTVV6QkpabTl4VFVFd1IwTlRjVWNLVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUTFaRVlreE5hVEExYUhWMldtdGxWVk5JUlhGaVNHSXZVRFJ6VVhOaVVIQnlUV2x1ZHpjeFpGVkthWHBqU3dwaWEwWTBZM0p2VVhoTVlVbGtWVXhxTjBscWFHTllPWEpYYlVkaE5FVTNZbFF3Y2xocE4wVkxTVVpTY1RkVVNGUmFRbWRxZFRoeU9IRm5TV3BoTTBockNuVnJkVWR0U21GMVlWWldPVUY0U1dwNFdGZzBNWHBxU1VaeFkwNXRXRVZpVHpaWFVDOXFaR05LT0ZOallrdHdTRXRwYjA5UGVEWklha0V4SzFkSldGZ0tiVmRUTDBsa1lrd3dZMDR2WmpOMVNuVkpORzgyVDJ3dmRrWXpOMGxpV2xKbmVYaHRlbGxvUzFoQmVtMVZVMDAxY2xkSGIzZExTREYzWjIxNmRWQlZjUXByVmpVM1ZUQndSemQ2V0ROb2MxQm1iRGh3WnpGWWFqTjNaRXRpYzJoRVNXeGpkM2hyVFZOMFVXNURTSGQ2YUdSNVdGWXpObFIwTlRKRE1rOVVkV04zQ2xGRVJFUTJSREpqTldoUlpsTm9Rek5pWlhsaE5GZHBSM1pETHlzMmRuUXJWM0pwYzNkbVJHWUtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIHNlcnZlcjogaHR0cHM6Ly8xOTIuMTY4LjExMS4yNDk6NjQ0MwogIG5hbWU6IHRlc3QxCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiB0ZXN0MQogICAgdXNlcjogdGVzdDEtYWRtaW4KICBuYW1lOiB0ZXN0MS1hZG1pbkB0ZXN0MQpjdXJyZW50LWNvbnRleHQ6IHRlc3QxLWFkbWluQHRlc3QxCmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZTogdGVzdDEtYWRtaW4KICB1c2VyOgogICAgY2xpZW50LWNlcnRpZmljYXRlLWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJGZWtORFFXWjFaMEYzU1VKQlowbEpRMHBqVW1rMFpYTklXVmwzUkZGWlNrdHZXa2xvZG1OT1FWRkZURUpSUVhkR1ZFVlVUVUpGUjBFeFZVVUtRWGhOUzJFelZtbGFXRXAxV2xoU2JHTjZRV1ZHZHpCNVRWUkZlRTFVUVhoT1ZGVXpUV3BTWVVaM01IbE5ha1Y0VFZSQmVFNXFRWGxOYWxaaFRVUlJlQXBHZWtGV1FtZE9Wa0pCYjFSRWJrNDFZek5TYkdKVWNIUlpXRTR3V2xoS2VrMVNhM2RHZDFsRVZsRlJSRVY0UW5Ka1YwcHNZMjAxYkdSSFZucE1WMFpyQ21KWGJIVk5TVWxDU1dwQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSUlVaQlFVOURRVkU0UVUxSlNVSkRaMHREUVZGRlFYaHZNRmRwWjBZNFdtNHdWQ3RrWlRjS1lXMHdNMDU1TldweWIyZzFWWGh0VDFkbGJucFBPVTVsVFRkaVkzUnNUbUpxTW10RWNrdEdlR3ROY3pKclZsZHlkMkpoTjFaeFdsbG9jakJGYm1aMGRnb3ZSSFptU0hFMVlYRmhReXR3ZG5GeGNUQlFlakY0TVZoS05HaHBWVmRDUzJKNVZrUktPWFJ3WWtRME9TdFBUbEJoVFVGd2VVcGFZMjlPYXpkNVRsZHhDazFKZGxkWVYxSm5iWGR3UkZRdlpWQTJSVzVCVTFKVGNHVlZkRTFQUTJ4TVUyNUhSazFXTVZCc2F6aHNkVmw0U1d0amNEbDBNbFkzY0Rjd1kwMXJWbWtLYWxOMWQzRnJkbkpxUXpCd09GWldXQzlpYUhwRVEzb3pRWFpEYVhST1FYRlBVME5yU3pOMU5rRkJibWRKWm1oblkyWmlZVlIzWkZKdVkySnJjMEpGV2dwMGEzaENTWEp5TlV0RmJuWXlPWG95YkRCS1YxQlRjWGMzUlVSVlNWcHlTR3BWVDJGcFJrdFZXV2RhZUdkaWVqaFhjWEp1WjJwUU5URktha3RXYTFKMENsRmFXamQzZDBsRVFWRkJRbTh3WjNkU2FrRlBRbWRPVmtoUk9FSkJaamhGUWtGTlEwSmhRWGRGZDFsRVZsSXdiRUpCZDNkRFoxbEpTM2RaUWtKUlZVZ0tRWGRKZDBoM1dVUldVakJxUWtKbmQwWnZRVlV4VkZoWmVXSTVSVGxhY25kTGFEQXZOM2RLU1hSTVVXZ3JhVzkzUkZGWlNrdHZXa2xvZG1OT1FWRkZUQXBDVVVGRVoyZEZRa0ZGVUVGemRrTkVjVkZYVUdSb05GZ3pWMVo0ZG5ReGVIWlBPWGRIY3pkeVIxUlliMlJLZURWbE4ycE9kbkY2YkRST2NVNXdSVmRhQ2pSRk5HSjRZVUV2TlV4a1QxUlVWRkptU0VRM1ZuTTNUREFyWlZWNGJYVlRVelpTVlZRcldtZE1XV2REWkVWMlNFcGpNRVkwVVU1d2VFNDBSbmhrV0ZNS1pVMDBhVVZKTkVWSGQxWk5VbGcwYlV4dmFrNXlkSEJVZDBOTlpVUTJaVVlyWlhwNlFqTkxkbVkyT1VseFdEZDVWVTFITWpaVVFtbDRhM1JvU1VWamJRbzJaMUJZWlZwdVdWaG9ORWwwTlhsMlNURnBPVkp1WlhoUmFFUTNhVTFRYm5scmN6RkhVMDlDVDBKV05FaGhOMk5sTUdFMWNqQTRlbE5EUjNsTmVXUTVDbFpXWm1ST2JVZHRVa1JETW1WTFRqWlBhMEZrVG01NU4xVXliMUV6VFZSMVNXWkROVGt2VTNKMU5XWlJUM1F5TUROQ1FVeHRibXBETjBkM1FuQnJPWG9LT1ZseFpXcFRTRkJ0VDBNelFsUlVlVWhpVDJVNVVtVTBVRlZuWm1GMlp6MEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjJkSlFrRkJTME5CVVVWQmVHOHdWMmxuUmpoYWJqQlVLMlJsTjJGdE1ETk9lVFZxY205b05WVjRiVTlYWlc1NlR6bE9aVTAzWW1OMGJFNWlDbW95YTBSeVMwWjRhMDF6TW10V1YzSjNZbUUzVm5GYVdXaHlNRVZ1Wm5SMkwwUjJaa2h4TldGeFlVTXJjSFp4Y1hFd1VIb3hlREZZU2pSb2FWVlhRa3NLWW5sV1JFbzVkSEJpUkRRNUswOU9VR0ZOUVhCNVNscGpiMDVyTjNsT1YzRk5TWFpYV0ZkU1oyMTNjRVJVTDJWUU5rVnVRVk5TVTNCbFZYUk5UME5zVEFwVGJrZEdUVll4VUd4ck9HeDFXWGhKYTJOd09YUXlWamR3TnpCalRXdFdhV3BUZFhkeGEzWnlha013Y0RoV1ZsZ3ZZbWg2UkVONk0wRjJRMmwwVGtGeENrOVRRMnRMTTNVMlFVRnVaMGxtYUdkalptSmhWSGRrVW01alltdHpRa1ZhZEd0NFFrbHljalZMUlc1Mk1qbDZNbXd3U2xkUVUzRjNOMFZFVlVsYWNrZ0thbFZQWVdsR1MxVlpaMXA0WjJKNk9GZHhjbTVuYWxBMU1VcHFTMVpyVW5SUldsbzNkM2RKUkVGUlFVSkJiMGxDUVVkTU1IVklTVXB6V1RKSE9IbHFTQXBQTTBsalozSk9kVE5IUjBaU1UzRkZhSGt3U3pZMU5EWm9lVEo0UTNGdFdVOHZOM0Z6VG10bFJWaExMM2hUSzBWRGFteGxjMFp1VFZORWVraEJaMFZYQ2paeldrVjBUSGRsTWpkTVJrZGhRWGhQUmxKd1duRk5hM3BYV1ROc1FVUkpkeTlDU0VkM1VraFdNME5MVTA5eE9YQTNjMjFaZFhwRkt6azVlWGhXWjJjS1NGWldZWEpJYTFwaFVXZzRaMlpZWlVKWmQxcEVZM1ZsYWpaVFUxbE5aV05uTVV3MlVuaDJSa0ZuTDNFeWVWRk5XVVI1TDA5RWRsRXhiMDV2YjJSdFp3cG5SMHRGWVVOWFlVVklTVmgxVjBsd2IxWkxVM0JPY21GV1FuVnhZbmRrVkd4amFtaEtaMHd3YjFGd1oxcEVSMDE2WTNkR1pUazFjM0pvZG5VeVJEQnBDbXhJV25GSlIySkJkVEpOUzNsSVRVWm1ZMGRTZUdKalMzaFNWaXRTY3paalF6UTRlVWxyYldKUmJHTkdUbkZKTVd0Rk56VXJOa1FyVDNjMlRtcDRkMmNLZUhsaFNVcFhSVU5uV1VWQk5tRnJhM0JXYW1OUlV5dEtZWEIwYVdwTlVpOHJkR1p5TVRGV2RsTlhhalJQUjFFeFNGSlhRbkJzVGtONGFEQmFTVkp0Y0FwNVFXSlFhbXN3V0M5elFtTklNVmRRVEVOaFFuWmhaREZTWjJNeFRHWmhORWxrUjFwS1kyRlJRM1JoZFhWNlVuQk1Tak5tTlVKQ05rUmFSR3MxV1c1T0NuWlhkMnR6UVZWQ2FrUTNVVXh0YkhSck4xcE1UamhtYlZOVVlrb3pWbGRtTW00eFR6bFdaVFJXUzJ4a1ZtbENUbFpwUjBRclpFMURaMWxGUVRKWmFXa0tNRGxST1M5cU5rSmlObnBaZEc5a0wxbzFURlIwV0VrdllXRlhOVVJhVUZCNVNYTnRZMUU1U0ROTmEzSnRWR2hWTURsbmRuZG5WMkZqT1ZneVZrUnJUd3BpYkM5UlZ6QXlaV2x5TVM5TFRuazNNVEZJTkRGblNXSTVjelZGU1hwaFRtMXJOa1pyUW5oak9Hc3hXamxxTHpob1JWTmFabm8yVUdKR1QzZFVWbGh0Q2pSa1JUQlNUMmd5UXpCYVJIQkxha3hCTTJSWWNsaFJjVmh0VjJOSVEzaG1ZMmwzYWpCR1JVTm5XVUZCTm5CSWFrOUNjamxCYms4eVowVTVPVzQ1VDJzS2NIazBZMnhTUVhaeFNVczBjbVZRY21KclkyODBUa014VDBNekswUkVlVE5PVW1Wb1VtcHZaVE5MUVM4eWVsVkthR3RyYURsclRXMWxRMkpGVUVkQ2VRcGxXVVI0VUdaeldXNDRhbXh2VVc0NGFUZ3plRGxuUzFWb1VXNTNkMGcyV0VSS1MwVlJha1JGV0ZGaGVEa3JXR1pITW5KdFIwSnRWMFpsYm5GMlZXYzBDazFvSzJGS1RFeHlWMmhMYzI5TmJrMHlZWEpNTUhkTFFtZEJiVGhSVEZaRlQxZFpTV1pDYURSWWRHRkZXaXRLUm5kMU0wczJRMWRrVVdoUWJXVndWV0VLUkZOV1oweHlTV3d5Y1hGdWVEZDNXRmc0VUV0S2JXaHhkV1pTTkM5VWJGcFdiVlJRY1ROdVFVVXhTRXd4ZVdoRGVHVlZiVUZSVW1od1RrVkRibmRITlFvMEsxcFpUSEI1TVdNMFNTdDVUbXhQYWt0UlUwMDJPRUZoT1VvMlRuSlJRMlprYkdKdlpsUk9UbnBtUjFOb1pXdHVjWEp1YlZGSVUyZEdUVTlrVmsxU0NuZExVMUpCYjBkQlZVbHZkekV5TTFOaWJtdG1WV0ptU1V3M2VGTmxZWGhwWjNSc1oxQmtPV1JTZFdobmVUTXJTSEJqTkZaUlJWcFpPV1UyY1hkU1Rra0tMMGRoYlhoMWVXUjVZekp1VXpKb0wwOVhkemh2YkhGd1RVdEROMlpvU0dFeGNWTlFZV1Z5V1dSeVEwNW5Va3hQU0d3Mk0xQlFZWE5KTWtrM1Rtb3JhZ3BLV1Zsc0wwZFJkR2RpWVd3NFpYQTBiMkl5UlVGb01scG9WbGM0VTBORFUzcEJURmRGZUhndlVsazVOVVpJVUhWUWNEQTlDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQo="}, "kind": "Secret", "metadata": {"creationTimestamp": "2021-11-10T16:02:25Z", "labels": {"cluster.x-k8s.io/cluster-name": "test1"}, "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:data": {".": {}, "f:value": {}}, "f:metadata": {"f:labels": {".": {}, "f:cluster.x-k8s.io/cluster-name": {}}, "f:ownerReferences": {".": {}, "k:{\"uid\":\"357d56c5-8128-4707-bcf6-b03093050365\"}": {}}}, "f:type": {}}, "manager": "manager", "operation": "Update", "time": "2021-11-10T16:02:25Z"}], "name": "test1-kubeconfig", "namespace": "metal3", "ownerReferences": [{"apiVersion": "controlplane.cluster.x-k8s.io/v1alpha4", "blockOwnerDeletion": true, "controller": true, "kind": "KubeadmControlPlane", "name": "test1", "uid": "357d56c5-8128-4707-bcf6-b03093050365"}], "resourceVersion": "4758", "uid": "09d31777-3697-4f62-967d-0c035064ca58"}, "type": "cluster.x-k8s.io/secret"}]}[0m
Wednesday 10 November 2021  18:47:37 +0000 (0:00:00.774)       0:01:30.211 **** 

TASK [v1aX_integration_test : Decode and save cluster kubeconfig] **************
[0;33mchanged: [localhost] => {"changed": true, "checksum": "a4eba206140b4d56b2d89bbf6617ce5200d22eb6", "dest": "/tmp/kubeconfig-test1.yaml", "gid": 1000, "group": "capm3", "md5sum": "e26f06945adbf7c4e7368073a826786f", "mode": "0664", "owner": "capm3", "size": 5531, "src": "/home/capm3/.ansible/tmp/ansible-tmp-1636570057.8769941-405531-277799736538811/source", "state": "file", "uid": 1000}[0m
Wednesday 10 November 2021  18:47:38 +0000 (0:00:00.624)       0:01:30.836 **** 

TASK [v1aX_integration_test : Create namespace] ********************************
[0;33mchanged: [localhost] => {"changed": true, "method": "create", "result": {"apiVersion": "v1", "kind": "Namespace", "metadata": {"creationTimestamp": "2021-11-10T18:47:39Z", "labels": {"kubernetes.io/metadata.name": "metal3"}, "managedFields": [{"apiVersion": "v1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {".": {}, "f:kubernetes.io/metadata.name": {}}}}, "manager": "OpenAPI-Generator", "operation": "Update", "time": "2021-11-10T18:47:39Z"}], "name": "metal3", "resourceVersion": "15335", "uid": "ba458a01-42a9-4f6b-a294-0db46866d553"}, "spec": {"finalizers": ["kubernetes"]}, "status": {"phase": "Active"}}}[0m
Wednesday 10 November 2021  18:47:39 +0000 (0:00:00.760)       0:01:31.596 **** 

TASK [v1aX_integration_test : Configure Ironic Configmap] **********************
[0;33mchanged: [localhost] => {"changed": true, "cmd": "cp /home/capm3/go/src/github.com/metal3-io/baremetal-operator/ironic-deployment/keepalived/ironic_bmo_configmap.env /home/capm3/go/src/github.com/metal3-io/baremetal-operator/ironic-deployment/keepalived/ironic_bmo_configmap.env.orig\ncp /opt/metal3-dev-env/ironic/ironic_bmo_configmap.env  /home/capm3/go/src/github.com/metal3-io/baremetal-operator/ironic-deployment/keepalived/ironic_bmo_configmap.env\n", "delta": "0:00:00.007430", "end": "2021-11-10 18:47:39.448140", "msg": "", "rc": 0, "start": "2021-11-10 18:47:39.440710", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}[0m
Wednesday 10 November 2021  18:47:39 +0000 (0:00:00.280)       0:01:31.877 **** 

TASK [v1aX_integration_test : Initialize Provider component in target cluster] ***
[1;30mtask path: /home/capm3/projects/metal3-dev-env/vm-setup/roles/v1aX_integration_test/tasks/move.yml:92[0m
[0;31mfatal: [localhost]: FAILED! => {"changed": true, "cmd": "clusterctl init --kubeconfig /tmp/kubeconfig-test1.yaml --core cluster-api:v0.4.1 --bootstrap kubeadm:v0.4.1 --control-plane kubeadm:v0.4.1 --infrastructure metal3:v0.5.2 -v 5", "delta": "0:00:03.746182", "end": "2021-11-10 18:47:43.458610", "msg": "non-zero return code", "rc": 1, "start": "2021-11-10 18:47:39.712428", "stderr": "Using configuration File=\"/home/capm3/.cluster-api/clusterctl.yaml\"\nInstalling the clusterctl inventory CRD\nCreating CustomResourceDefinition=\"providers.clusterctl.cluster.x-k8s.io\"\nFetching providers\nFetching File=\"core-components.yaml\" Provider=\"cluster-api\" Type=\"CoreProvider\" Version=\"v0.4.1\"\nFetching File=\"bootstrap-components.yaml\" Provider=\"kubeadm\" Type=\"BootstrapProvider\" Version=\"v0.4.1\"\nFetching File=\"control-plane-components.yaml\" Provider=\"kubeadm\" Type=\"ControlPlaneProvider\" Version=\"v0.4.1\"\nUsing Override=\"infrastructure-components.yaml\" Provider=\"infrastructure-metal3\" Version=\"v0.5.2\"\nFetching File=\"metadata.yaml\" Provider=\"cluster-api\" Type=\"CoreProvider\" Version=\"v0.4.1\"\nFetching File=\"metadata.yaml\" Provider=\"kubeadm\" Type=\"BootstrapProvider\" Version=\"v0.4.1\"\nFetching File=\"metadata.yaml\" Provider=\"kubeadm\" Type=\"ControlPlaneProvider\" Version=\"v0.4.1\"\nUsing Override=\"metadata.yaml\" Provider=\"infrastructure-metal3\" Version=\"v0.5.2\"\nCreating Namespace=\"cert-manager-test\"\nInstalling cert-manager Version=\"v1.5.3\"\nFetching File=\"cert-manager.yaml\" Provider=\"cert-manager\" Type=\"\" Version=\"v1.5.3\"\nError: failed to read \"cert-manager.yaml\" from provider's repository \"cert-manager\": failed to get GitHub release v1.5.3: rate limit for github api has been reached. Please wait one hour or get a personal API tokens a assign it to the GITHUB_TOKEN environment variable\nsigs.k8s.io/cluster-api/cmd/clusterctl/client/repository.(*componentsClient).getRawBytes\n\t/workspace/cmd/clusterctl/client/repository/components_client.go:94\nsigs.k8s.io/cluster-api/cmd/clusterctl/client/repository.(*componentsClient).Raw\n\t/workspace/cmd/clusterctl/client/repository/components_client.go:56\nsigs.k8s.io/cluster-api/cmd/clusterctl/client/cluster.(*certManagerClient).getManifestObjs\n\t/workspace/cmd/clusterctl/client/cluster/cert_manager.go:377\nsigs.k8s.io/cluster-api/cmd/clusterctl/client/cluster.(*certManagerClient).install\n\t/workspace/cmd/clusterctl/client/cluster/cert_manager.go:175\nsigs.k8s.io/cluster-api/cmd/clusterctl/client/cluster.(*certManagerClient).EnsureInstalled\n\t/workspace/cmd/clusterctl/client/cluster/cert_manager.go:162\nsigs.k8s.io/cluster-api/cmd/clusterctl/client.(*clusterctlClient).Init\n\t/workspace/cmd/clusterctl/client/init.go:115\nsigs.k8s.io/cluster-api/cmd/clusterctl/cmd.runInit\n\t/workspace/cmd/clusterctl/cmd/init.go:148\nsigs.k8s.io/cluster-api/cmd/clusterctl/cmd.glob..func12\n\t/workspace/cmd/clusterctl/cmd/init.go:87\ngithub.com/spf13/cobra.(*Command).execute\n\t/go/pkg/mod/github.com/spf13/cobra@v1.2.1/command.go:856\ngithub.com/spf13/cobra.(*Command).ExecuteC\n\t/go/pkg/mod/github.com/spf13/cobra@v1.2.1/command.go:974\ngithub.com/spf13/cobra.(*Command).Execute\n\t/go/pkg/mod/github.com/spf13/cobra@v1.2.1/command.go:902\nsigs.k8s.io/cluster-api/cmd/clusterctl/cmd.Execute\n\t/workspace/cmd/clusterctl/cmd/root.go:93\nmain.main\n\t/workspace/cmd/clusterctl/main.go:25\nruntime.main\n\t/usr/local/go/src/runtime/proc.go:225\nruntime.goexit\n\t/usr/local/go/src/runtime/asm_amd64.s:1371", "stderr_lines": ["Using configuration File=\"/home/capm3/.cluster-api/clusterctl.yaml\"", "Installing the clusterctl inventory CRD", "Creating CustomResourceDefinition=\"providers.clusterctl.cluster.x-k8s.io\"", "Fetching providers", "Fetching File=\"core-components.yaml\" Provider=\"cluster-api\" Type=\"CoreProvider\" Version=\"v0.4.1\"", "Fetching File=\"bootstrap-components.yaml\" Provider=\"kubeadm\" Type=\"BootstrapProvider\" Version=\"v0.4.1\"", "Fetching File=\"control-plane-components.yaml\" Provider=\"kubeadm\" Type=\"ControlPlaneProvider\" Version=\"v0.4.1\"", "Using Override=\"infrastructure-components.yaml\" Provider=\"infrastructure-metal3\" Version=\"v0.5.2\"", "Fetching File=\"metadata.yaml\" Provider=\"cluster-api\" Type=\"CoreProvider\" Version=\"v0.4.1\"", "Fetching File=\"metadata.yaml\" Provider=\"kubeadm\" Type=\"BootstrapProvider\" Version=\"v0.4.1\"", "Fetching File=\"metadata.yaml\" Provider=\"kubeadm\" Type=\"ControlPlaneProvider\" Version=\"v0.4.1\"", "Using Override=\"metadata.yaml\" Provider=\"infrastructure-metal3\" Version=\"v0.5.2\"", "Creating Namespace=\"cert-manager-test\"", "Installing cert-manager Version=\"v1.5.3\"", "Fetching File=\"cert-manager.yaml\" Provider=\"cert-manager\" Type=\"\" Version=\"v1.5.3\"", "Error: failed to read \"cert-manager.yaml\" from provider's repository \"cert-manager\": failed to get GitHub release v1.5.3: rate limit for github api has been reached. Please wait one hour or get a personal API tokens a assign it to the GITHUB_TOKEN environment variable", "sigs.k8s.io/cluster-api/cmd/clusterctl/client/repository.(*componentsClient).getRawBytes", "\t/workspace/cmd/clusterctl/client/repository/components_client.go:94", "sigs.k8s.io/cluster-api/cmd/clusterctl/client/repository.(*componentsClient).Raw", "\t/workspace/cmd/clusterctl/client/repository/components_client.go:56", "sigs.k8s.io/cluster-api/cmd/clusterctl/client/cluster.(*certManagerClient).getManifestObjs", "\t/workspace/cmd/clusterctl/client/cluster/cert_manager.go:377", "sigs.k8s.io/cluster-api/cmd/clusterctl/client/cluster.(*certManagerClient).install", "\t/workspace/cmd/clusterctl/client/cluster/cert_manager.go:175", "sigs.k8s.io/cluster-api/cmd/clusterctl/client/cluster.(*certManagerClient).EnsureInstalled", "\t/workspace/cmd/clusterctl/client/cluster/cert_manager.go:162", "sigs.k8s.io/cluster-api/cmd/clusterctl/client.(*clusterctlClient).Init", "\t/workspace/cmd/clusterctl/client/init.go:115", "sigs.k8s.io/cluster-api/cmd/clusterctl/cmd.runInit", "\t/workspace/cmd/clusterctl/cmd/init.go:148", "sigs.k8s.io/cluster-api/cmd/clusterctl/cmd.glob..func12", "\t/workspace/cmd/clusterctl/cmd/init.go:87", "github.com/spf13/cobra.(*Command).execute", "\t/go/pkg/mod/github.com/spf13/cobra@v1.2.1/command.go:856", "github.com/spf13/cobra.(*Command).ExecuteC", "\t/go/pkg/mod/github.com/spf13/cobra@v1.2.1/command.go:974", "github.com/spf13/cobra.(*Command).Execute", "\t/go/pkg/mod/github.com/spf13/cobra@v1.2.1/command.go:902", "sigs.k8s.io/cluster-api/cmd/clusterctl/cmd.Execute", "\t/workspace/cmd/clusterctl/cmd/root.go:93", "main.main", "\t/workspace/cmd/clusterctl/main.go:25", "runtime.main", "\t/usr/local/go/src/runtime/proc.go:225", "runtime.goexit", "\t/usr/local/go/src/runtime/asm_amd64.s:1371"], "stdout": "", "stdout_lines": []}[0m

PLAY RECAP *********************************************************************
[0;31mlocalhost[0m                  : [0;32mok=34  [0m [0;33mchanged=15  [0m unreachable=0    [0;31mfailed=1   [0m [0;36mskipped=3   [0m rescued=0    ignored=0   

Wednesday 10 November 2021  18:47:43 +0000 (0:00:04.001)       0:01:35.878 **** 
=============================================================================== 
v1aX_integration_test : Remove ironic container from source cluster (Ephemeral Cluster is kind) -- 65.50s
v1aX_integration_test : Initialize Provider component in target cluster --- 4.00s
v1aX_integration_test : Fetch container logs before pivoting ------------ 3.32s
