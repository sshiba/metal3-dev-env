kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: ${ CLUSTER_NAME }
  namespace: ${ NAMESPACE }
spec:
  rolloutStrategy:
    rollingUpdate:
      maxSurge: ${ MAX_SURGE_VALUE }
  replicas: ${ NUM_OF_MASTER_REPLICAS }
  version: ${ KUBERNETES_VERSION }
  machineTemplate:
    nodeDrainTimeout: ${ NODE_DRAIN_TIMEOUT }
    infrastructureRef:
      kind: Metal3MachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      name: ${ CLUSTER_NAME }-controlplane
  kubeadmConfigSpec:
    clusterConfiguration: {}
    joinConfiguration:
      controlPlane: {}
      nodeRegistration:
        name: "{{ ds.meta_data.name }}"
        kubeletExtraArgs:
          node-labels: "metal3.io/uuid={{ ds.meta_data.uuid }}"
          provider-id: "metal3://{{ ds.meta_data.uuid }}"
          feature-gates: "AllAlpha=false"
          container-runtime: "remote"
          cgroup-driver: "systemd"
          container-runtime-endpoint: "unix:///var/run/crio/crio.sock"
          runtime-request-timeout: "5m"
    initConfiguration:
      nodeRegistration:
        name: "{{ ds.meta_data.name }}"
        kubeletExtraArgs:
          node-labels: "metal3.io/uuid={{ ds.meta_data.uuid }}"
          provider-id: "metal3://{{ ds.meta_data.uuid }}"
          feature-gates: "AllAlpha=false"
          container-runtime: "remote"
          cgroup-driver: "systemd"
          container-runtime-endpoint: "unix:///var/run/crio/crio.sock"
          runtime-request-timeout: "5m"
    users:
    - name: metal3
      sudo: "ALL=(ALL) NOPASSWD:ALL"
      sshAuthorizedKeys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC472M4wmMkA7hh0879JIoYCDd6GT/TGt+BzgpZfGIuB5kZAuzZqup9qWabsLV7Lzvjey+c31Q7IEF51WxlqiON3AWNbyXDPqdzVtBbG6XSajM0P9oKeAAH2Z9Kp+O19yvgE9x0HD0rmPnhWqo5bQWX6wbIRuIaBuhC8Gs4nqAD5t5uiQYeE3RbEiSgfxnv9LIHxHS5FDz6ShhM7OnxB476wRPgc0bc5r9ijFW7+FvXWAWwZvauKnzgMkvs+AvRI6vDOMULDZrmlkOvoqpr1tV2ugm1L9qp7qz5JdgG+/bP6/uYzLXVCJvp0s0WQxDfCP1/ArgYL3Z3djvcC/skBoGLVWbXbwTDloUGVuNKmumE/sKiGqJIDrduNBkuYtcirtb13rt2Ept5TUQKKq+Hy0gTrNuGZ1NNE2t1N1cOtNea25X3cG2xl9oHmILkMw7tAiVmHl6f/wM6VX7d3THFcmH1bAVWyKA8hwYQFaF0DVKCojNMfdh3PyW8m7k+lguIRt0= azureuser@sidneyshiba-capm3-vm
    # Ubuntu specific controlplane kubeadm config
    preKubeadmCommands:
      - netplan apply
      - systemctl enable --now crio kubelet
      - if (curl -sk --max-time 10 https://192.168.111.249:6443/healthz); then echo "keepalived already running";else systemctl start keepalived; fi
      - systemctl link /lib/systemd/system/monitor.keepalived.service
      - systemctl enable monitor.keepalived.service
      - systemctl start monitor.keepalived.service
    postKubeadmCommands:
      - mkdir -p /home/metal3/.kube
      - cp /etc/kubernetes/admin.conf /home/metal3/.kube/config
      - systemctl enable --now keepalived
      - chown metal3:metal3 /home/metal3/.kube/config
    files:
      - path: /usr/local/bin/monitor.keepalived.sh
        owner: root:root
        permissions: '0755'
        content: |
            #!/bin/bash
            while :; do
              curl -sk https://127.0.0.1:6443/healthz 1>&2 > /dev/null
              isOk=$?
              isActive=$(systemctl show -p ActiveState keepalived.service | cut -d'=' -f2)
              if [ $isOk == "0" ] &&  [ $isActive != "active" ]; then
                logger 'API server is healthy, however keepalived is not running, starting keepalived'
                echo 'API server is healthy, however keepalived is not running, starting keepalived'
                sudo systemctl start keepalived.service
              elif [ $isOk != "0" ] &&  [ $isActive == "active" ]; then
                logger 'API server is not healthy, however keepalived running, stopping keepalived'
                echo 'API server is not healthy, however keepalived running, stopping keepalived'
                sudo systemctl stop keepalived.service
              fi
              sleep 5
            done
      - path: /lib/systemd/system/monitor.keepalived.service
        owner: root:root
        content: |
            [Unit]
            Description=Monitors keepalived adjusts status with that of API server
            After=syslog.target network-online.target

            [Service]
            Type=simple
            Restart=always
            ExecStart=/usr/local/bin/monitor.keepalived.sh

            [Install]
            WantedBy=multi-user.target
      - path: /etc/keepalived/keepalived.conf
        content: |
          ! Configuration File for keepalived
          global_defs {
              notification_email {
              sysadmin@example.com
              support@example.com
              }
              notification_email_from lb@example.com
              smtp_server localhost
              smtp_connect_timeout 30
          }
          vrrp_instance VI_2 {
              state MASTER
              interface enp2s0
              virtual_router_id 2
              priority 101
              advert_int 1
              virtual_ipaddress {
                  192.168.111.249
              }
          }
      - path : /etc/netplan/52-ironicendpoint.yaml
        owner: root:root
        permissions: '0644'
        content: |
          network:
            version: 2
            renderer: networkd
            bridges:
              ironicendpoint:
                interfaces: [enp1s0]
                addresses:
                - {{ ds.meta_data.provisioningIP }}/{{ ds.meta_data.provisioningCIDR }}
      - path : /etc/containers/registries.conf
        content: |
          [registries.search]
          registries = ['docker.io']

          [registries.insecure]
          registries = ['192.168.111.1:5000']
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: Metal3MachineTemplate
metadata:
  name: ${ CLUSTER_NAME }-controlplane
  namespace: ${ NAMESPACE }
spec:
  template:
    spec:
      image:
        url: http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img
        checksum: http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum
        checksumType: md5
        format: raw
      dataTemplate:
        name: ${ CLUSTER_NAME }-controlplane-template
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: Metal3DataTemplate
metadata:
  name: ${ CLUSTER_NAME }-controlplane-template
  namespace: ${ NAMESPACE }
spec:
  clusterName: ${ CLUSTER_NAME }
  metaData:
    objectNames:
      - key: name
        object: machine
      - key: local-hostname
        object: machine
      - key: local_hostname
        object: machine
    ipAddressesFromIPPool:
      - key: provisioningIP
        name: provisioning-pool
    prefixesFromIPPool:
      - key: provisioningCIDR
        name: provisioning-pool
  networkData:
    links:
      ethernets:
        - type: phy
          id: enp1s0
          macAddress:
            fromHostInterface: enp1s0
        - type: phy
          id: enp2s0
          macAddress:
            fromHostInterface: enp2s0
    networks:
      ipv4:
        - id: baremetalv4
          link: "enp2s0"
          ipAddressFromIPPool: baremetalv4-pool
          routes:
            - network: 0.0.0.0
              prefix: 0
              gateway:
                fromIPPool: baremetalv4-pool
    services:
      dns:
        - 8.8.8.8
