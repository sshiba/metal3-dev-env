apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${ CLUSTER_NAME }
  namespace: ${ NAMESPACE }
  labels:
    cluster.x-k8s.io/cluster-name: ${ CLUSTER_NAME }
    nodepool: nodepool-0
spec:
  clusterName: ${ CLUSTER_NAME }
  replicas: ${ NUM_OF_WORKER_REPLICAS }
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: ${ CLUSTER_NAME }
      nodepool: nodepool-0
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: ${ CLUSTER_NAME }
        nodepool: nodepool-0
    spec:
      clusterName: ${ CLUSTER_NAME }
      version: ${ KUBERNETES_VERSION }
      bootstrap:
        configRef:
          name: ${ CLUSTER_NAME }-workers
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: ${ CLUSTER_NAME }-workers
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: Metal3MachineTemplate
      nodeDrainTimeout: ${ NODE_DRAIN_TIMEOUT }
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: Metal3MachineTemplate
metadata:
  name: ${ CLUSTER_NAME }-workers
  namespace: ${ NAMESPACE }
spec:
  template:
    spec:
      image:
        url: http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img
        checksum: http://172.22.0.1/images/UBUNTU_20.04_NODE_IMAGE_K8S_v1.21.1-raw.img.md5sum
        checksumType: md5
        format: raw
      dataTemplate:
        name: ${ CLUSTER_NAME }-workers-template
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: Metal3DataTemplate
metadata:
  name: ${ CLUSTER_NAME }-workers-template
  namespace: ${ NAMESPACE }
spec:
  clusterName: ${ CLUSTER_NAME }
  metaData:
    objectNames:
      - key: name
        object: machine
      - key: local-hostname
        object: machine
      - key: local_hostname
        object: machine
    ipAddressesFromIPPool:
      - key: provisioningIP
        name: provisioning-pool
    prefixesFromIPPool:
      - key: provisioningCIDR
        name: provisioning-pool
  networkData:
    links:
      ethernets:
        - type: phy
          id: enp1s0
          macAddress:
            fromHostInterface: enp1s0
        - type: phy
          id: enp2s0
          macAddress:
            fromHostInterface: enp2s0
    networks:
      ipv4:
        - id: baremetalv4
          link: "enp2s0"
          ipAddressFromIPPool: baremetalv4-pool
          routes:
            - network: 0.0.0.0
              prefix: 0
              gateway:
                fromIPPool: baremetalv4-pool
    services:
      dns:
        - 8.8.8.8
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${ CLUSTER_NAME }-workers
  namespace: ${ NAMESPACE }
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          name: "{{ ds.meta_data.name }}"
          kubeletExtraArgs:
            node-labels: "metal3.io/uuid={{ ds.meta_data.uuid }}"
            provider-id: "metal3://{{ ds.meta_data.uuid }}"
            feature-gates: "AllAlpha=false"
            container-runtime: "remote"
            cgroup-driver: "systemd"
            container-runtime-endpoint: "unix:///var/run/crio/crio.sock"
            runtime-request-timeout: "5m"
      users:
      - name: metal3
        sudo: "ALL=(ALL) NOPASSWD:ALL"
        sshAuthorizedKeys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC472M4wmMkA7hh0879JIoYCDd6GT/TGt+BzgpZfGIuB5kZAuzZqup9qWabsLV7Lzvjey+c31Q7IEF51WxlqiON3AWNbyXDPqdzVtBbG6XSajM0P9oKeAAH2Z9Kp+O19yvgE9x0HD0rmPnhWqo5bQWX6wbIRuIaBuhC8Gs4nqAD5t5uiQYeE3RbEiSgfxnv9LIHxHS5FDz6ShhM7OnxB476wRPgc0bc5r9ijFW7+FvXWAWwZvauKnzgMkvs+AvRI6vDOMULDZrmlkOvoqpr1tV2ugm1L9qp7qz5JdgG+/bP6/uYzLXVCJvp0s0WQxDfCP1/ArgYL3Z3djvcC/skBoGLVWbXbwTDloUGVuNKmumE/sKiGqJIDrduNBkuYtcirtb13rt2Ept5TUQKKq+Hy0gTrNuGZ1NNE2t1N1cOtNea25X3cG2xl9oHmILkMw7tAiVmHl6f/wM6VX7d3THFcmH1bAVWyKA8hwYQFaF0DVKCojNMfdh3PyW8m7k+lguIRt0= azureuser@sidneyshiba-capm3-vm
      # Ubuntu specific worker kubeadm config
      preKubeadmCommands:
        - netplan apply
        - systemctl enable --now crio kubelet
      files:
        - path : /etc/netplan/52-ironicendpoint.yaml
          owner: root:root
          permissions: '0644'
          content: |
            network:
              version: 2
              renderer: networkd
              bridges:
                ironicendpoint:
                  interfaces: [enp1s0]
                  addresses:
                  - {{ ds.meta_data.provisioningIP }}/{{ ds.meta_data.provisioningCIDR }}
        - path : /etc/containers/registries.conf
          content: |
             [registries.search]
             registries = ['docker.io']

             [registries.insecure]
             registries = ['192.168.111.1:5000']
